<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VintagestoryAPI</name>
    </assembly>
    <members>
        <member name="T:Vintagestory.API.IAmbientManager">
            <summary>
            This is the system that manages the worlds ambient settings, such as fog color/density and clouds.
            The ambient manager basically blends ambientmodifiers on top of each other to generate the final ambient values.
            Blending is in order how the modifiers are held in CurrentModifiers in the likes of
            float weight = modifier.FogMin.Weight;
            BlendedFogMin = w * modifier.FogMin.Value + (1 - w) * BlendedFogMin;
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.Base">
            <summary>
            The base value or background ambient to overlay everything onto
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.CurrentModifiers">
            <summary>
            The list of modifiers that result in the blended values
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedFogColor">
            <summary>
            The blended fog color, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedAmbientColor">
            <summary>
            The blended ambient color, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedFogDensity">
            <summary>
            The blended fog density, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedFlatFogDensity">
            <summary>
            The blended flat fog density, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedFlatFogYOffset">
            <summary>
            The blended flat fog y-offset, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedFlatFogYPosForShader">
            <summary>
            BlendedFlatFogYPos + SeaLevel - MainCamera.TargetPosition.Y
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedFogMin">
            <summary>
            The blended fog min, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedCloudBrightness">
            <summary>
            The blended cloud brightness, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="P:Vintagestory.API.IAmbientManager.BlendedCloudDensity">
            <summary>
            The blended cloud density, calculated every frame from the list of modifiers
            </summary>
        </member>
        <member name="M:Vintagestory.API.IAmbientManager.UpdateAmbient(System.Single)">
            <summary>
            The update loop for this manager. Runs every frame.
            </summary>
            <param name="dt">the Delta or change in Time</param>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiAPI.QuadMeshRef">
            <summary>
            Just a default gpu-uploaded quad for 2d texture rendering, for your convenience
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiAPI.LoadedGuis">
            <summary>
            List of all registered guis
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiAPI.OpenedGuis">
            <summary>
            List of all currently opened guis
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiAPI.TextTexture">
            <summary>
            A utility class that does text texture generation for you
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiAPI.Text">
            <summary>
            A utlity class that helps draw text
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiAPI.Icons">
            <summary>
            A utility class that contains a bunch of hardcoded icons
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiAPI.WindowBounds">
            <summary>
            Returns a ElementBounds that is always the size of the game window
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.GetDialogBoundsInArea(Vintagestory.API.Client.EnumDialogArea)">
            <summary>
            If there is a currenly opened dialog or hud element, the method will return the bounds occuppying that area, otherwise null
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.CreateCompo(System.String,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new gui composition
            </summary>
            <param name="dialogName"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.RegisterDialog(Vintagestory.API.Client.GuiDialog[])">
            <summary>
            Register given dialog(s) to the gui/input event listening chain. You only need to call this if your dialog has to listen to events 
            even while closed. The method GuiDialog.TryOpen() also does the register if not registered already.
            </summary>
            <param name="dialogs"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.DeleteTexture(System.Int32)">
            <summary>
            Removes given texture from graphics card memory
            </summary>
            <param name="textureid"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.LoadCairoTexture(Cairo.ImageSurface,System.Boolean)">
            <summary>
            Load the contents of a cairo surface into a opengl texture. Returns the texture id
            </summary>
            <param name="surface"></param>
            <param name="linearMag"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.LoadOrUpdateCairoTexture(Cairo.ImageSurface,System.Boolean,Vintagestory.API.Client.LoadedTexture@)">
            <summary>
            Load the contents of a cairo surface into a opengl texture. Re-uses the supplied texture exists and the size is correct. Otherwise deletes the texture and regenerates it.
            </summary>
            <param name="surface"></param>
            <param name="linearMag"></param>
            <param name="intoTexture"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.GetDialogPosition(System.String)">
            <summary>
            Retrieve the saved dialog position from settings
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.SetDialogPosition(System.String,Vintagestory.API.MathTools.Vec2i)">
            <summary>
            Remember the dialog position for given dialog key
            </summary>
            <param name="key"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.PlaySound(System.String,System.Boolean,System.Single)">
            <summary>
            Plays a sound, non location specific
            </summary>
            <param name="soundname">The name of the sound</param>
            <param name="randomizePitch">If true, the pitch is slightly randomized each time</param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.PlaySound(Vintagestory.API.Common.AssetLocation,System.Boolean,System.Single)">
            <summary>
            Plays a sound, non location specific.
            </summary>
            <param name="soundname">The name of the sound</param>
            <param name="randomizePitch">If true, the pitch is slightly randomized each time</param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.RequestFocus(Vintagestory.API.Client.GuiDialog)">
            <summary>
            Requests the given GUI to be given focus.
            </summary>
            <param name="guiDialog">The dialogue wanting attention.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.TriggerDialogOpened(Vintagestory.API.Client.GuiDialog)">
            <summary>
            Triggers the opening of a dialogue.  
            </summary>
            <param name="guiDialog">The dialogue to be opened.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.TriggerDialogClosed(Vintagestory.API.Client.GuiDialog)">
            <summary>
            Triggers the closing of a dialogue.
            </summary>
            <param name="guiDialog">The dialogue to be closed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiAPI.OpenLink(System.String)">
            <summary>
            Opens up a confirm dialog asking the player if he wants to open an external link
            </summary>
            <param name="href"></param>
        </member>
        <member name="T:Vintagestory.API.Client.IInputAPI">
            <summary>
            This interface manages the inputs of the player and is used mostly on the client side.  
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IInputAPI.InWorldAction">
            <summary>
            Triggered when the player attempts to trigger an action, such as walking forward or sprinting
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.KeyboardKeyStateRaw">
            <summary>
            The current keyboard key states, use the <see cref="T:Vintagestory.API.Client.GlKeys"/> enum to get the index of an array key.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.KeyboardKeyState">
            <summary>
            The current keyboard key states that were not handled by a dialog or other client systems (exception: hotkeys), use the <see cref="T:Vintagestory.API.Client.GlKeys"/> enum to get the array index of a key.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.MouseButton">
            <summary>
            The current mouse button state
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.InWorldMouseButton">
            <summary>
            The current mouse button state outside of dialogs / clicked inside the game world
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.MouseX">
            <summary>
            The current x-position of the mouse, relative to the upper left corner of the game window
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.MouseY">
            <summary>
            The current y-position of the mouse, relative to the upper left corner of the game window
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.MouseYaw">
            <summary>
            When controlling the camera, this is the camera yaw determined by the game engine
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.MousePitch">
            <summary>
            When controlling the camera, this is the camera pitch determined by the game engine
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IInputAPI.TriggerOnMouseEnterSlot(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Handles the event when the mouse enters the bounding box of the given item slot.
            </summary>
            <param name="slot">The slot of the item.</param>
            <remarks>Part of a group of things that will be moved to an event bus at some point.</remarks>
        </member>
        <member name="M:Vintagestory.API.Client.IInputAPI.TriggerOnMouseLeaveSlot(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Handles the event when the mouse leaves the bounding box of the given item slot.
            </summary>
            <param name="itemSlot">The slot of the item</param>
            <remarks>Part of a group of things that will be moved to an event bus at some point.</remarks>
        </member>
        <member name="M:Vintagestory.API.Client.IInputAPI.TriggerOnMouseClickSlot(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Handles the event when the mouse clicks on a given item slot.
            </summary>
            <param name="itemSlot">The slot of the item</param>
            <remarks>Part of a group of things that will be moved to an event bus at some point.</remarks>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.MouseWorldInteractAnyway">
            <summary>
            Gives the player the ability to still interact with the world even if a gui dialog is opened
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.MouseGrabbed">
            <summary>
            True if the mouse cursor is currently grabbed and not visible.
            (Such as while controlling the character's view in first person.)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IInputAPI.RegisterHotKey(System.String,System.String,Vintagestory.API.Client.GlKeys,Vintagestory.API.Client.HotkeyType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Registers a hot key with given default key combination, the player will be able change these in the controls. Supplied hotkeyCode can than be used to register a hotkey handler.
            </summary>
            <param name="hotkeyCode"></param>
            <param name="name"></param>
            <param name="key"></param>
            <param name="type"></param>
            <param name="altPressed"></param>
            <param name="ctrlPressed"></param>
            <param name="shiftPressed"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IInputAPI.SetHotKeyHandler(System.String,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Client.KeyCombination})">
            <summary>
            Will call the handler if given hotkey has been pressed. Removes the previously assigned handler.
            </summary>
            <param name="hotkeyCode"></param>
            <param name="handler"></param>
        </member>
        <member name="P:Vintagestory.API.Client.IInputAPI.HotKeys">
            <summary>
            Returns a list of all currently registered hotkeys.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IInputAPI.GetHotKeyByCode(System.String)">
            <summary>
            Gets the hotkey by the given hotkey code.
            </summary>
            <param name="toggleKeyCombinationCode">the key combination code.</param>
            <returns>The registered hotkey.</returns>
        </member>
        <member name="T:Vintagestory.API.Client.ISettingsClass`1">
            <summary>
            Setting interface.
            </summary>
            <typeparam name="T">The type of the given setting.</typeparam>
        </member>
        <member name="P:Vintagestory.API.Client.ISettingsClass`1.Item(System.String)">
            <summary>
            Gets and sets the setting with the provided key.
            </summary>
            <param name="key">The key to the setting.</param>
            <returns>The current value of the given key.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.ISettingsClass`1.Get(System.String,`0)">
            <summary>
            Gets the setting with the provided key
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ISettingsClass`1.Exists(System.String)">
            <summary>
            Does this setting exist?
            </summary>
            <param name="key">The key to check on a setting.</param>
            <returns>Whether the setting exists or not.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.ISettingsClass`1.AddWatcher(System.String,Vintagestory.API.Client.OnSettingsChanged{`0})">
            <summary>
            Setting watcher for changes in values for a given setting.
            </summary>
            <param name="key">Key to the setting</param>
            <param name="OnValueChanged">the OnValueChanged event fired.</param>
        </member>
        <member name="M:Vintagestory.API.Client.ISettingsClass`1.RemoveWatcher(System.String,Vintagestory.API.Client.OnSettingsChanged{`0})">
            <summary>
            Removes a previously assigned watcher
            </summary>
            <param name="key"></param>
            <param name="handler"></param>
            <returns>True if successfully removed</returns>
        </member>
        <member name="T:Vintagestory.API.Client.ISettings">
            <summary>
            Setting interface for multiple settings.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ISettings.Bool">
            <summary>
            Setting collection for boolean values.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ISettings.Int">
            <summary>
            Setting collection for integer values.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ISettings.Float">
            <summary>
            Setting collection for float values.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ISettings.String">
            <summary>
            Setting collection for string values.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ISettings.Strings">
            <summary>
            Setting collection for string list values.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ISettings.AddWatcher``1(System.String,Vintagestory.API.Client.OnSettingsChanged{``0})">
            <summary>
            Setting watcher for changes in values for a given setting.
            </summary>
            <typeparam name="T">The type of the value that was changed.</typeparam>
            <param name="key">Key to the setting</param>
            <param name="OnValueChanged">the OnValueChanged event fired.</param>
        </member>
        <member name="T:Vintagestory.API.Client.IItemTextureAtlasAPI">
            <summary>
            Item texture Atlas.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IItemTextureAtlasAPI.GetPosition(Vintagestory.API.Common.Item,System.String,System.Boolean)">
            <summary>
            Returns the position in the item texture atlas of given item. For items that don't use custom shapes you don't have to supply the textureName
            </summary>
            <param name="item"></param>
            <param name="textureName"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.IBlockTextureAtlasAPI">
            <summary>
            Block texture Atlas
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IBlockTextureAtlasAPI.GetPosition(Vintagestory.API.Common.Block,System.String,System.Boolean)">
            <summary>
            Returns the position in the block texture atlas of given block. 
            </summary>
            <param name="block"></param>
            <param name="textureName"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.ITextureAtlasAPI">
            <summary>
            Entity texture Atlas.
            </summary>
            <summary>
            Texture atlas base.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ITextureAtlasAPI.UnknownTexturePosition">
            <summary>
            The texture atlas position of the "unknown.png" texture
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ITextureAtlasAPI.Size">
            <summary>
            Size of one block texture atlas
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ITextureAtlasAPI.SubPixelPaddingX">
            <summary>
            As configured in the clientsettings.json divided by the texture atlas size
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ITextureAtlasAPI.Positions">
            <summary>
            Returns the default texture atlas position for all blocks, referenced  by the texturesubid
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ITextureAtlasAPI.AtlasTextureIds">
            <summary>
            Returns the list of currently loaded texture atlas ids
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.AllocateTextureSpace(System.Int32,System.Int32,System.Int32@,Vintagestory.API.Client.TextureAtlasPosition@)">
            <summary>
            Reserves a spot on the texture atlas. Returns true if allocation was successful.
            Can be used to render onto it through the Render API
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="textureSubId"></param>
            <param name="texPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.InsertTexture(Vintagestory.API.Common.IBitmap,System.Int32@,Vintagestory.API.Client.TextureAtlasPosition@,System.Single)">
            <summary>
            Inserts a texture into the texture atlas after the atlas has been generated. Updates the in-ram texture atlas as well as the in-gpu-ram texture atlas. 
            The textureSubId can be used to find the TextureAtlasPosition again in case you loose it ;-)
            </summary>
            <param name="bmp"></param>
            <param name="textureSubId"></param>
            <param name="texPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.InsertTexture(System.Byte[],System.Int32@,Vintagestory.API.Client.TextureAtlasPosition@,System.Single)">
            <summary>
            Inserts a texture into the texture atlas after the atlas has been generated. Updates the in-ram texture atlas as well as the in-gpu-ram texture atlas. 
            The textureSubId can be used to find the TextureAtlasPosition again in case you loose it ;-)
            </summary>
            <param name="bmp"></param>
            <param name="textureSubId"></param>
            <param name="texPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.InsertTextureCached(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.IBitmap,System.Int32@,Vintagestory.API.Client.TextureAtlasPosition@,System.Single)">
            <summary>
            Same as <see cref="M:Vintagestory.API.Client.ITextureAtlasAPI.InsertTexture(Vintagestory.API.Common.IBitmap,System.Int32@,Vintagestory.API.Client.TextureAtlasPosition@,System.Single)"/> but this method remembers the inserted texure, which you can access using capi.TextureAtlas[path]
            </summary>
            <param name="path"></param>
            <param name="bmp"></param>
            <param name="textureSubId"></param>
            <param name="texPos"></param>
            <param name="alphaTest"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.InsertTextureCached(Vintagestory.API.Common.AssetLocation,System.Byte[],System.Int32@,Vintagestory.API.Client.TextureAtlasPosition@,System.Single)">
            <summary>
            Same as <see cref="M:Vintagestory.API.Client.ITextureAtlasAPI.InsertTexture(Vintagestory.API.Common.IBitmap,System.Int32@,Vintagestory.API.Client.TextureAtlasPosition@,System.Single)"/> but this method remembers the inserted texure, which you can access using capi.TextureAtlas[path]
            </summary>
            <param name="path"></param>
            <param name="bmp"></param>
            <param name="textureSubId"></param>
            <param name="texPos"></param>
            <param name="alphaTest"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.FreeTextureSpace(System.Int32)">
            <summary>
            Deallocates a previously allocated texture space
            </summary>
            <param name="textureSubId"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.GetRandomColor(System.Int32)">
            <summary>
            Returns an rgba value picked randomly inside the given texture (defined by its sub-id)
            </summary>
            <param name="textureSubId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.GetAverageColor(System.Int32)">
            <summary>
            Returns you an average rgba value picked inside the texture subid
            </summary>
            <param name="textureSubId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITextureAtlasAPI.RenderTextureIntoAtlas(Vintagestory.API.Client.LoadedTexture,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Renders given texture into the texture atlas at given location
            </summary>
            <param name="fromTexture"></param>
            <param name="sourceX"></param>
            <param name="sourceY"></param>
            <param name="sourceWidth"></param>
            <param name="sourceHeight"></param>
            <param name="targetX"></param>
            <param name="targetY"></param>
            <param name="alphaTest"></param>
        </member>
        <member name="T:Vintagestory.API.Client.MusicTrack">
            <summary>
            Adds a basic music track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrack.loading">
            <summary>
            Is it loading?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrack.Sound">
            <summary>
            Get the current sound file.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MusicTrack.IsActive">
            <summary>
            Is the current song actively playing or is it loading? (False if neither action.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MusicTrack.Priority">
            <summary>
            The current song's priority.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MusicTrack.Name">
            <summary>
            The name of the track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrack.capi">
            <summary>
            Core client API.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrack.Stop">
            <summary>
            Stops the track immediately
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrack.Initialize(Vintagestory.API.Common.IAssetManager,Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.IMusicEngine)">
            <summary>
            Initialize the track.
            </summary>
            <param name="assetManager">the global Asset Manager</param>
            <param name="capi">The Core Client API</param>
            <param name="musicEngine"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrack.ShouldPlay(Vintagestory.API.Common.Entities.TrackedPlayerProperties,Vintagestory.API.Common.ClimateCondition,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Should this current track play?
            </summary>
            <param name="props">Player Properties</param>
            <returns>Should we play the current track?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrack.BeginPlay(Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            Begins playing the Music track.
            </summary>
            <param name="props">Player Properties</param>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrack.ContinuePlay(System.Single,Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            Is it cool for the current track to continue playing?
            </summary>
            <param name="dt">Delta Time/Change in time.</param>
            <param name="props">Track properties.</param>
            <returns>Cool or not cool?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrack.FadeOut(System.Single,Vintagestory.API.Common.Action)">
            <summary>
            Fades out the current track.  
            </summary>
            <param name="seconds">The duration of the fade out in seconds.</param>
            <param name="onFadedOut">What to have happen after the track has faded out.</param>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrack.UpdateVolume">
            <summary>
            Updates the volume of the current track provided Sound is not null. (effectively calls Sound.SetVolume)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GlKeyNames.ToString(Vintagestory.API.Client.GlKeys)">
            <summary>
            Converts the given key to a string.
            </summary>
            <param name="key">the key being passed in.</param>
            <returns>the string name of the key.</returns>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.GUIOrOtherControls">
            <summary>
            Controls that are always available (survival and creative mode)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.CharacterControls">
            <summary>
            Controls that control the players character. Only triggered when the player not currently inside a dialog.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.CreativeTool">
            <summary>
            Controls that are only available in creative mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.CreativeOrSpectatorTool">
            <summary>
            Controls that are only available in creative or spectator mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotkeyType.DevTool">
            <summary>
            Developer tools
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.IsGlobalHotkey">
            <summary>
            For global hotkeys that shall not be blocked by anything (e.g. F11 for fullscreen, F12 for screenshot)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.IsIngameHotkey">
            <summary>
            For hotkeys that only available during a game session. When the game session ends, the handler to this hotkey is removed (or we have a dead reference to runninggame)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.CurrentMapping">
            <summary>
            The current key combination for this hotkey
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.DefaultMapping">
            <summary>
            The default key combination for this hotkey
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.Code">
            <summary>
            The code of the Hotkey.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.Name">
            <summary>
            The name of the Hotkey
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.KeyCombinationType">
            <summary>
            The type of the key combination.  This defaults to HotkeyType.CharacterControls.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.HotKey.Handler">
            <summary>
            This is the action that happens when the hotkey is used.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.HotKey.DidPress(Vintagestory.API.Client.KeyEvent,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,System.Boolean)">
            <summary>
            Was this hotkey pressed?
            </summary>
            <param name="keyEventargs">Event arguments for the given key.</param>
            <param name="world">The current world for the key.</param>
            <param name="player">The player that pressed the buttons.</param>
            <param name="allowCharacterControls">Do we allow character control functions.</param>
            <returns>If the hotkey was pressed or not.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.HotKey.FallbackDidPress(Vintagestory.API.Client.KeyEvent,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,System.Boolean)">
            <summary>
            Fallback version of the DidPress event.
            </summary>
            <param name="keyEventargs">Event arguments for the given key.</param>
            <param name="world">The current world for the key.</param>
            <param name="player">The player that pressed the buttons.</param>
            <param name="allowCharacterControls">Do we allow character control functions.</param>
            <returns>If the hotkey was pressed or not.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.HotKey.Clone">
            <summary>
            Clones the hotkey.
            </summary>
            <returns>the cloned hotkey.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.HotKey.SetDefaultMapping">
            <summary>
            Sets the default keymap for this hotkey.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.KeyCombination">
            <summary>
            Mapping of a key combination
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.KeyCombination.KeyCode">
            <summary>
            The KeyCode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.KeyCombination.SecondKeyCode">
            <summary>
            The second key code (if it exists).
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.KeyCombination.Ctrl">
            <summary>
            Ctrl pressed condition.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.KeyCombination.Alt">
            <summary>
            Alt pressed condition.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.KeyCombination.Shift">
            <summary>
            Shift pressed condition.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.KeyCombination.ToString">
            <summary>
            Converts this key combination into a string.
            </summary>
            <returns>The string code for this Key Combination.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.KeyCombination.Clone">
            <summary>
            Clones the current key combination.
            </summary>
            <returns>The cloned key combination.</returns>
        </member>
        <member name="P:Vintagestory.API.Client.KeyEvent.KeyChar">
            <summary>
            the character for the given key.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.KeyEvent.KeyCode">
            <summary>
            The keycode value.  
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.KeyEvent.KeyCode2">
            <summary>
            If a player taps in quick succession, this is the second key
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.KeyEvent.Handled">
            <summary>
            Is this keypress/key combination handled?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.KeyEvent.CtrlPressed">
            <summary>
            Is control/Ctrl being held down?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.KeyEvent.CommandPressed">
            <summary>
            Is mac os command key being held down?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.KeyEvent.ShiftPressed">
            <summary>
            Is Shift being held down?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.KeyEvent.AltPressed">
            <summary>
            Is Alt being held down?
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.MouseEvent">
            <summary>
            This contains the data for what the mouse is currently doing.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MouseEvent.X">
            <summary>
            Current X position of the mouse.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MouseEvent.Y">
            <summary>
            Current Y position of the mouse.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MouseEvent.DeltaX">
            <summary>
            The X movement of the mouse.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MouseEvent.DeltaY">
            <summary>
            The Y movement of the mouse.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MouseEvent.Button">
            <summary>
            Gets the current mouse button pressed.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MouseEvent.Handled">
            <summary>
            Am I handled?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MouseEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Vintagestory.API.Common.EnumMouseButton)">
            <summary>
            This is apparently used for mouse move events (set to true if the mouse state has changed during constant polling, set to false if the move event came from opentk. This emulated state is apparantly used to determine the correct delta position to turn the camera.
            </summary>
            <returns></returns>
            
        </member>
        <member name="T:Vintagestory.API.Client.MouseWheelEventArgs">
            <summary>
            The event arguments for the mouse.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MouseWheelEventArgs.delta">
            <summary>
            The rough change in time since last called.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MouseWheelEventArgs.deltaPrecise">
            <summary>
            The precise change in time since last called.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MouseWheelEventArgs.value">
            <summary>
            The rough change in value.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MouseWheelEventArgs.valuePrecise">
            <summary>
            The precise change in value.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MouseWheelEventArgs.IsHandled">
            <summary>
            Is the current event being handled?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MouseWheelEventArgs.SetHandled(System.Boolean)">
            <summary>
            Changes or sets the current handled state.
            </summary>
            <param name="value">Should the event be handled?</param>
        </member>
        <member name="T:Vintagestory.API.Client.CustomMeshDataPartShort">
            <summary>
            Holds arbitrary short data for meshes to be used in the shader
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartShort.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartShort.#ctor(System.Int32)">
            <summary>
            Size initialization constructor.
            </summary>
            <param name="arraySize"></param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartShort.Clone">
            <summary>
            Creates a clone of this collection of data parts.
            </summary>
            <returns>A clone of this collection of data parts.</returns>
        </member>
        <member name="F:Vintagestory.API.Client.Tesselation.TileSideEnum.Opposites">
            <summary>
            This can also be done algorithmically as (i ^ (2 - i / 4))
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumVelocityState.Moving">
            <summary>
            Currently falling
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumVelocityState.OutsideWorld">
            <summary>
            Is now outside the world (x/y/z below -30 or x/z above mapsize + 30)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumVelocityState.Collided">
            <summary>
            Was falling and has now collided with the terrain
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ParticlePhysics.UpdateMotion(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d,System.Single)">
            <summary>
            Updates the velocity vector according to the amount of passed time, gravity and terrain collision.
            </summary>
            <param name="pos"></param>
            <param name="motion"></param>
            <param name="blockAccessor"></param>
            <param name="gravityStrength"></param>
            <param name="deltatime"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementColorListPicker">
            <summary>
            Creates a toggle button for the GUI.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementColorListPicker.On">
            <summary>
            Is this button on?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementColorListPicker.Focusable">
            <summary>
            Is this element capable of being in the focus?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementColorListPicker.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.Int32,Vintagestory.API.Common.Action{System.Boolean},Vintagestory.API.Client.ElementBounds)">
            <summary>
            Constructor for the button
            </summary>
            <param name="capi">The core client API.</param>
            <param name="color"></param>
            <param name="OnToggled">The action that happens when the button is toggled.</param>
            <param name="bounds">The bounding box of the button.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementColorListPicker.ComposeElements(Cairo.Context,Cairo.ImageSurface)">
            <summary>
            Composes the element in both the pressed, and released states.
            </summary>
            <param name="ctx">The context of the element.</param>
            <param name="surface">The surface of the element.</param>
            <remarks>Neither the context, nor the surface is used in this function.</remarks>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementColorListPicker.RenderInteractiveElements(System.Single)">
            <summary>
            Renders the button.
            </summary>
            <param name="deltaTime">The time elapsed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementColorListPicker.OnMouseDownOnElement(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            Handles the mouse button press while the mouse is on this button.
            </summary>
            <param name="api">The client API</param>
            <param name="args">The mouse event arguments.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementColorListPicker.OnMouseUpOnElement(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            Handles the mouse button release while the mouse is on this button.
            </summary>
            <param name="api">The client API</param>
            <param name="args">The mouse event arguments</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementColorListPicker.OnMouseUp(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            Handles the event fired when the mouse is released.
            </summary>
            <param name="api">The client API</param>
            <param name="args">Mouse event arguments</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementColorListPicker.SetValue(System.Boolean)">
            <summary>
            Sets the value of the button.
            </summary>
            <param name="on">Am I on or off?</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementColorListPicker.Dispose">
            <summary>
            Disposes of the button.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetColorListPicker(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the toggle button by name in the GUIComposer.
            </summary>
            <param name="key">The name of the button.</param>
            <returns>A button.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.ColorListPickerSetValue(Vintagestory.API.Client.GuiComposer,System.String,System.Int32)">
            <summary>
            Toggles the given button.
            </summary>
            <param name="key">The name of the button that was set.</param>
            <param name="selectedIndex">the index of the button.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddColorListPicker(Vintagestory.API.Client.GuiComposer,System.Int32[],Vintagestory.API.Common.Action{System.Int32},Vintagestory.API.Client.ElementBounds,System.Int32,System.String)">
            <summary>
            Adds multiple buttons with Text.
            </summary>
            <param name="texts">The texts on all the buttons.</param>
            <param name="font">The font for the buttons</param>
            <param name="onToggle">The event fired when the button is pressed.</param>
            <param name="bounds">The bounds of the buttons.</param>
            <param name="key">The key given to the bundle of buttons.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddContainer(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a container to the current GUI. Can be used to add any gui element within a scrollable window.
            </summary>
            <param name="composer"></param>
            <param name="bounds">The bounds of the cell.</param>
            <param name="key">The identifier for the list.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetContainer(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the container by key
            </summary>
            <param name="composer"></param>
            <param name="key">The name of the list to get.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddCustomRender(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.RenderDelegateWithBounds)">
            <summary>
            Adds a static custom draw component to the GUI.
            </summary>
            <param name="bounds">The bounds of the component.</param>
            <param name="OnDraw">The event fired when the element is drawn.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetToggleButton(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the toggle button by name in the GUIComposer.
            </summary>
            <param name="key">The name of the button.</param>
            <returns>A button.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddToggleButton(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Common.Action{System.Boolean},Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Creates a toggle button with the given parameters.
            </summary>
            <param name="text">The text of the button.</param>
            <param name="font">The font of the text.</param>
            <param name="onToggle">The event that happens once the button is toggled.</param>
            <param name="bounds">The bounding box of the button.</param>
            <param name="key">The name of the button for easy access.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddIconButton(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Common.Action{System.Boolean},Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds an icon button.
            </summary>
            <param name="icon">The name of the icon.</param>
            <param name="onToggle">The event that happens once the button is toggled.</param>
            <param name="bounds">The bounding box of the button.</param>
            <param name="key">The name of the button for easy access.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.ToggleButtonsSetValue(Vintagestory.API.Client.GuiComposer,System.String,System.Int32)">
            <summary>
            Toggles the given button.
            </summary>
            <param name="key">The name of the button that was set.</param>
            <param name="selectedIndex">the index of the button.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddIconToggleButtons(Vintagestory.API.Client.GuiComposer,System.String[],Vintagestory.API.Client.CairoFont,Vintagestory.API.Common.Action{System.Int32},Vintagestory.API.Client.ElementBounds[],System.String)">
            <summary>
            Adds multiple buttons with icons.
            </summary>
            <param name="icons">The collection of icons for the buttons.</param>
            <param name="font">The font for the buttons.</param>
            <param name="onToggle">The event called when the buttons are pressed.</param>
            <param name="bounds">The bounds of the buttons.</param>
            <param name="key">The key given to the bundle of buttons.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddTextToggleButtons(Vintagestory.API.Client.GuiComposer,System.String[],Vintagestory.API.Client.CairoFont,Vintagestory.API.Common.Action{System.Int32},Vintagestory.API.Client.ElementBounds[],System.String)">
            <summary>
            Adds multiple buttons with Text.
            </summary>
            <param name="texts">The texts on all the buttons.</param>
            <param name="font">The font for the buttons</param>
            <param name="onToggle">The event fired when the button is pressed.</param>
            <param name="bounds">The bounds of the buttons.</param>
            <param name="key">The key given to the bundle of buttons.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddCompactVerticalScrollbar(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Common.Action{System.Single},Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a compact vertical scrollbar to the current GUI.
            </summary>
            <param name="onNewScrollbarValue">The event fired for the change in the scrollbar.</param>
            <param name="bounds">the bounds of the scrollbar.</param>
            <param name="key">the internal name of the scrollbar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetCompactScrollbar(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the scrollbar from the dialogue.
            </summary>
            <param name="key">the internal name of the scrollbar to be gotten</param>
            <returns>The scrollbar with the given key.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddMultiSelectDropDown(Vintagestory.API.Client.GuiComposer,System.String[],System.String[],System.Int32,Vintagestory.API.Client.SelectionChangedDelegate,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a multiple select dropdown to the current GUI instance.
            </summary>
            <param name="values">The values of the current drodown.</param>
            <param name="names">The names of those values.</param>
            <param name="selectedIndex">The default selected index.</param>
            <param name="onSelectionChanged">The event fired when the index is changed.</param>
            <param name="bounds">The bounds of the index.</param>
            <param name="key">The name of this dropdown.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddDropDown(Vintagestory.API.Client.GuiComposer,System.String[],System.String[],System.Int32,Vintagestory.API.Client.SelectionChangedDelegate,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a dropdown to the current GUI instance.
            </summary>
            <param name="values">The values of the current drodown.</param>
            <param name="names">The names of those values.</param>
            <param name="selectedIndex">The default selected index.</param>
            <param name="onSelectionChanged">The event fired when the index is changed.</param>
            <param name="bounds">The bounds of the index.</param>
            <param name="key">The name of this dropdown.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddDropDown(Vintagestory.API.Client.GuiComposer,System.String[],System.String[],System.Int32,Vintagestory.API.Client.SelectionChangedDelegate,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.CairoFont,System.String)">
            <summary>
            Adds a dropdown to the current GUI instance.
            </summary>
            <param name="values">The values of the current drodown.</param>
            <param name="names">The names of those values.</param>
            <param name="selectedIndex">The default selected index.</param>
            <param name="onSelectionChanged">The event fired when the index is changed.</param>
            <param name="bounds">The bounds of the index.</param>
            <param name="key">The name of this dropdown.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetDropDown(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the Drop Down element from the GUIComposer by their key.
            </summary>
            <param name="key">the name of the dropdown to fetch.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddHorizontalTabs(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.GuiTab[],Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.Int32},Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.CairoFont,System.String)">
            <summary>
            Adds a set of horizontal tabs to the GUI.
            </summary>
            <param name="tabs">The collection of tabs.</param>
            <param name="bounds">The bounds of the horizontal tabs.</param>
            <param name="OnTabClicked">The event fired when the tab is clicked.</param>
            <param name="font">The font of the tabs.</param>
            <param name="key">The key for the added horizontal tabs.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetHorizontalTabs(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the HorizontalTabs element from the GUI by name.
            </summary>
            <param name="key">The key for the horizontal tabs you want to get.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddVerticalScrollbar(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Common.Action{System.Single},Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a vertical scrollbar to the GUI.  
            </summary>
            <param name="onNewScrollbarValue">The action when the scrollbar changes.</param>
            <param name="bounds">The bounds of the scrollbar.</param>
            <param name="key">The name of the scrollbar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetScrollbar(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the scrollbar by name.
            </summary>
            <param name="key">The name of the scrollbar.</param>
            <returns>The scrollbar itself.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddSlider(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Common.ActionConsumable{System.Int32},Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a slider to the current GUI.
            </summary>
            <param name="onNewSliderValue">The event that fires when the slider's value is changed.</param>
            <param name="bounds">The bounds of the slider.</param>
            <param name="key">the internal name of the slider.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetSlider(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the slider by name from the GUI.
            </summary>
            <param name="key">the internal name of the slider.</param>
            <returns>the slider.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddSwitch(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Common.Action{System.Boolean},Vintagestory.API.Client.ElementBounds,System.String,System.Double,System.Double)">
            <summary>
            Adds a switch to the GUI.
            </summary>
            <param name="onToggle">The event that happens when the switch is toggled.</param>
            <param name="bounds">The bounds of the switch.</param>
            <param name="key">the name of the switch. (Default: null)</param>
            <param name="size">The size of the switch (Default: 30)</param>
            <param name="padding">The padding around the switch (Default: 5)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetSwitch(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the switch by name.
            </summary>
            <param name="key">The internal name of the switch.</param>
            <returns>Returns the named switch.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddButton(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Common.ActionConsumable,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.EnumButtonStyle,Vintagestory.API.Client.EnumTextOrientation,System.String)">
            <summary>
            Creates a button for the current GUI.
            </summary>
            <param name="text">The text on the button.</param>
            <param name="onClick">The event fired when the button is clicked.</param>
            <param name="bounds">The bounds of the button.</param>
            <param name="buttonFont">The font of the button.</param>
            <param name="style">The style of the button. (Default: Normal)</param>
            <param name="orientation">The orientation of the text. (Default: center)</param>
            <param name="key">The internal name of the button.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddButton(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Common.ActionConsumable,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.EnumButtonStyle,Vintagestory.API.Client.EnumTextOrientation,System.String)">
            <summary>
            Creates a button for the current GUI.
            </summary>
            <param name="text">The text on the button.</param>
            <param name="onClick">The event fired when the button is clicked.</param>
            <param name="bounds">The bounds of the button.</param>
            <param name="style">The style of the button. (Default: Normal)</param>
            <param name="orientation">The orientation of the text. (Default: center)</param>
            <param name="key">The internal name of the button.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddSmallButton(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Common.ActionConsumable,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.EnumButtonStyle,Vintagestory.API.Client.EnumTextOrientation,System.String)">
            <summary>
            Creates a small button for the current GUI.
            </summary>
            <param name="text">The text on the button.</param>
            <param name="onClick">The event fired when the button is clicked.</param>
            <param name="bounds">The bounds of the button.</param>
            <param name="style">The style of the button. (Default: Normal)</param>
            <param name="orientation">The orientation of the text. (Default: center)</param>
            <param name="key">The internal name of the button.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetButton(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the button by name.
            </summary>
            <param name="key">The name of the button.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddVerticalTabs(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.GuiTab[],Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.Int32,Vintagestory.API.Client.GuiTab},System.String)">
            <summary>
            Adds multiple tabs to a group of vertical tabs.
            </summary>
            <param name="tabs">The tabs being added.</param>
            <param name="bounds">The boundaries of the tab group.</param>
            <param name="OnTabClicked">The event fired when any of the tabs are clicked.</param>
            <param name="key">The name of this tab group.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetVerticalTab(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the vertical tab group as declared by name.
            </summary>
            <param name="key">The name of the vertical tab group to get.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddChatInput(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.String},System.String)">
            <summary>
            Adds a chat input to the GUI.
            </summary>
            <param name="bounds">The bounds of the text.</param>
            <param name="OnTextChanged">The event fired when the text is changed.</param>
            <param name="key">The name of this chat component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetChatInput(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the chat input by name.
            </summary>
            <param name="key">The name of the chat input component.</param>
            <returns>The named component.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddConfigList(Vintagestory.API.Client.GuiComposer,System.Collections.Generic.List{Vintagestory.API.Client.ConfigItem},Vintagestory.API.Client.ConfigItemClickDelegate,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a config List to the current GUI.
            </summary>
            <param name="items">The items to add.</param>
            <param name="OnItemClick">The event fired when the item is clicked.</param>
            <param name="font">The font of the Config List.</param>
            <param name="bounds">The bounds of the config list.</param>
            <param name="key">The name of the config list.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetConfigList(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the config list by name.
            </summary>
            <param name="key">The name of the config list.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddDialogTitleBar(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Common.Action,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Adds a dialog title bar to the GUI.  
            </summary>
            <param name="text">The text of the title bar.</param>
            <param name="OnClose">The event fired when the title bar is closed.</param>
            <param name="font">The font of the title bar.</param>
            <param name="bounds">The bounds of the title bar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddDialogTitleBarWithBg(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Common.Action,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Adds a dialog title bar to the GUI with a background.
            </summary>
            <param name="text">The text of the title bar.</param>
            <param name="OnClose">The event fired when the title bar is closed.</param>
            <param name="font">The font of the title bar.</param>
            <param name="bounds">The bounds of the title bar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddNumberInput(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.String},Vintagestory.API.Client.CairoFont,System.String)">
            <summary>
            Adds a numeric input for the current GUI.
            </summary>
            <param name="bounds">The bounds of the number input.</param>
            <param name="OnTextChanged">The event fired when the number is changed.</param>
            <param name="font">The font for the numbers.</param>
            <param name="key">The name for this GuiElementNumberInput</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetNumberInput(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the number input by name.
            </summary>
            <param name="key">The internal name of the numeric input.</param>
            <returns>The named numeric input.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddStatbar(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,System.Double[],System.String)">
            <summary>
            Adds a stat bar to the current GUI with a minimum of 0 and a maximum of 100.
            </summary>
            <param name="bounds">The bounds of the stat bar.</param>
            <param name="color">The color of the stat bar.</param>
            <param name="key">The internal name of the stat bar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddInvStatbar(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,System.Double[],System.String)">
            <summary>
            Adds a stat bar with filling in the opposite direction. Default values are from 0 to 100.
            </summary>
            <param name="bounds">the bounds of the stat bar.</param>
            <param name="color">the color of the stat bar.</param>
            <param name="key">The internal name of the stat bar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetStatbar(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the stat bar by name.
            </summary>
            <param name="key">The internal name of the stat bar to fetch.</param>
            <returns>The named stat bar.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddCellList(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.OnRequireCell,Vintagestory.API.Common.Action{System.Int32},Vintagestory.API.Common.Action{System.Int32},System.Collections.Generic.List{Vintagestory.API.Client.ListCellEntry},System.String)">
            <summary>
            Adds a List to the current GUI.
            </summary>
            <param name="bounds">The bounds of the cell.</param>
            <param name="creallCreator">the event fired when the cell is requested by the GUI</param>
            <param name="OnMouseDownOnCellLeft">The event fired when the player clicks on the lefthand side of the cell.</param>
            <param name="OnMouseDownOnCellRight">The event fired when the player clicks on the righthand side of the cell.</param>
            <param name="cells">The cells of the list.</param>
            <param name="key">The identifier for the list.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetCellList(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the list by name.
            </summary>
            <param name="key">The name of the list to get.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddTextArea(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.String},Vintagestory.API.Client.CairoFont,System.String)">
            <summary>
            Adds a text area to the GUI.  
            </summary>
            <param name="bounds">The bounds of the Text Area</param>
            <param name="OnTextChanged">The event fired when the text is changed.</param>
            <param name="font">The font of the text.</param>
            <param name="key">The name of the text area.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetTextArea(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the text area by name.
            </summary>
            <param name="key">The name of the text area.</param>
            <returns>The named Text Area.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddTextInput(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.String},Vintagestory.API.Client.CairoFont,System.String)">
            <summary>
            Adds a text input to the current GUI.
            </summary>
            <param name="bounds">The bounds of the text input.</param>
            <param name="OnTextChanged">The event fired when the text is changed.</param>
            <param name="font">The font of the text.</param>
            <param name="key">The name of this text component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetTextInput(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the text input by input name.
            </summary>
            <param name="key">The name of the text input to get.</param>
            <returns>The named text input</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddItemSlotGrid(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Common.IInventory,Vintagestory.API.Common.Action{System.Object},System.Int32,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds an item slot grid to the GUI.
            </summary>
            <param name="inventory">The inventory attached to the slot grid.</param>
            <param name="SendPacket">A handler that should send supplied network packet to the server, if the inventory modifications should be synced</param>
            <param name="columns">The number of columns in the slot grid.</param>
            <param name="bounds">the bounds of the slot grid.</param>
            <param name="key">The key for this particular slot grid.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddItemSlotGrid(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Common.IInventory,Vintagestory.API.Common.Action{System.Object},System.Int32,System.Int32[],Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds an item slot grid to the GUI.
            </summary>
            <param name="inventory">The inventory attached to the slot grid.</param>
            <param name="SendPacket">A handler that should send supplied network packet to the server, if the inventory modifications should be synced</param>
            <param name="columns">The number of columns in the slot grid.</param>
            <param name="selectiveSlots">The slots within the inventory that are currently accessible.</param>
            <param name="bounds">the bounds of the slot grid.</param>
            <param name="key">The key for this particular slot grid.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetSlotGrid(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the slot grid by name.
            </summary>
            <param name="key">The name of the slot grid to get.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddItemSlotGridExcl(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Common.IInventory,Vintagestory.API.Common.Action{System.Object},System.Int32,System.Int32[],Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds an ItemSlotGrid with Exclusions.
            </summary>
            <param name="inventory">The attached inventory.</param>
            <param name="SendPacket">A handler that should send supplied network packet to the server, if the inventory modifications should be synced</param>
            <param name="columns">The number of columns.</param>
            <param name="excludingSlots">The slots that have been excluded from the slot grid.</param>
            <param name="bounds">The bounds of the slot grid.</param>
            <param name="key">The name of the slot grid.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetSlotGridExcl(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the ItemSlotGridExcl by name.
            </summary>
            <param name="key">The name of the ItemSlotGridExcl</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddPassiveItemSlot(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.IInventory,Vintagestory.API.Common.ItemSlot,System.Boolean)">
            <summary>
            Adds a passive item slot to the GUI.
            </summary>
            <param name="bounds">The bounds of the Slot</param>
            <param name="inventory">The inventory attached to the slot.</param>
            <param name="slot">The internal slot of the slot.</param>
            <param name="drawBackground">Do we draw the background for this slot? (Default: true)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddSkillItemGrid(Vintagestory.API.Client.GuiComposer,System.Collections.Generic.List{Vintagestory.API.Client.SkillItem},System.Int32,System.Int32,System.Action{System.Int32},Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a skill item grid to the GUI.
            </summary>
            <param name="skillItems">The items that represent skills.</param>
            <param name="columns">the columns in the skill item grid.</param>
            <param name="rows">The rows in the skill item grid.</param>
            <param name="OnSlotClick">The effect when a slot is clicked.</param>
            <param name="bounds">The bounds of the item grid.</param>
            <param name="key">The name of the item grid to add.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetSkillItemGrid(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Fetches the skill item grid by name
            </summary>
            <param name="key">The name of the skill item grid to get.</param>
            <returns>The skill item grid to get.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddEmbossedText(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds an embossed text component to the GUI.
            </summary>
            <param name="text">The text of the component.</param>
            <param name="font">The font of the text.</param>
            <param name="bounds">The bounds of the component.</param>
            <param name="key">The name of the component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetEmbossedText(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the EmbossedText component by name.
            </summary>
            <param name="key">The name of the component.</param>
            <returns>the named component of the text.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddHoverText(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,System.Int32,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a hover text to the GUI.
            </summary>
            <param name="text">The text of the text.</param>
            <param name="font">The font of the text.</param>
            <param name="width">The width of the text.</param>
            <param name="bounds">The bounds of the text.</param>
            <param name="key">The name of this hover text component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddTranspHoverText(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,System.Int32,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a hover text to the GUI.
            </summary>
            <param name="text">The text of the text.</param>
            <param name="font">The font of the text.</param>
            <param name="width">The width of the text.</param>
            <param name="bounds">The bounds of the text.</param>
            <param name="key">The name of this hover text component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddHoverText(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,System.Int32,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.TextBackground,System.String)">
            <summary>
            Adds a hover text to the GUI.
            </summary>
            <param name="text">The text of the text.</param>
            <param name="font">The font of the text.</param>
            <param name="width">The width of the text.</param>
            <param name="bounds">The bounds of the text.</param>
            <param name="key">The name of this hover text component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetHoverText(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Fetches the hover text component by name.
            </summary>
            <param name="key">The name of the text component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddRichtext(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a rich text element to the GUI
            </summary>
            <param name="composer"></param>
            <param name="vtmlCode"></param>
            <param name="baseFont"></param>
            <param name="bounds"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddRichtext(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{Vintagestory.API.Client.LinkTextComponent},System.String)">
            <summary>
            Adds a rich text element to the GUI
            </summary>
            <param name="composer"></param>
            <param name="vtmlCode"></param>
            <param name="baseFont"></param>
            <param name="bounds"></param>
            <param name="didClickLink"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddRichtext(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.RichTextComponentBase[],Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a rich text element to the GUI
            </summary>
            <param name="composer"></param>
            <param name="components"></param>
            <param name="bounds"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetRichtext(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the chat input by name.
            </summary>
            <param name="composer"></param>
            <param name="key">The name of the chat input component.</param>
            <returns>The named component.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddStaticCustomDraw(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.DrawDelegateWithBounds)">
            <summary>
            Adds a static custom draw component to the GUI.
            </summary>
            <param name="bounds">The bounds of the component.</param>
            <param name="OnDraw">The event fired when the element is drawn.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddDynamicCustomDraw(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.DrawDelegateWithBounds,System.String)">
            <summary>
            Adds a dynamic custom draw component to the GUI.
            </summary>
            <param name="bounds">The bounds of the component.</param>
            <param name="OnDraw">The event fired when the element is drawn.</param>
            <param name="key">The name of the element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddShadedDialogBG(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,System.Boolean,System.Double)">
            <summary>
            Adds a single rectangle background to the GUI.
            </summary>
            <param name="bounds">The bounds of the GUI</param>
            <param name="withTitleBar">Minor style adjustments to accomodate titlebars</param>
            <param name="topPadding">The amount of padding at the top of the gui.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddStaticText(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a static text component to the GUI
            </summary>
            <param name="text">The text of the text component.</param>
            <param name="font">The font of the text.</param>
            <param name="bounds">The bounds of the text container.</param>
            <param name="key">The name of the component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddStaticText(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.EnumTextOrientation,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a static text component to the GUI
            </summary>
            <param name="text">The text of the text component.</param>
            <param name="font">The font of the text.</param>
            <param name="orientation">The orientation of the text.</param>
            <param name="bounds">The bounds of the text container.</param>
            <param name="key">The name of the component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.AddStaticTextAutoBoxSize(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.EnumTextOrientation,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds a static text component to the GUI that automatically resizes as necessary.
            </summary>
            <param name="text">The text of the text component.</param>
            <param name="font">The font of the text.</param>
            <param name="orientation">The orientation of the text.</param>
            <param name="bounds">The bounds of the text container.</param>
            <param name="key">The name of the component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposerHelpers.GetStaticText(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the static text component by name.
            </summary>
            <param name="key">The name of the component.</param>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementContainer.Elements">
            <summary>
            The cells in the list.  See IGuiElementCell for how it's supposed to function.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementContainer.unscaledCellSpacing">
            <summary>
            the space between the cells.  Default: 10
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementContainer.UnscaledCellVerPadding">
            <summary>
            The padding on the vertical axis of the cell.  Default: 2
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementContainer.UnscaledCellHorPadding">
            <summary>
            The padding on the horizontal axis of the cell.  Default: 7
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementContainer.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new list in the current GUI.
            </summary>
            <param name="capi">The Client API.</param>
            <param name="bounds">The bounds of the list.</param>
            <param name="OnMouseDownOnCellLeft">The function fired when the cell is clicked on the left side.</param>
            <param name="OnMouseDownOnCellRight">The function fired when the cell is clicked on the right side.</param>
            <param name="cellCreator">The event fired when a cell is requested by the gui</param>
            <param name="cells">The array of cells initialized with the list.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementContainer.CalcTotalHeight">
            <summary>
            Calculates the total height for the list.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementContainer.Add(Vintagestory.API.Client.GuiElement,System.Int32)">
            <summary>
            Adds a cell to the list.
            </summary>
            <param name="elem">The cell to add.</param>
            <param name="afterPosition">The position of the cell to add after.  (Default: -1)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementContainer.RemoveCell(System.Int32)">
            <summary>
            Removes a cell at a specified position.
            </summary>
            <param name="position">The position of the cell to remove.</param>
        </member>
        <member name="T:Vintagestory.API.Client.IconComponent">
            <summary>
            Draws an icon 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCustomRender.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.RenderDelegateWithBounds)">
            <summary>
            Adds a custom drawing element to the GUI
            </summary>
            <param name="capi">The Client API</param>
            <param name="bounds">The bounds of the Element</param>
            <param name="onRender">The event fired when the object is drawn.</param>
        </member>
        <member name="T:Vintagestory.API.Client.MeshDataPool">
            <summary>
            This is a modeldata pool, which can hold 400k vertices, 300k indices but not more than 900 chunks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.MaxPartsPerPool">
            <summary>
            The maximum parts for this pool.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.VerticesPoolSize">
            <summary>
            The current vertices for this pool.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.IndicesPoolSize">
            <summary>
            the amount of indicies for this pool.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.indicesStartsByte">
            <summary>
            The starting byte for each index.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.indicesSizes">
            <summary>
            The size of each index.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.indicesGroupsCount">
            <summary>
            How many index groups are there.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.indicesPosition">
            <summary>
            the position of the indices.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.verticesPosition">
            <summary>
            the position of the vertices.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.CurrentFragmentation">
            <summary>
            The current fragmentaton.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.UsedVertices">
            <summary>
            How many of the vertices are used.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.RenderedTriangles">
            <summary>
            How many triangles are rendered.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshDataPool.AllocatedTris">
            <summary>
            How many triangles are allocated.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPool.AllocateNewPool(Vintagestory.API.Client.ICoreClientAPI,System.Int32,System.Int32,System.Int32,Vintagestory.API.Client.CustomMeshDataPartFloat,Vintagestory.API.Client.CustomMeshDataPartShort,Vintagestory.API.Client.CustomMeshDataPartByte,Vintagestory.API.Client.CustomMeshDataPartInt)">
            <summary>
            Allocates a new pool for mesh data.
            </summary>
            <param name="capi">The core client API</param>
            <param name="verticesPoolSize">The vertices pool size.</param>
            <param name="indicesPoolSize">The index pool size.</param>
            <param name="maxPartsPerPool">The maximum parts per pool.</param>
            <param name="customFloats">The custom floats of the pool.</param>
            <param name="customBytes">The custom bytes of the pool.</param>
            <param name="customInts">The custom ints of the pool.</param>
            <returns>The resulting mesh data pool.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPool.TryAdd(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MeshData,Vintagestory.API.MathTools.Vec3i,Vintagestory.API.MathTools.Sphere)">
            <summary>
            Attempts to add the new model.
            </summary>
            <param name="capi">The core client API</param>
            <param name="modeldata">The model to add</param>
            <param name="modelOrigin">The origin point of the model.</param>
            <param name="frustumCullSphere">The culling sphere.</param>
            <returns>The location of the model (and the data) in the pool.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPool.RemoveLocation(Vintagestory.API.Client.ModelDataPoolLocation)">
            <summary>
            Attempts to remove the model from the pool if the model exists.  Will throw an invalid call or an InvalidOperationException if used improperly.
            </summary>
            <param name="location">The location of the model data.</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPool.Draw(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.FrustumCulling,Vintagestory.API.Client.EnumFrustumCullMode)">
            <summary>
            Draw the model.
            </summary>
            <param name="capi">The core client API</param>
            <param name="frustumCuller">The area where models can be viewed from the camera.</param>
            <param name="frustumCullMode">The mode of the culling.</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPool.FrustumCull(Vintagestory.API.Client.FrustumCulling,Vintagestory.API.Client.EnumFrustumCullMode)">
            <summary>
            Cleans up the rendering view of the models.
            </summary>
            <param name="frustumCuller">The area where models can be viewed from the camera.</param>
            <param name="frustumCullMode">The mode of the culling.</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPool.IsEmpty">
            <summary>
            Is this an empty pool.
            </summary>
            <returns>true if the pool is empty.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPool.Dispose(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Disposes of the current mesh pool.
            </summary>
            <param name="capi">The core client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPool.CalcFragmentation">
            <summary>
            Calculates the current fragmentation of the mesh.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPool.GetFragmentation">
            <summary>
            Gets the current fragmentation of the pool.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.ModelDataPoolLocation">
            <summary>
            Contains all the data for the given model pool.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ModelDataPoolLocation.poolId">
            <summary>
            The ID of the pool model.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ModelDataPoolLocation.indicesStart">
            <summary>
            Where the indices of the model start.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ModelDataPoolLocation.indicesEnd">
            <summary>
            Where the indices of the model end.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ModelDataPoolLocation.verticesStart">
            <summary>
            Where the vertices start.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ModelDataPoolLocation.verticesEnd">
            <summary>
            Where the vertices end.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ModelDataPoolLocation.frustumCullSphere">
            <summary>
            The culling sphere.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ModelDataPoolLocation.FrustumVisible">
            <summary>
            Whether this model is visible or not.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ModelDataPoolLocation.TransitionCounter">
            <summary>
            Used for models with movements (like a door).
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.MeshDataPoolManager">
            <summary>
            Holds a collection of pools, usually for 1 render pass 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolManager.#ctor(Vintagestory.API.Client.MeshDataPoolMasterManager,Vintagestory.API.Client.FrustumCulling,Vintagestory.API.Client.ICoreClientAPI,System.Int32,System.Int32,System.Int32,Vintagestory.API.Client.CustomMeshDataPartFloat,Vintagestory.API.Client.CustomMeshDataPartShort,Vintagestory.API.Client.CustomMeshDataPartByte,Vintagestory.API.Client.CustomMeshDataPartInt)">
            <summary>
            Creates a new Mesh Data Pool
            </summary>
            <param name="masterPool">The master mesh data pool manager</param>
            <param name="frustumCuller">the Frustum Culler for the Pool</param>
            <param name="capi">The Client API</param>
            <param name="defaultVertexPoolSize">Size allocated for the Vertices.</param>
            <param name="defaultIndexPoolSize">Size allocated for the Indices</param>
            <param name="maxPartsPerPool">The maximum number of parts for this pool.</param>
            <param name="customFloats">Additional float data</param>
            <param name="customBytes">Additional byte data</param>
            <param name="customInts">additional int data</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolManager.AddModel(Vintagestory.API.Client.MeshData,Vintagestory.API.MathTools.Vec3i,Vintagestory.API.MathTools.Sphere)">
            <summary>
            Adds a model to the mesh pool.
            </summary>
            <param name="modeldata">The model data</param>
            <param name="modelOrigin">The origin point of the Model</param>
            <param name="frustumCullSphere">The culling sphere.</param>
            <returns>The location identifier for the pooled model.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolManager.Render(Vintagestory.API.MathTools.Vec3d,System.String,Vintagestory.API.Client.EnumFrustumCullMode)">
            <summary>
            Renders the model.
            </summary>
            <param name="playerpos">The position of the Player</param>
            <param name="originUniformName"></param>
            <param name="frustumCullMode">The culling mode.  Default is CulHideDelay.</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolManager.GetStats(System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Gets the stats of the model.
            </summary>
            <param name="usedVideoMemory">The amount of memory used by this pool.</param>
            <param name="renderedTris">The number of Tris rendered by this pool.</param>
            <param name="allocatedTris">The number of tris allocated by this pool.</param>
        </member>
        <member name="T:Vintagestory.API.Client.MeshDataPoolMasterManager">
            <summary>
            Holds all chunk mesh pools of the current running game
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolMasterManager.#ctor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Initializes the master mesh data pool.
            </summary>
            <param name="capi">The Client API.</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolMasterManager.RemoveModelData(Vintagestory.API.Client.ModelDataPoolLocation[])">
            <summary>
            Removes the models with the given locations.
            </summary>
            <param name="locations">The locations of the model data.</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolMasterManager.AddModelDataPool(Vintagestory.API.Client.MeshDataPool)">
            <summary>
            Adds a new pool to the master pool.
            </summary>
            <param name="pool">The mesh data pool to add.</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolMasterManager.DisposeAllPools(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Cleans up and gets rid of all the pools.
            </summary>
            <param name="capi">The client API.</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolMasterManager.CalcFragmentation">
            <summary>
            Calculates the fragmentation.
            </summary>
            <returns>The resulting calculation.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshDataPoolMasterManager.QuantityModelDataPools">
            <summary>
            The number of model pools in this master manager.
            </summary>
            <returns>The number of model pools</returns>
        </member>
        <member name="M:Vintagestory.API.Client.FrustumCulling.CalcFrustumEquations(Vintagestory.API.MathTools.BlockPos,System.Double[])">
            <summary>
            Calculating the frustum planes.
            </summary>
            <remarks>
            From the current OpenGL modelview and projection matrices,
            calculate the frustum plane equations (Ax+By+Cz+D=0, n=(A,B,C))
            The equations can then be used to see on which side points are.
            </remarks>
        </member>
        <member name="F:Vintagestory.API.Client.DefaultShaderUniforms.ZNear">
            <summary>
            The currently configured z-near plane
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.DefaultShaderUniforms.ZFar">
            <summary>
            The currently configured z-far plane
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.CairoFont">
            <summary>
            Represent a font with sizing and styling for use in rendering text
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CairoFont.FontMeasuringContext">
            <summary>
            The static Context for all Cairo Fonts.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CairoFont.RenderTwice">
            <summary>
            Whether or not the font is rendered twice.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.#ctor">
            <summary>
            Creates an empty CairoFont instance.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.#ctor(Vintagestory.API.Client.FontConfig)">
            <summary>
            Creates a pre-populated CairoFont instance.
            </summary>
            <param name="config">The configuration for the CairoFont</param>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.#ctor(System.Double,System.String)">
            <summary>
            Creates a CairoFont object.
            </summary>
            <param name="unscaledFontSize">The size of the font before scaling is applied.</param>
            <param name="fontName">The name of the font.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.#ctor(System.Double,System.String,System.Double[],System.Double[])">
            <summary>
            Creates a CairoFont object
            </summary>
            <param name="unscaledFontSize">The size of the font before scaling is applied.</param>
            <param name="fontName">The name of the font.</param>
            <param name="color">The color of the font.</param>
            <param name="strokeColor">The color for the stroke of the font. (Default: Null)</param>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.AutoFontSize(System.String,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Adjust font size so that it fits given bounds
            </summary>
            <param name="text">The text of the object.</param>
            <param name="bounds">The bounds of the element where the font is displayed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.AutoBoxSize(System.String,Vintagestory.API.Client.ElementBounds,System.Boolean)">
            <summary>
            Adjust the bounds so that it fits given text in one line
            </summary>
            <param name="text">The text to adjust</param>
            <param name="bounds">The bounds to adjust the text to.</param>
            <param name="onlyGrow">If true, the box will not be made smaller</param>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.WithColor(System.Double[])">
            <summary>
            Sets the color of the CairoFont.
            </summary>
            <param name="color">The color to set.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.WithWeight(Cairo.FontWeight)">
            <summary>
            Adds a weight to the font.
            </summary>
            <param name="weight">The weight of the font.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.WithRenderTwice">
            <summary>
            Sets the font to render twice.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.SetupContext(Cairo.Context)">
            <summary>
            Sets up the context. Must be executed in the main thread, as it is not thread safe.
            </summary>
            <param name="ctx">The context to set up the CairoFont with.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.GetFontExtents">
            <summary>
            Gets the font's extents.
            </summary>
            <returns>The FontExtents for this particular font.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.GetTextExtents(System.String)">
            <summary>
            Gets the extents of the text.
            </summary>
            <param name="text">The text to extend.</param>
            <returns>The Text extends for this font with this text.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.Clone">
            <summary>
            Clone function.  Creates a duplicate of this Cairofont.
            </summary>
            <returns>The duplicate font.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.WithFontSize(System.Single)">
            <summary>
            Sets the base size of the CairoFont.
            </summary>
            <param name="fontSize">The new font size</param>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.ButtonText">
            <summary>
            Creates a Button Text preset.
            </summary>
            <returns>The button text preset.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.ButtonPressedText">
            <summary>
            Creates a text preset for when the button is pressed.
            </summary>
            <returns>The text preset for a pressed button.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.TextInput">
            <summary>
            Creates a text preset for text input fields.
            </summary>
            <returns>The text field input preset.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.SmallTextInput">
            <summary>
            Creates a text oreset for smaller text input fields.
            </summary>
            <returns>The smaller text input preset.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.WhiteMediumText">
            <summary>
            Creates a white text for medium dialog.
            </summary>
            <returns>The white text for medium dialog.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.WhiteSmallishText">
            <summary>
            Creates a white text for smallish dialogs.
            </summary>
            <returns>The white text for small dialogs.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.WhiteSmallText">
            <summary>
            Creates a white text for small dialogs.
            </summary>
            <returns>The white text for small dialogs</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CairoFont.WhiteDetailText">
            <summary>
            Creates a white text for details.
            </summary>
            <returns>A white text for details.</returns>
        </member>
        <member name="T:Vintagestory.API.Client.ElementBounds">
            <summary>
            Box sizing model comparable to the box sizing model of cascading style sheets using "position:relative;"
            Each element has a position, size, padding and margin
            Padding is counted towards the size of the box, whereas margin is not
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ElementBounds.Code">
            <summary>
            For debugging purposes only
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ElementBounds.relX">
            <summary>
            Position relative to it's parent element plus margin
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ElementBounds.absX">
            <summary>
            Absolute position of the element plus margin. Same as renderX but without padding
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ElementBounds.OuterWidth">
            <summary>
            Width including padding
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ElementBounds.OuterHeight">
            <summary>
            Height including padding
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ElementBounds.drawX">
            <summary>
            Position where the element has to be drawn. This is a position relative to it's parent element plus margin plus padding. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ElementBounds.bgDrawX">
            <summary>
            Position where the background has to be drawn, this encompasses the elements padding
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.PositionInside(System.Int32,System.Int32)">
            <summary>
            Returns the relative coordinate if supplied coordinate is inside the bounds, otherwise null
            </summary>
            <param name="absPointX"></param>
            <param name="absPointY"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.PointInside(System.Int32,System.Int32)">
            <summary>
            Returns true if supplied coordinate is inside the bounds
            </summary>
            <param name="absPointX"></param>
            <param name="absPointY"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.PointInside(System.Double,System.Double)">
            <summary>
            Returns true if supplied coordinate is inside the bounds
            </summary>
            <param name="absPointX"></param>
            <param name="absPointY"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.PartiallyInside(Vintagestory.API.Client.ElementBounds)">
            <summary>
            Checks if the bounds is at least partially inside it's parent bounds by checking if any of the 4 corner points is inside
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.CopyOnlySize">
            <summary>
            Makes a copy of the current bounds but leaves the position and 0. Sets the parent to the calling bounds
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.CopyOffsetedSibling(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Makes a copy of the current bounds but leaves the position and padding at 0. Sets the same parent as the current one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.BelowCopy(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Makes a copy of the current bounds but leaves the position and padding at 0. Sets the same parent as the current one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.RightCopy(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a flat copy of the element with a fixed position offset that causes it to be right of the original element
            </summary>
            <param name="fixedDeltaX"></param>
            <param name="fixedDeltaY"></param>
            <param name="fixedDeltaWidth"></param>
            <param name="fixedDeltaHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.FlatCopy">
            <summary>
            Creates a clone of the bounds but without child elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.ForkBoundingParent(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new elements bounds which acts as the parent bounds of the current bounds. It will also arrange the fixedX/Y and Width/Height coords of both bounds so that the parent bounds surrounds the child bounds with given spacings. Uses fixed coords only!
            </summary>
            <param name="leftSpacing"></param>
            <param name="topSpacing"></param>
            <param name="rightSpacing"></param>
            <param name="bottomSpacing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.ForkContainingChild(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new elements bounds which acts as the child bounds of the current bounds. It will also arrange the fixedX/Y and Width/Height coords of both bounds so that the parent bounds surrounds the child bounds with given spacings. Uses fixed coords only!
            </summary>
            <param name="leftSpacing"></param>
            <param name="topSpacing"></param>
            <param name="rightSpacing"></param>
            <param name="bottomSpacing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.WithFixedMargin(System.Double)">
            <summary>
            Sets a new fixed margin (pad = top/right/down/left margin)
            </summary>
            <param name="pad"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.WithFixedMargin(System.Double,System.Double)">
            <summary>
            Sets a new fixed margin (pad = top/right/down/left margin)
            </summary>
            <param name="pad"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.WithFixedPadding(System.Double)">
            <summary>
            Sets a new fixed padding (pad = top/right/down/left padding)
            </summary>
            <param name="pad"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.WithFixedPadding(System.Double,System.Double)">
            <summary>
            Sets a new fixed padding (x = left/right, y = top/down padding)
            </summary>
            <param name="leftRight"></param>
            <param name="upDown"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.WithFixedAlignmentOffset(System.Double,System.Double)">
            <summary>
            Sets a new fixed offset that is applied after element alignment. So you could i.e. horizontally center an element and then offset in x direction  from there using this method.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.WithFixedPosition(System.Double,System.Double)">
            <summary>
            Sets a new fixed offset that is used during element alignment.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.WithFixedOffset(System.Double,System.Double)">
            <summary>
            Sets a new fixed offset that is used during element alignment.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.FixedShrink(System.Double)">
            <summary>
            Shrinks the current width/height by a fixed value
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.FixedGrow(System.Double)">
            <summary>
            Grows the current width/height by a fixed value
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.FixedGrow(System.Double,System.Double)">
            <summary>
            Grows the current width/height by a fixed value
            </summary>
            <param name="amount"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.WithParent(Vintagestory.API.Client.ElementBounds)">
            <summary>
            Sets the parent of the bounds
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.WithEmptyParent">
            <summary>
            Creates a new bounds using FitToChildren and sets that as bound parent. This is usefull if you want to draw elements that are not part of the dialog
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.ElementBounds.Fill">
            <summary>
            Quick Method to create a new ElementBounds instance that fills 100% of its parent bounds. Useful for backgrounds.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.FixedSize(System.Double,System.Double)">
            <summary>
            Quick method to create a new ElementBounds instance that uses fixed element sizing. The X/Y Coordinates are left at 0. 
            </summary>
            <param name="fixedWidth"></param>
            <param name="fixedHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.FixedSize(Vintagestory.API.Client.EnumDialogArea,System.Double,System.Double)">
            <summary>
            Quick method to create a new ElementBounds instance that uses fixed element sizing. The X/Y Coordinates are left at 0. 
            </summary>
            <param name="alignment"></param>
            <param name="fixedWidth"></param>
            <param name="fixedHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.Fixed(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Quick method to create new ElementsBounds instance that uses fixed element sizing.
            </summary>
            <param name="fixedX"></param>
            <param name="fixedY"></param>
            <param name="fixedWidth"></param>
            <param name="fixedHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.FixedOffseted(Vintagestory.API.Client.EnumDialogArea,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Quick method to create new ElementsBounds instance that uses fixed element sizing.
            </summary>
            <param name="alignment"></param>
            <param name="fixedX"></param>
            <param name="fixedY"></param>
            <param name="fixedWidth"></param>
            <param name="fixedHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.Fixed(Vintagestory.API.Client.EnumDialogArea,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Quick method to create new ElementsBounds instance that uses fixed element sizing.
            </summary>
            <param name="alignment"></param>
            <param name="fixedX"></param>
            <param name="fixedY"></param>
            <param name="fixedWidth"></param>
            <param name="fixedHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.Percentual(Vintagestory.API.Client.EnumDialogArea,System.Double,System.Double)">
            <summary>
            Quick method to create new ElementsBounds instance that uses percentual element sizing, e.g. setting percentWidth to 0.5 will set the width of the bounds to 50% of its parent width
            </summary>
            <param name="alignment"></param>
            <param name="percentWidth"></param>
            <param name="percentHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementBounds.Percentual(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Quick method to create new ElementsBounds instance that uses percentual element sizing, e.g. setting percentWidth to 0.5 will set the width of the bounds to 50% of its parent width
            </summary>
            <param name="percentX"></param>
            <param name="percentY"></param>
            <param name="percentWidth"></param>
            <param name="percentHeight"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.ElementStdBounds">
            <summary>
            Just some default sizings for various ui elements
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ElementStdBounds.Statbar(Vintagestory.API.Client.EnumDialogArea,System.Double)">
            <summary>
            Quick method to create a new ElementBounds instance that uses fixed element sizing. The X/Y Coordinates are left at 0. 
            </summary>
            <param name="alignment"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.ElementStdBounds.AutosizedMainDialog">
            <summary>
            Quick Method to create a new ElementBounds instance that is positioned at the screen center and sized accordingly to fit all it's child elements
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ElementStdBounds.MainScreenRightPart">
            <summary>
            Quick Method to create a new ElementBounds instance that draws a background for a dialog
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ElementStdBounds.AutosizedMainDialogAtPos(System.Double)">
            <summary>
            Quick Method to create a new ElementBounds instance that draws a background for a dialog
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ElementStdBounds.DialogBackground">
            <summary>
            Quick Method to create a new ElementBounds instance that draws a background for a dialog
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ElementStdBounds.DialogBackground(System.Double,System.Double)">
            <summary>
            Quick Method to create a new ElementBounds instance that draws a background for a dialog
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ElementStdBounds.MenuButton(System.Single,Vintagestory.API.Client.EnumDialogArea)">
            <summary>
            Quick Method to create a new ElementBounds instance to create a menu consiting of one ore more vertically arranged and horizontally centered buttons in a grid. The y position is calculated using rowIndex * 80. 
            </summary>
            <param name="rowIndex"></param>
            <param name="alignment"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementStdBounds.Rowed(System.Single,System.Double,Vintagestory.API.Client.EnumDialogArea)">
            <summary>
            Quick Method to create a new ElementBounds instance to create a menu consiting of one ore more vertically arranged and horizontally centered buttons in a grid. The y position is calculated using rowIndex * 80. 
            </summary>
            <param name="rowIndex"></param>
            <param name="padding"></param>
            <param name="alignment"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementStdBounds.Sign(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Quick Method to create a new ElementBounds instance that is currently used for Signs (e.g. graphics options)
            </summary>
            <param name="fixedX"></param>
            <param name="fixedY"></param>
            <param name="fixedWith"></param>
            <param name="fixedHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ElementStdBounds.VerticalScrollbar(Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a scrollbar right of given element bounds, requires the left element to be using fixed element positioning
            </summary>
            <param name="leftElement"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.GuiStyle">
            <summary>
            A class containing common values for elements before scaling is applied.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.ElementToDialogPadding">
            <summary>
            The padding between the element and the dialogue. 20f.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.HalfPadding">
            <summary>
            The padding between other things.  5f.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DialogToScreenPadding">
            <summary>
            The padding between the dialogue and the screen. 10f.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.TitleBarHeight">
            <summary>
            The height of the title bar. 30.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DialogBGRadius">
            <summary>
            The radius of the dialogue background. 1.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.ElementBGRadius">
            <summary>
            The radius of the element background. 1.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.LargeFontSize">
            <summary>
            The size of the large font. 40.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.NormalFontSize">
            <summary>
            The size of the normal fonts.  Used for text boxes. 30.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.SubNormalFontSize">
            <summary>
            The fonts that are slightly smaller than normal fonts. 24.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.SmallishFontSize">
            <summary>
            The smaller fonts. 20.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.SmallFontSize">
            <summary>
            The smallest font size used in the game that isn't used with itemstacks. 16.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DetailFontSize">
            <summary>
            The font size used for specific details like Item Stack size info. 14.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DecorativeFontName">
            <summary>
            The decorative font type. "Lora".
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.StandardFontName">
            <summary>
            The standard font "Montserrat".
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.LeftDialogMargin">
            <summary>
            Set by the client, loaded from the clientsettings.json. Used by ElementBounds to add a margin for left/right aligned dialogs
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.RightDialogMargin">
            <summary>
            Set by the client, loaded from the clientsettings.json. Used by ElementBounds to add a margin for left/right aligned dialogs
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DialogLightBgColor">
            <summary>
            The light background color for dialogs.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DialogDefaultBgColor">
            <summary>
            The default background color for dialogs.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DialogStrongBgColor">
            <summary>
            The strong background color for dialogs.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DialogBorderColor">
            <summary>
            The default dialog border color
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DialogHighlightColor">
            <summary>
            The Highlight color for dialogs.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DialogAlternateBgColor">
            <summary>
            The alternate background color for dialogs.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DialogDefaultTextColor">
            <summary>
            The default text color for any given dialog.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DarkBrownColor">
            <summary>
            A color for a darker brown.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.HotbarNumberTextColor">
            <summary>
            The color of the 1..9 numbers on the hotbar slots
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.ErrorTextColor">
            <summary>
            The color of the error text.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.LinkTextColor">
            <summary>
            The color of the the link text.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.ButtonTextColor">
            <summary>
            A light brown text color.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.ActiveButtonTextColor">
            <summary>
            A hover color for the light brown text.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DisabledTextColor">
            <summary>
            The text color for a disabled object.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.ActiveSlotColor">
            <summary>
            The color of the actively selected slot overlay
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.HealthBarColor">
            <summary>
            The color of the health bar.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.FoodBarColor">
            <summary>
            The color of the food bar.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.XPBarColor">
            <summary>
            The color of the XP bar.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.TitleBarColor">
            <summary>
            The color of the title bar.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.MacroIconColor">
            <summary>
            The color of the macro icon.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiStyle.DamageColorGradient">
            <summary>
            A 100 step gradient from green to red, to be used to show durability, damage or any state other of decay
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ElementSizing.Fixed">
            <summary>
            Only multiplied with scale factor
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ElementSizing.Percentual">
            <summary>
            Value between 0 and 100% of parent element 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ElementSizing.FitToChildren">
            <summary>
            Size determined by child elements 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ElementSizing.PercentualSubstractFixed">
            <summary>
            Value between 0 and 100% of parent element. Will substract fixedWidth and fixedHeight from the final size
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElement.Bounds">
            <summary>
            The bounds of the element.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElement.TabIndex">
            <summary>
            The tab index of the element.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElement.hasFocus">
            <summary>
            Whether or not the element has focus.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElement.InsideClipBounds">
            <summary>
            If the element is inside a clip or not.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElement.api">
            <summary>
            The Client API.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElement.HasFocus">
            <summary>
            Whether or not the element has focus or not.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElement.DrawOrder">
            <summary>
            0 = draw first, 1 = draw last. Only for interactive elements.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElement.Focusable">
            <summary>
            Whether or not the element can be focused.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElement.Scale">
            <summary>
            The scale of the element.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnFocusGained">
            <summary>
            The event fired when the element gains focus.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnFocusLost">
            <summary>
            The event fired when the element looses focus.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Adds a new GUIElement to the GUI.
            </summary>
            <param name="capi">The Client API</param>
            <param name="bounds">The bounds of the element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.ComposeElements(Cairo.Context,Cairo.ImageSurface)">
            <summary>
            Composes the elements.
            </summary>
            <param name="ctxStatic">The context of the components.</param>
            <param name="surface">The surface of the GUI.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.RenderInteractiveElements(System.Single)">
            <summary>
            Renders the element as an interactive element.
            </summary>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.PostRenderInteractiveElements(System.Single)">
            <summary>
            The post render of the interactive element.
            </summary>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.RenderFocusOverlay(System.Single)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.generateTexture(Cairo.ImageSurface,System.Int32@,System.Boolean)">
            <summary>
            Generates a texture with an ID.
            </summary>
            <param name="surface">The image surface supplied.</param>
            <param name="textureId">The previous texture id.</param>
            <param name="linearMag">Whether or not the texture will have linear magnification.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.generateTexture(Cairo.ImageSurface,Vintagestory.API.Client.LoadedTexture@,System.Boolean)">
            <summary>
            Generates a new texture.
            </summary>
            <param name="surface">The surface provided.</param>
            <param name="intoTexture">The texture to be loaded into.</param>
            <param name="linearMag">Whether or not the texture will have linear magnification.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.scaled(System.Double)">
            <summary>
            Changes the scale of the GUIElement by the GUIScale factor.
            </summary>
            <param name="value">The base scale value.</param>
            <returns>The modified scale value based on the GUIScale.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.genContext(Cairo.ImageSurface)">
            <summary>
            Generates context based off the image surface.
            </summary>
            <param name="surface">The surface where the context is based.</param>
            <returns>The context based off the provided surface.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.getPattern(System.Drawing.Bitmap)">
            <summary>
            Gets a surface pattern based off the bitmap.
            </summary>
            <param name="bitmap">The provided bitmap.</param>
            <returns>The resulting surface pattern.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.getImageSurfaceFromAsset(System.Drawing.Bitmap)">
            <summary>
            Gets an image surface based off the bitmap.
            </summary>
            <param name="bitmap">The provided bitmap.</param>
            <returns>The image surface built from the bitmap.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.getImageSurfaceFromAsset(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Gets an image surface based off the bitmap.
            </summary>
            <param name="bitmap">The provided bitmap.</param>
            <param name="width">The width requested.</param>
            <param name="height">The height requested.</param>
            <returns>The image surface built from the bitmap and data.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.getPattern(Vintagestory.API.Client.ICoreClientAPI,System.String,System.Boolean)">
            <summary>
            Gets a surface pattern from a named file.
            </summary>
            <param name="capi">The Client API</param>
            <param name="texFileName">The name of the file.</param>
            <param name="doCache">Do we cache the file?</param>
            <returns>The resulting surface pattern.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.getImageSurfaceFromAsset(Vintagestory.API.Client.ICoreClientAPI,System.String)">
            <summary>
            Fetches an image surface from a named file.
            </summary>
            <param name="capi">The Client API</param>
            <param name="texFileName">The name of the text file.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.fillWithPattern(Vintagestory.API.Client.ICoreClientAPI,Cairo.Context,System.String,System.Boolean,System.Boolean)">
            <summary>
            Fills an area with a pattern.
            </summary>
            <param name="capi">The Client API</param>
            <param name="ctx">The context of the fill.</param>
            <param name="texFileName">The name of the texture file.</param>
            <param name="preserve">Whether or not to preserve the aspect ratio of the texture.</param>
            <returns>The surface pattern filled with the given texture.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.DiscardPattern(System.String)">
            <summary>
            Discards a pattern based off the the filename.
            </summary>
            <param name="texFilename">The pattern to discard.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.Rectangle(Cairo.Context,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Makes a rectangle with the provided context and bounds.
            </summary>
            <param name="ctx">The context for the rectangle.</param>
            <param name="bounds">The bounds of the rectangle.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.Rectangle(Cairo.Context,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Makes a rectangle with specified parameters.
            </summary>
            <param name="ctx">Context of the rectangle</param>
            <param name="x">The X position of the rectangle</param>
            <param name="y">The Y position of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.DialogRoundRectangle(Cairo.Context,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a rounded rectangle.
            </summary>
            <param name="ctx">The GUI context</param>
            <param name="bounds">The bounds of the rectangle.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.ElementRoundRectangle(Cairo.Context,Vintagestory.API.Client.ElementBounds,System.Boolean,System.Double)">
            <summary>
            Creates a rounded rectangle element.
            </summary>
            <param name="ctx">The context for the rectangle.</param>
            <param name="bounds">The bounds of the rectangle.</param>
            <param name="isBackground">Is the rectangle part of a background GUI object (Default: false)</param>
            <param name="radius">The radius of the corner of the rectangle (default: -1)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.RoundRectangle(Cairo.Context,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a rounded rectangle
            </summary>
            <param name="ctx">The context for the rectangle.</param>
            <param name="x">The X position of the rectangle</param>
            <param name="y">The Y position of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle.</param>
            <param name="radius">The radius of the corner of the rectangle.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.ShadePath(Cairo.Context,System.Double)">
            <summary>
            Shades a path with the given context.
            </summary>
            <param name="ctx">The context of the shading.</param>
            <param name="thickness">The thickness of the line to shade.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.EmbossRoundRectangleDialog(Cairo.Context,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Adds an embossed rounded rectangle to the dialog.
            </summary>
            <param name="ctx">The context of the rectangle.</param>
            <param name="x">The X position of the rectangle</param>
            <param name="y">The Y position of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle.</param>
            <param name="inverse">Whether or not it goes in or out.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.EmbossRoundRectangleElement(Cairo.Context,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Adds an embossed rounded rectangle to the dialog.
            </summary>
            <param name="ctx">The context of the rectangle.</param>
            <param name="x">The X position of the rectangle</param>
            <param name="y">The Y position of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle.</param>
            <param name="inverse">Whether or not it goes in or out.</param>
            <param name="depth">The depth of the emboss.</param>
            <param name="radius">The radius of the corner of the rectangle.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.EmbossRoundRectangleElement(Cairo.Context,Vintagestory.API.Client.ElementBounds,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Adds an embossed rounded rectangle to the dialog.
            </summary>
            <param name="ctx">The context of the rectangle.</param>
            <param name="bounds">The position and size of the rectangle.</param>
            <param name="inverse">Whether or not it goes in or out. (Default: false)</param>
            <param name="depth">The depth of the emboss. (Default: 2)</param>
            <param name="radius">The radius of the corner of the rectangle. (default: -1)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.EmbossRoundRectangle(Cairo.Context,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Adds an embossed rounded rectangle to the dialog.
            </summary>
            <param name="ctx">The context of the rectangle.</param>
            <param name="x">The X position of the rectangle</param>
            <param name="y">The Y position of the rectangle</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle.</param>
            <param name="radius">The radius of the corner of the rectangle.</param>
            <param name="depth">The thickness of the emboss. (Default: 3)</param>
            <param name="intensity">The intensity of the emboss. (Default: 0.4f)</param>
            <param name="fallOff">How quickly the effect falls off around corners (default: 2)</param>
            <param name="lightDarkBalance">How skewed is the light/dark balance (Default: 1)</param>
            <param name="inverse">Whether or not it goes in or out. (Default: false)</param>
            <param name="alphaOffset">The offset for the alpha part of the emboss. (Default: 0)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnMouseDown(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            The event fired when the mouse is down the element is around.  Fires before OnMouseDownOnElement, however OnMouseDownOnElement is called within the base function.
            </summary>
            <param name="api">The Client API</param>
            <param name="mouse">The mouse event args.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnMouseDownOnElement(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled.
            </summary>
            <param name="api">The Client API</param>
            <param name="mouse">The mouse event args.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnMouseUpOnElement(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            The event fired when the mouse is released on the element.  Called after OnMouseUp.  
            </summary>
            <param name="api">The Client API</param>
            <param name="mouse">The mouse event args.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnMouseUp(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            The event fired when the mouse is released.  
            </summary>
            <param name="api">The Client API.</param>
            <param name="args">The arguments for the mouse event.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnMouseMove(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            The event fired when the mouse is moved.
            </summary>
            <param name="api">The Client API.</param>
            <param name="args">The mouse event arguments.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnMouseWheel(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseWheelEventArgs)">
            <summary>
            The event fired when the mouse wheel is scrolled.
            </summary>
            <param name="api">The Client API</param>
            <param name="args">The mouse wheel arguments.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnKeyDown(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.KeyEvent)">
            <summary>
            The event fired when a key is held down.
            </summary>
            <param name="api">The client API</param>
            <param name="args">The key event arguments.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OnKeyPress(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.KeyEvent)">
            <summary>
            The event fired the moment a key is pressed.
            </summary>
            <param name="api">The Client API.</param>
            <param name="args">The keyboard state when the key was pressed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.IsPositionInside(System.Int32,System.Int32)">
            <summary>
            Whether or not the point on screen is inside the Element's area.
            </summary>
            <param name="posX">The X Position of the point.</param>
            <param name="posY">The Y Position of the point.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElement.OutlineColor">
            <summary>
            The compressed version of the outline color as a single int value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementToggleButton">
            <summary>
            Creates a toggle button for the GUI.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementToggleButton.Toggleable">
            <summary>
            Is this button toggleable?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementToggleButton.On">
            <summary>
            Is this button on?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementToggleButton.Focusable">
            <summary>
            Is this element capable of being in the focus?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementToggleButton.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Common.Action{System.Boolean},Vintagestory.API.Client.ElementBounds,System.Boolean)">
            <summary>
            Constructor for the button
            </summary>
            <param name="capi">The core client API.</param>
            <param name="icon">The icon name</param>
            <param name="text">The text for the button.</param>
            <param name="font">The font of the text.</param>
            <param name="OnToggled">The action that happens when the button is toggled.</param>
            <param name="bounds">The bounding box of the button.</param>
            <param name="toggleable">Can the button be toggled on or off?</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementToggleButton.ComposeElements(Cairo.Context,Cairo.ImageSurface)">
            <summary>
            Composes the element in both the pressed, and released states.
            </summary>
            <param name="ctx">The context of the element.</param>
            <param name="surface">The surface of the element.</param>
            <remarks>Neither the context, nor the surface is used in this function.</remarks>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementToggleButton.RenderInteractiveElements(System.Single)">
            <summary>
            Renders the button.
            </summary>
            <param name="deltaTime">The time elapsed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementToggleButton.OnMouseDownOnElement(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            Handles the mouse button press while the mouse is on this button.
            </summary>
            <param name="api">The client API</param>
            <param name="args">The mouse event arguments.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementToggleButton.OnMouseUpOnElement(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            Handles the mouse button release while the mouse is on this button.
            </summary>
            <param name="api">The client API</param>
            <param name="args">The mouse event arguments</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementToggleButton.OnMouseUp(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.MouseEvent)">
            <summary>
            Handles the event fired when the mouse is released.
            </summary>
            <param name="api">The client API</param>
            <param name="args">Mouse event arguments</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementToggleButton.SetValue(System.Boolean)">
            <summary>
            Sets the value of the button.
            </summary>
            <param name="on">Am I on or off?</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementToggleButton.Dispose">
            <summary>
            Disposes of the button.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementCompactScrollbar.scrollbarPadding">
            <summary>
            The padding around the scrollbar.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementCompactScrollbar.Focusable">
            <summary>
            Can this GUIElement be focusable? (default: true).
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCompactScrollbar.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.Action{System.Single},Vintagestory.API.Client.ElementBounds)">
            <summary>
            Scrollbar constructor.
            </summary>
            <param name="capi">Client API</param>
            <param name="onNewScrollbarValue">Event for the changing of the scrollbar or scrolling of the mousewheel.</param>
            <param name="bounds">the bounding box of the scrollbar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCompactScrollbar.ComposeElements(Cairo.Context,Cairo.ImageSurface)">
            <summary>
            Composes the element.
            </summary>
            <param name="ctxStatic">The context of the element</param>
            <param name="surface">The surface of the image for the element (Not used, can be null.)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCompactScrollbar.RenderInteractiveElements(System.Single)">
            <summary>
            Renders the element.
            </summary>
            <param name="deltaTime">The amount of time that has passed.</param>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementControl">
            <summary>
            An element that allows input and can be disabled
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementControl.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Constructor for the element.
            </summary>
            <param name="capi">The Client API.</param>
            <param name="bounds">the bounds of the element.</param>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementControl.Enabled">
            <summary>
            Enables/disables the given element (default is enabled)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementDropDown">
            <summary>
            Creates a drop-down list of items.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementDropDown.DrawOrder">
            <summary>
            The draw order of this GUI Element.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementDropDown.Focusable">
            <summary>
            Can this element be put into focus?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementDropDown.Scale">
            <summary>
            The scale of this GUI element.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDropDown.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String[],System.String[],System.Int32,Vintagestory.API.Client.SelectionChangedDelegate,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.CairoFont,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="capi">The client API</param>
            <param name="values">The values of the strings.</param>
            <param name="names">The names of the strings.</param>
            <param name="selectedIndex">The default selected index.</param>
            <param name="onSelectionChanged">The event that occurs when the selection is changed.</param>
            <param name="bounds">The bounds of the drop down.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDropDown.ComposeElements(Cairo.Context,Cairo.ImageSurface)">
            <summary>
            Composes the element based on the context.
            </summary>
            <param name="ctx">The context of the element.</param>
            <param name="surface">The surface of the image. (Not used)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDropDown.RenderInteractiveElements(System.Single)">
            <summary>
            Renders the dropdown's interactive elements.
            </summary>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDropDown.SetSelectedIndex(System.Int32)">
            <summary>
            Sets the current index to a newly selected index.
            </summary>
            <param name="selectedIndex">the index that is to be selected.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDropDown.SetSelectedValue(System.String[])">
            <summary>
            Sets the current index to the value of the selected string.
            </summary>
            <param name="value">the string contained in the drop down.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDropDown.SetList(System.String[],System.String[])">
            <summary>
            Sets the values of the list with their corresponding names.
            </summary>
            <param name="values">The values of the list.</param>
            <param name="names">The names of the list.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementHorizontalTabs.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.GuiTab[],Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.Int32})">
            <summary>
            Creates a collection of horizontal tabs.
            </summary>
            <param name="capi">The client API</param>
            <param name="tabs">A collection of GUI tabs.</param>
            <param name="font">The font for the name of each tab.</param>
            <param name="bounds">The bounds of each tab.</param>
            <param name="onTabClicked">The event fired whenever the tab is clicked.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementHorizontalTabs.SetValue(System.Int32,System.Boolean)">
            <summary>
            Sets the current tab to the given index.
            </summary>
            <param name="selectedIndex">The current index of the tab.</param>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementListMenu.MaxHeight">
            <summary>
            Max height of the expanded list
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementListMenu.SelectedIndex">
            <summary>
            The (first) currently selected element
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementListMenu.HoveredIndex">
            <summary>
            The element the user currently has the mouse over
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementListMenu.SelectedIndices">
            <summary>
            On multi select mode, the list of all selected elements
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementListMenu.IsOpened">
            <summary>
            Is the current menu opened?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementListMenu.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String[],System.String[],System.Int32,Vintagestory.API.Client.SelectionChangedDelegate,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.CairoFont,System.Boolean)">
            <summary>
            Creates a new GUI Element List Menu
            </summary>
            <param name="capi">The Client API.</param>
            <param name="values">The values of the list.</param>
            <param name="names">The names for each of the values.</param>
            <param name="selectedIndex">The default selected index.</param>
            <param name="onSelectionChanged">The event fired when the selection is changed.</param>
            <param name="bounds">The bounds of the GUI element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementListMenu.ComposeDynamicElements">
            <summary>
            Composes the list of elements dynamically.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementListMenu.Open">
            <summary>
            Opens the menu.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementListMenu.SetSelectedIndex(System.Int32)">
            <summary>
            Sets the selected index.
            </summary>
            <param name="selectedIndex">The index to be set to.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementListMenu.SetSelectedValue(System.String[])">
            <summary>
            Sets the selected index to the given value.
            </summary>
            <param name="value">The value to be set to.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementListMenu.SetList(System.String[],System.String[])">
            <summary>
            Sets the list for the GUI Element list value.
            </summary>
            <param name="values">The values of the list.</param>
            <param name="names">The names of the values.</param>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementScrollbar.ScrollConversionFactor">
            <summary>
            Moving 1 pixel of the scrollbar moves the content by ScrollConversionFactor of pixels
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiElementScrollbar.CurrentYPosition">
            <summary>
            The current Y position of the inner element
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementScrollbar.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.Action{System.Single},Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new Scrollbar.
            </summary>
            <param name="capi">The client API.</param>
            <param name="onNewScrollbarValue">The event that fires when the scrollbar is changed.</param>
            <param name="bounds">The bounds of the scrollbar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementScrollbar.SetHeights(System.Single,System.Single)">
            <summary>
            Sets the height of the scrollbar.
            </summary>
            <param name="visibleHeight">The visible height of the scrollbar</param>
            <param name="totalHeight">The total height of the scrollbar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementScrollbar.SetNewTotalHeight(System.Single)">
            <summary>
            Sets the total height, recalculating things for the new height.
            </summary>
            <param name="totalHeight">The total height of the scrollbar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementScrollbar.TriggerChanged">
            <summary>
            Triggers the change to the new value of the scrollbar.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementScrollbar.ScrollToBottom">
            <summary>
            Puts the scrollblock to the very bottom of the scrollbar.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementSlider.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.ActionConsumable{System.Int32},Vintagestory.API.Client.ElementBounds)">
            <summary>
            Builds a slider.  A horizontal customizeable slider.
            </summary>
            <param name="capi">The Client API</param>
            <param name="onNewSliderValue">The event that's fired when the slider changed.</param>
            <param name="bounds">the bounds of the object.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementSlider.TriggerOnlyOnMouseUp(System.Boolean)">
            <summary>
            Trigger event only once user release the mouse
            </summary>
            <param name="trigger"></param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementSlider.SetAlarmValue(System.Int32)">
            <summary>
            Sets a value to warn the player that going over this is not a good idea.
            </summary>
            <param name="value">The maximum limit before things break down.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementSlider.SetValues(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Sets the values of the slider.
            </summary>
            <param name="currentValue">The value the slider is now.</param>
            <param name="minValue">The lowest value.</param>
            <param name="maxValue">The highest value.</param>
            <param name="step">Each step between values.</param>
            <param name="unit">The units of the value. %, chunks, ect.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementSlider.GetValue">
            <summary>
            Gets the current value of the slider.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementSliderOld.triggerOnlyOnMouseUp(System.Boolean)">
            <summary>
            Trigger event only once user release the mouse
            </summary>
            <param name="trigger"></param>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementSwitch.On">
            <summary>
            Wether the switch has been toggled to On
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementSwitch.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.Action{System.Boolean},Vintagestory.API.Client.ElementBounds,System.Double,System.Double)">
            <summary>
            Creates a switch which can be toggled.
            </summary>
            <param name="capi">The Client API</param>
            <param name="OnToggled">The event that happens when the switch is flipped.</param>
            <param name="bounds">The bounds of the element.</param>
            <param name="size">The size of the switch. (Default: 30)</param>
            <param name="padding">The padding on the outside of the switch (Default: 5)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementSwitch.SetValue(System.Boolean)">
            <summary>
            Sets the value of the switch on or off.
            </summary>
            <param name="on">on == true.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementTextButton.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.CairoFont,Vintagestory.API.Common.ActionConsumable,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.EnumButtonStyle)">
            <summary>
            Creates a button with text.
            </summary>
            <param name="capi">The Client API</param>
            <param name="text">The text of the button.</param>
            <param name="font">The font of the text.</param>
            <param name="hoverFont">The font of the text when the player is hovering over the button.</param>
            <param name="onClick">The event fired when the button is clicked.</param>
            <param name="bounds">The bounds of the button.</param>
            <param name="style">The style of the button.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementTextButton.SetOrientation(Vintagestory.API.Client.EnumTextOrientation)">
            <summary>
            Sets the orientation of the text both when clicked and when idle.
            </summary>
            <param name="orientation">The orientation of the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementTextButton.SetActive(System.Boolean)">
            <summary>
            Sets the button as active or inactive.
            </summary>
            <param name="active">Active == clickable</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementVerticalTabs.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.GuiTab[],Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.Int32,Vintagestory.API.Client.GuiTab})">
            <summary>
            Creates a new vertical tab group.
            </summary>
            <param name="capi">The Client API</param>
            <param name="tabs">The collection of individual tabs.</param>
            <param name="font">The font for the group of them all.</param>
            <param name="bounds">The bounds of the tabs.</param>
            <param name="onTabClicked">The event fired when the tab is clicked.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementVerticalTabs.SetValue(System.Int32)">
            <summary>
            Switches to a different tab.
            </summary>
            <param name="index">The tab to switch to.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementVerticalTabs.SetValue(System.Int32,System.Boolean)">
            <summary>
            Switches to a different tab.
            </summary>
            <param name="index">The tab to switch to.</param>
            <param name="triggerHandler">Whether or not the handler triggers.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementChatInput.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.String})">
            <summary>
            Adds a chat input element to the UI.
            </summary>
            <param name="capi">The client API</param>
            <param name="bounds">The bounds of the chat input.</param>
            <param name="OnTextChanged">The event fired when the text is altered.</param>
        </member>
        <member name="T:Vintagestory.API.Client.ConfigItem">
            <summary>
            A config item for the GUIElementConfigList.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ConfigItem.Type">
            <summary>
            Item or title
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ConfigItem.Key">
            <summary>
            The name of the config item.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ConfigItem.Value">
            <summary>
            the value of the config item.  
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ConfigItem.Code">
            <summary>
            The code of the config item.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ConfigItem.error">
            <summary>
            Has this particular config item errored?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ConfigItem.posY">
            <summary>
            The y position of the config item.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ConfigItem.height">
            <summary>
            The height of the config item.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementConfigList">
            <summary>
            A configurable list of items.  An example of this is the controls in the settings menu.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementConfigList.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.Collections.Generic.List{Vintagestory.API.Client.ConfigItem},Vintagestory.API.Client.ConfigItemClickDelegate,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new dropdown configuration list.
            </summary>
            <param name="capi">The Client API</param>
            <param name="items">The list of items in the configuration.</param>
            <param name="OnItemClick">The event fired when the particular item is clicked.</param>
            <param name="font">The font of the text.</param>
            <param name="bounds">the bounds of the element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementConfigList.Autoheight">
            <summary>
            Automatically adjusts the height of the element.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementConfigList.Refresh">
            <summary>
            Refreshes the Config List.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementDialogTitleBar">
            <summary>
            A title bar for your GUI.  
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementDialogTitleBar.unscaledCloseIconSize">
            <summary>
            The size of the close icon in the top right corner of the GUI.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDialogTitleBar.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.API.Client.GuiComposer,Vintagestory.API.Common.Action,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new title bar.  
            </summary>
            <param name="capi">The Client API.</param>
            <param name="text">The text on the title bar.</param>
            <param name="composer">The GuiComposer for the title bar.</param>
            <param name="OnClose">The event fired when the title bar is closed.</param>
            <param name="font">The font of the title bar.</param>
            <param name="bounds">The bounds of the title bar.</param>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementNumberInput">
            <summary>
            A numerical input field for inputting numbers.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementNumberInput.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.String},Vintagestory.API.Client.CairoFont)">
            <summary>
            Creates a numerical input field.
            </summary>
            <param name="capi">The Client API</param>
            <param name="bounds">The bounds of the GUI.</param>
            <param name="OnTextChanged">The event fired when the number is changed.</param>
            <param name="font">The font of the numbers.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementNumberInput.GetValue">
            <summary>
            Gets the current value of the number.
            </summary>
            <returns>A float representing the value.</returns>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementStatbar">
            <summary>
            A stat bar to the GUI for keeping track of progress and numbers.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementStatbar.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,System.Double[],System.Boolean)">
            <summary>
            Creates a new stat bar for the GUI.
            </summary>
            <param name="capi">The client API</param>
            <param name="bounds">The bounds of the stat bar.</param>
            <param name="color">The color of the stat bar.</param>
            <param name="rightToLeft">Determines the direction that the bar fills.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementStatbar.SetLineInterval(System.Single)">
            <summary>
            Sets the line interval for the Status Bar.
            </summary>
            <param name="value">The value to set for the line interval/</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementStatbar.SetValue(System.Single)">
            <summary>
            Sets the value for the status bar and updates the bar.
            </summary>
            <param name="value">The new value of the status bar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementStatbar.SetValues(System.Single,System.Single,System.Single)">
            <summary>
            Sets the value for the status bar as well as the minimum and maximum values.
            </summary>
            <param name="value">The new value of the status bar.</param>
            <param name="min">The minimum value of the status bar.</param>
            <param name="max">The maximum value of the status bar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementStatbar.SetMinMax(System.Single,System.Single)">
            <summary>
            Sets the minimum and maximum values of the status bar.
            </summary>
            <param name="min">The minimum value of the status bar.</param>
            <param name="max">The maximum value of the status bar.</param>
        </member>
        <member name="P:Vintagestory.API.Client.IGuiElementCell.Bounds">
            <summary>
            The bounds of the cell.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiElementCell.OnRenderInteractiveElements(Vintagestory.API.Client.ICoreClientAPI,System.Single)">
            <summary>
            The event fired when the cell is rendered.
            </summary>
            <param name="api">The Client API</param>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiElementCell.UpdateCellHeight">
            <summary>
            Called when the cell is modified and needs to be updated.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IGuiElementCell.Dispose">
            <summary>
            cleans up and gets rid of the cell in a neat and orderly fashion.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementCellList.elementCells">
            <summary>
            The cells in the list.  See IGuiElementCell for how it's supposed to function.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementCellList.unscaledCellSpacing">
            <summary>
            the space between the cells.  Default: 10
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementCellList.UnscaledCellVerPadding">
            <summary>
            The padding on the vertical axis of the cell.  Default: 2
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementCellList.UnscaledCellHorPadding">
            <summary>
            The padding on the horizontal axis of the cell.  Default: 7
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementCellList.leftPartClick">
            <summary>
            The delegate fired when the left part of the cell is clicked.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementCellList.rightPartClick">
            <summary>
            The delegate fired when the right part of the cell is clicked.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCellList.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.Int32},Vintagestory.API.Common.Action{System.Int32},Vintagestory.API.Client.OnRequireCell,System.Collections.Generic.List{Vintagestory.API.Client.ListCellEntry})">
            <summary>
            Creates a new list in the current GUI.
            </summary>
            <param name="capi">The Client API.</param>
            <param name="bounds">The bounds of the list.</param>
            <param name="OnMouseDownOnCellLeft">The function fired when the cell is clicked on the left side.</param>
            <param name="OnMouseDownOnCellRight">The function fired when the cell is clicked on the right side.</param>
            <param name="cellCreator">The event fired when a cell is requested by the gui</param>
            <param name="cells">The array of cells initialized with the list.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCellList.CalcTotalHeight">
            <summary>
            Calculates the total height for the list.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCellList.AddCell(Vintagestory.API.Client.ListCellEntry,System.Int32)">
            <summary>
            Adds a cell to the list.
            </summary>
            <param name="cell">The cell to add.</param>
            <param name="afterPosition">The position of the cell to add after.  (Default: -1)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCellList.RemoveCell(System.Int32)">
            <summary>
            Removes a cell at a specified position.
            </summary>
            <param name="position">The position of the cell to remove.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementTextArea.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.String},Vintagestory.API.Client.CairoFont)">
            <summary>
            Creates a new text area.
            </summary>
            <param name="capi">The client API</param>
            <param name="bounds">The bounds of the text area.</param>
            <param name="OnTextChanged">The event fired when the text is changed.</param>
            <param name="font">The font of the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementTextInput.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.Action{System.String},Vintagestory.API.Client.CairoFont)">
            <summary>
            Adds a text input to the GUI
            </summary>
            <param name="capi">The Client API</param>
            <param name="bounds">The bounds of the text input.</param>
            <param name="OnTextChanged">The event fired when the text is changed.</param>
            <param name="font">The font of the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementTextInput.HideCharacters">
            <summary>
            Tells the text component to hide the characters in the text.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementItemSlotGrid">
            <summary>
            Displays the slots of an inventory in the form of a slot grid
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementItemSlotGrid.DetermineAvailableSlots(System.Int32[])">
            <summary>
            Determines the available slots for the slot grid.
            </summary>
            <param name="visibleSlots"></param>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementItemSlotGridBase">
            <summary>
            A base class for the slot grid.  For all your slot grid needs.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementItemSlotGridBase.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.IInventory,Vintagestory.API.Common.Action{System.Object},System.Int32,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new instance of this class.
            </summary>
            <param name="capi">The client API</param>
            <param name="inventory">The attached inventory</param>
            <param name="SendPacket">A handler that should send supplied network packet to the server, if the inventory modifications should be synced</param>
            <param name="columns">The number of columns in the GUI.</param>
            <param name="bounds">The bounds of the slot grid.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementItemSlotGridBase.FilterItemsBySearchText(System.String,System.Collections.Generic.Dictionary{System.Int32,System.String},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            Renders only a subset of all available slots filtered by searching given text on the item name/description
            </summary>
            <param name="text"></param>
            <param name="searchCache">Can be set to increase search performance, otherwise a slow search is performed</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementItemSlotGridBase.HighlightSlot(System.Int32)">
            <summary>
            Highlights a specific slot.
            </summary>
            <param name="slotId">The slot to highlight.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementItemSlotGridBase.RemoveSlotHighlight">
            <summary>
            Removes the active slot highlight.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementItemSlotGridExcl">
            <summary>
            Builds slot grid with exclusions to the grid.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementItemSlotGridExcl.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.IInventory,Vintagestory.API.Common.Action{System.Object},System.Int32,System.Int32[],Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new slot grid with exclusions.
            </summary>
            <param name="capi">The Client API</param>
            <param name="inventory">The attached inventory.</param>
            <param name="SendPacketHandler">A handler that should send supplied network packet to the server, if the inventory modifications should be synced</param>
            <param name="columns">The number of columns in the slot grid.</param>
            <param name="excludingSlots">The slots that have been excluded.</param>
            <param name="bounds">The bounds of the slot grid.</param>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementPassiveItemSlot">
            <summary>
            Displays a single slot from given inventory, cannot be directly interacted with. Currently used for the mouse slot
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementPassiveItemSlot.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Common.IInventory,Vintagestory.API.Common.ItemSlot,System.Boolean)">
            <summary>
            Creates a new passive item slot.
            </summary>
            <param name="capi">The client API</param>
            <param name="bounds">the bounds of the Slot.</param>
            <param name="inventory">the attached inventory for the slot.</param>
            <param name="slot">The slot of the slot.</param>
            <param name="drawBackground">Do we draw the background for this slot? (Default: true)</param>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementSkillItemGrid">
            <summary>
            A slot for item skills.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementSkillItemGrid.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.Collections.Generic.List{Vintagestory.API.Client.SkillItem},System.Int32,System.Int32,System.Action{System.Int32},Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a Skill Item Grid.
            </summary>
            <param name="capi">The Client API</param>
            <param name="skillItems">The items with skills.</param>
            <param name="columns">The columns of the Item Grid</param>
            <param name="rows">The Rows of the Item Grid.</param>
            <param name="OnSlotClick">The event fired when the slot is clicked.</param>
            <param name="bounds">The bounds of the Item Grid.</param>
        </member>
        <member name="T:Vintagestory.API.Client.ItemstackComponentBase">
            <summary>
            Draws an itemstack 
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.ItemstackTextComponent">
            <summary>
            Draws an itemstack 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.RichTextComponent.ComposeElements(Cairo.Context,Cairo.ImageSurface)">
            <summary>
            Composes the element.
            </summary>
            <param name="ctx">Context of the text component.</param>
            <param name="surface">The surface of the image.</param>
            <param name="withFont">The font for the element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.RichTextComponent.RenderInteractiveElements(System.Single,System.Double,System.Double)">
            <summary>
            Renders the text component.
            </summary>
            <param name="deltaTime"></param>
            <param name="renderX"></param>
            <param name="renderY"></param>
        </member>
        <member name="M:Vintagestory.API.Client.RichTextComponent.CalcBounds(Vintagestory.API.Client.TextFlowPath[],System.Double,System.Double,System.Double)">
            <summary>
            Initializes the size and stuff. Return true if you had to enter the next line
            </summary>
            <param name="flowPath"></param>
            <param name="xPos"></param>
            <returns>True when longer than 1 line</returns>
        </member>
        <member name="P:Vintagestory.API.Client.RichTextComponentBase.BoundsPerLine">
            <summary>
            The width/height boundaries of this text component per line
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.RichTextComponentBase.MarginTop">
            <summary>
            When !IsInline this will be the Y-Advance into the next line
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.RichTextComponentBase.PaddingRight">
            <summary>
            Padding that is used when a richtextcomponent came before and needs some left spacing to it
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.RichTextComponentBase.Float">
            <summary>
            When left or right, then this element can span over multiple text lines
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.RichTextComponentBase.ComposeElements(Cairo.Context,Cairo.ImageSurface)">
            <summary>
            Composes the element.
            </summary>
            <param name="ctx">Context of the text component.</param>
            <param name="surface">The surface of the image.</param>
            <param name="withFont">The font for the element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.RichTextComponentBase.RenderInteractiveElements(System.Single,System.Double,System.Double)">
            <summary>
            Renders the text component.
            </summary>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Client.RichTextComponentBase.CalcBounds(Vintagestory.API.Client.TextFlowPath[],System.Double,System.Double,System.Double)">
            <summary>
            Initializes the size and stuff. Return true if you had to enter the next line
            </summary>
            <param name="flowPath"></param>
            <param name="xPos"></param>
            <returns>Amount of lines passed over, if any</returns>
        </member>
        <member name="T:Vintagestory.API.Client.SlideshowGridRecipeTextComponent">
            <summary>
            Draws multiple itemstacks
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.SlideshowGridRecipeTextComponent.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.GridRecipe[],System.Double,Vintagestory.API.Client.EnumFloat,Vintagestory.API.Common.Action{Vintagestory.API.Common.ItemStack},Vintagestory.API.Common.ItemStack[])">
            <summary>
            Flips through given array of grid recipes every second
            </summary>
            <param name="capi"></param>
            <param name="gridrecipes"></param>
            <param name="size"></param>
            <param name="floatType"></param>
            <param name="onStackClicked"></param>
            <param name="allStacks">If set, will resolve wildcards based on this list, otherwise will search all available blocks/items</param>
        </member>
        <member name="T:Vintagestory.API.Client.SlideshowItemstackTextComponent">
            <summary>
            Draws multiple itemstacks
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.SlideshowItemstackTextComponent.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.ItemStack[],System.Double,Vintagestory.API.Client.EnumFloat,Vintagestory.API.Common.Action{Vintagestory.API.Common.ItemStack})">
            <summary>
            Flips through given array of item stacks every second
            </summary>
            <param name="itemstacks"></param>
            <param name="unscaleSize"></param>
            <param name="floatType"></param>
        </member>
        <member name="M:Vintagestory.API.Client.SlideshowItemstackTextComponent.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.ItemStack,System.Collections.Generic.List{Vintagestory.API.Common.ItemStack},System.Double,Vintagestory.API.Client.EnumFloat,Vintagestory.API.Common.Action{Vintagestory.API.Common.ItemStack})">
            <summary>
            Looks at the collectibles handbook groupBy attribute and makes a list of itemstacks from that
            </summary>
            <param name="itemstackgroup"></param>
            <param name="unscaleSize"></param>
            <param name="floatType"></param>
        </member>
        <member name="M:Vintagestory.API.Client.LinkTextComponent.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Common.Action{Vintagestory.API.Client.LinkTextComponent})">
            <summary>
            A text component with an embedded link.
            </summary>
            <param name="displayText">The text of the Text.</param>
            <param name="url">The link in the text.</param>
        </member>
        <member name="T:Vintagestory.API.Client.GuiElementDynamicText">
            <summary>
            Text that can be changed after being composed
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDynamicText.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.EnumTextOrientation,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Adds a new element that renders text dynamically.
            </summary>
            <param name="capi">The client API.</param>
            <param name="text">The starting text on the component.</param>
            <param name="font">The font of the text.</param>
            <param name="orientation">The orientation of the text.</param>
            <param name="bounds">the bounds of the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDynamicText.AutoHeight">
            <summary>
            Automatically adjusts the height of the dynamic text.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDynamicText.RecomposeText(System.Boolean)">
            <summary>
            Recomposes the element for lines.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDynamicText.SetNewText(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the text value of the element.
            </summary>
            <param name="text">The text of the component.</param>
            <param name="autoHeight">Whether the height of the component should be modified.</param>
            <param name="forceRedraw">Whether the element should be redrawn.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDynamicTextHelper.AddDynamicText(Vintagestory.API.Client.GuiComposer,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.EnumTextOrientation,Vintagestory.API.Client.ElementBounds,System.String)">
            <summary>
            Adds dynamic text to the GUI.
            </summary>
            <param name="composer"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="orientation"></param>
            <param name="bounds"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDynamicTextHelper.GetDynamicText(Vintagestory.API.Client.GuiComposer,System.String)">
            <summary>
            Gets the Dynamic Text by name from the GUI.
            </summary>
            <param name="key">The name of the element.</param>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementEditableTextBase.OnKeyPressed">
            <summary>
            Called when a keyboard key was pressed, received and handled
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEditableTextBase.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Initializes the text component.
            </summary>
            <param name="capi">The Client API</param>
            <param name="font">The font of the text.</param>
            <param name="bounds">The bounds of the component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEditableTextBase.SetCaretPos(System.Double,System.Double)">
            <summary>
            Sets the position of the cursor at a given point.
            </summary>
            <param name="x">X position of the cursor.</param>
            <param name="y">Y position of the cursor.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEditableTextBase.SetCaretPos(System.Int32,System.Int32)">
            <summary>
            Sets the position of the cursor to a specific character.
            </summary>
            <param name="posInLine">The position in the line.</param>
            <param name="posLine">The line of the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEditableTextBase.SetValue(System.Single)">
            <summary>
            Sets a numerical value to the text, appending it to the end of the text.
            </summary>
            <param name="value">The value to add to the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEditableTextBase.SetValue(System.String)">
            <summary>
            Sets given text, sets the cursor to the end of the text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEditableTextBase.LoadValue(System.String)">
            <summary>
            Sets given texts, leaves cursor position unchanged
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEditableTextBase.MoveCursor(System.Int32,System.Boolean)">
            <summary>
            Moves the cursor forward and backward by an amount.
            </summary>
            <param name="dir">The direction to move the cursor.</param>
            <param name="wholeWord">Whether or not we skip entire words moving it.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEditableTextBase.SetMaxLines(System.Int32)">
            <summary>
            Sets the number of lines in the Text Area.
            </summary>
            <param name="maxlines">The maximum number of lines.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEmbossedText.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new embossed text element.
            </summary>
            <param name="capi">The Client API</param>
            <param name="text">The text of the component.</param>
            <param name="font">The font of the text.</param>
            <param name="bounds">The bounds of the component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEmbossedText.IsEnabled">
            <summary>
            Whether or not the component is enabled.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEmbossedText.SetEnabled(System.Boolean)">
            <summary>
            Sets whether or not the component is enabled.
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementHoverText.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.API.Client.CairoFont,System.Int32,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.TextBackground)">
            <summary>
            Creates a new instance of hover text.
            </summary>
            <param name="capi">The client API.</param>
            <param name="text">The text of the text.</param>
            <remarks>For the text and the text.</remarks>
            <param name="font">The font of the text.</param>
            <param name="maxWidth">The width of the text.</param>
            <param name="bounds">the bounds of the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementHoverText.SetNewText(System.String)">
            <summary>
            Sets the text of the component and changes it.
            </summary>
            <param name="text">The text to change.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementHoverText.SetAutoDisplay(System.Boolean)">
            <summary>
            Sets whether the text automatically displays or not.
            </summary>
            <param name="on">Whether the text is displayed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementHoverText.SetVisible(System.Boolean)">
            <summary>
            Sets the visibility to the 
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementHoverText.SetAutoWidth(System.Boolean)">
            <summary>
            Sets whether or not the width of the component should automatiocally adjust.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementItemstackInfo.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.InfoTextDelegate)">
            <summary>
            Creates an ItemStackInfo element.
            </summary>
            <param name="capi">The client API</param>
            <param name="bounds">The bounds of the object.</param>
            <param name="OnRequireInfoText">The function that is called when an item information is called.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementItemstackInfo.GetSlot">
            <summary>
            Gets the item slot for this stack info.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementItemstackInfo.SetSourceSlot(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Sets the source slot for stacks.
            </summary>
            <param name="nowSlot"></param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementNewVersionText.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a NewVersion text component.
            </summary>
            <param name="capi">The Client API</param>
            <param name="font">The font of the text.</param>
            <param name="bounds">The bounds of the component.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementNewVersionText.RecomposeMultiLine(System.String)">
            <summary>
            Recomposes a multi-line message.
            </summary>
            <param name="versionnumber">The version number of the new version.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementRichtext.RecomposeText">
            <summary>
            Recomposes the element for lines.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementCell.cellEntry">
            <summary>
            The table cell information.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCell.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ListCellEntry,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new Element Cell.  A container for TableCells.
            </summary>
            <param name="capi">The Client API</param>
            <param name="cell">The base cell</param>
            <param name="bounds">The bounds of the TableCell</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCell.UpdateCellHeight">
            <summary>
            Updates the height of the cell based off the contents.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCell.OnRenderInteractiveElements(Vintagestory.API.Client.ICoreClientAPI,System.Single)">
            <summary>
            The event fired when the interactive element is ready to be rendered.
            </summary>
            <param name="api">The Client API</param>
            <param name="parentBounds">The bounds of the parent table.</param>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementClip.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.Boolean,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Adds a clipped area to the GUI.
            </summary>
            <param name="capi">The Client API</param>
            <param name="clip">Do we clip?</param>
            <param name="bounds">The bounds of the element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementClipHelpler.BeginClip(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Adds a starting clip to the GUI. Purely decorative.
            </summary>
            <param name="bounds">The bounds of the object.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementClipHelpler.EndClip(Vintagestory.API.Client.GuiComposer)">
            <summary>
            Adds an ending clip to the GUI after the previous element.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementModCell.cell">
            <summary>
            The base cell.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementModCell.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ListCellEntry,Vintagestory.API.Common.IAssetManager,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Adds a mod cell to the table.
            </summary>
            <param name="capi">The client API</param>
            <param name="cell">The table cell to add.</param>
            <param name="assetManager">The asset manager for the mod</param>
            <param name="bounds">The bounds of the cell</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementModCell.UpdateCellHeight">
            <summary>
            Updates the height of the given cell based off information.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementModCell.OnRenderInteractiveElements(Vintagestory.API.Client.ICoreClientAPI,System.Single)">
            <summary>
            Renders the interactive element.
            </summary>
            <param name="api">The Client API</param>
            <param name="parentBounds">The parent bounds of the cell.</param>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.Title">
            <summary>
            The title of the Table Cell.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.DetailText">
            <summary>
            The details of the table cell.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.RightTopText">
            <summary>
            The text displayed in the top right corner of the cell. 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.RightTopOffY">
            <summary>
            The y offset of the right top text
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.LeftOffY">
            <summary>
            The y offset of the left title and detail text
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.OnClick">
            <summary>
            The event fired when the tablecell is clicked.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.TitleFont">
            <summary>
            The font of the cell title.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.DetailTextFont">
            <summary>
            The font of the detail text.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.DrawAsButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.Enabled">
            <summary>
            Whether or not the cell is on.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ListCellEntry.Data">
            <summary>
            The data stored inside the cell.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCustomDraw.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.DrawDelegateWithBounds,System.Boolean)">
            <summary>
            Adds a custom drawing element to the GUI
            </summary>
            <param name="capi">The Client API</param>
            <param name="bounds">The bounds of the Element</param>
            <param name="OnDraw">The event fired when the object is drawn.</param>
            <param name="interactive">Whether or not the element is able to be interacted with (Default: false)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementCustomDraw.Redraw">
            <summary>
            Redraws the element.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementDialogBackground.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,System.Boolean,System.Double)">
            <summary>
            Adds a Background to the Dialog.
            </summary>
            <param name="capi">The Client API</param>
            <param name="bounds">The bounds of the element.</param>
            <param name="withTitlebar">Minor style adjustments to accomodate title bar</param>
            <param name="hotBarLayout">Whether or not the hotbar is rendered in this gui.</param>
            <param name="strokeWidth">The top padding area of the GUI</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementEngravedText.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.EnumTextOrientation)">
            <summary>
            Creates a new Engraved Text element.
            </summary>
            <param name="capi">The client API.</param>
            <param name="text">The text on the element.</param>
            <param name="font">The font of the text.</param>
            <param name="bounds">The bounds of the Text Element.</param>
            <param name="orientation">The orientation of the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementGameOverlay.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,System.Double[])">
            <summary>
            Creates a new overlay element.
            </summary>
            <param name="capi">The client API.</param>
            <param name="bounds">The bounds of the element.</param>
            <param name="bgcolor">The background color of the element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementGameOverlyHelper.AddGameOverlay(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,System.Double[])">
            <summary>
            Adds an overlay to the current GUI.
            </summary>
            <param name="bounds">The bounds of the overlay.</param>
            <param name="backgroundColor">The background color of the overlay.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementGrayBackground.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Creates a new gray background.
            </summary>
            <param name="capi">The client API</param>
            <param name="bounds">The bouds of the GUI Element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementGrayBackgroundHelpber.AddGrayBG(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds)">
            <summary>
            Adds a gray background to the current GUI.
            </summary>
            <param name="bounds">The bounds of the backgrounds.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementImageBackground.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,System.String,System.Single)">
            <summary>
            Creates a new Image Background for the GUI.
            </summary>
            <param name="capi">The Client API</param>
            <param name="bounds">The bounds of the element.</param>
            <param name="textureName">The name of the texture.</param>
            <param name="brightness">The brightness of the texture. (Default: 1f)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementImageBackgroundHelper.AddImageBG(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,System.String,System.Single)">
            <summary>
            Adds a background to the current GUI
            </summary>
            <param name="bounds">The bounds of the background</param>
            <param name="textureName">The name of the background texture.</param>
            <param name="brightness">The brightness of the texture (default: 1f)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementInset.#ctor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ElementBounds,System.Int32,System.Single)">
            <summary>
            Creates a new inset for the GUI.
            </summary>
            <param name="capi">The Client API</param>
            <param name="bounds">The bounds of the Element.</param>
            <param name="depth">The depth of the element.</param>
            <param name="brightness">The brightness of the inset.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementInsetHelper.AddInset(Vintagestory.API.Client.GuiComposer,Vintagestory.API.Client.ElementBounds,System.Int32,System.Single)">
            <summary>
            Adds an inset to the current GUI.
            </summary>
            <param name="bounds">The bounds of the inset.</param>
            <param name="depth">The depth of the inset.</param>
            <param name="brightness">The brightness of the inset.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementStaticText.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.API.Client.EnumTextOrientation,Vintagestory.API.Client.ElementBounds,Vintagestory.API.Client.CairoFont)">
            <summary>
            Creates a new GUIElementStaticText.
            </summary>
            <param name="capi">The Client API</param>
            <param name="text">The text of the Element</param>
            <param name="orientation">The orientation of the text.</param>
            <param name="bounds">The bounds of the element.</param>
            <param name="font">The font of the text.</param>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementTextBase.textPathMode">
            <summary>
            Whether or not the text path mode is active.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiElementTextBase.Font">
            <summary>
            The font of the Text Element.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementTextBase.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.ElementBounds)">
             <summary>
             The prober for the text size.
             </summary>
            public TextSizeProber Prober;
            <summary>
            Creates a new text based element.
            </summary>
            <param name="capi">The Client API</param>
            <param name="text">The text of this element.</param>
            <param name="font">The font of the text.</param>
            <param name="bounds">The bounds of the element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementTextBase.DrawTextLineAt(Cairo.Context,System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            Draws the line of text on a component.
            </summary>
            <param name="ctx">The context of the text</param>
            <param name="text">The text of the text.</param>
            <param name="posX">The X Position of the text.</param>
            <param name="posY">The Y position of the text.</param>
            <param name="textPathMode">The pathing mode.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiElementTextBase.GetText">
            <summary>
            Gets the text on the element.
            </summary>
            <returns>The text of the element.</returns>
        </member>
        <member name="F:Vintagestory.API.Client.FontConfig.UnscaledFontsize">
            <summary>
            The size of the font before scaling is applied.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.FontConfig.Fontname">
            <summary>
            The name of the font.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.FontConfig.FontWeight">
            <summary>
            The weight of the font.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.FontConfig.Color">
            <summary>
            The color of the font.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.FontConfig.StrokeColor">
            <summary>
            The color of the font outline.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.FontConfig.StrokeWidth">
            <summary>
            The thickness of the outline.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.GuiComposer">
            <summary>
            Composes a dialog which are made from a set of elements
            The composed dialog is cached, so to recompose you have to Recompose All elements or instantiate a new composer with doCache set to false
            The caching allows the dialog using the composer to not worry about performance and just call compose whenever it has to display a new composed dialog
            You add components by chaining the functions of the composer together for building the result.
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.GuiComposer.OnRecomposed">
            <summary>
            Triggered when the gui scale changed or the game window was resized
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiComposer.CurrentElementKey">
            <summary>
            A unique number assigned to each element
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiComposer.Tabbable">
            <summary>
            Whether or not the Tab-Key down event should be used and consumed to cycle-focus individual gui elements
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.CreateEmpty(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Creates an empty GuiComposer.
            </summary>
            <param name="api">The Client API</param>
            <returns>An empty GuiComposer.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.PremultipliedAlpha(System.Boolean)">
            <summary>
            On by default, is passed on to the gui elements as well. Disabling it means has a performance impact. Recommeded to leave enabled, but may need to be disabled to smoothly alpha blend text elements. Must be called before adding elements and before composing.
            Notice! Most gui elements even yet support non-premul alpha mode
            </summary>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.AddIf(System.Boolean)">
            <summary>
            Adds a condition for adding a group of items to the GUI- eg: if you have a crucible in the firepit, add those extra slots.  Should always pair with an EndIf()
            </summary>
            <param name="condition">When the following slots should be added</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.EndIf">
            <summary>
            End of the AddIf block.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.Execute(Vintagestory.API.Common.Action)">
            <summary>
            Runs given method
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.BeginChildElements(Vintagestory.API.Client.ElementBounds)">
            <summary>
            Starts a set of child elements.
            </summary>
            <param name="bounds">The bounds for the child elements.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.BeginChildElements">
            <summary>
            Starts a set of child elements.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.EndChildElements">
            <summary>
            End of the current set of child elements.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.OnlyDynamic">
            <summary>
            Sets the render to Dynamic components only
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.ReCompose">
            <summary>
            Rebuilds the Composed GUI.  
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiComposer.CurrentTabIndexElement">
            <summary>
            Gets the currently tabbed index element, if there is one currently focused.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiComposer.MaxTabIndex">
            <summary>
            Gets the maximum tab index of the components.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.FocusElement(System.Int32)">
            <summary>
            marks an element as in focus.  
            </summary>
            <param name="tabIndex">The tab index to focus at.</param>
            <returns>Whether or not the focus could be done.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.UnfocusOwnElements">
            <summary>
            Unfocuses the elements within this GUI composer.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.UnfocusOwnElementsExcept(Vintagestory.API.Client.GuiElement)">
            <summary>
            Unfocuses all elements except one specific element.
            </summary>
            <param name="elem">The element to remain in focus.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.Compose(System.Boolean)">
            <summary>
            Tells the composer to compose the gui.
            </summary>
            <param name="focusFirstElement">Whether or not to put the first element in focus.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.OnMouseUp(Vintagestory.API.Client.MouseEvent)">
            <summary>
            Fires the OnMouseUp events.
            </summary>
            <param name="mouse">The mouse information.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.OnMouseDown(Vintagestory.API.Client.MouseEvent)">
            <summary>
            Fires the OnMouseDown events.
            </summary>
            <param name="mouseArgs">The mouse information.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.OnMouseMove(Vintagestory.API.Client.MouseEvent)">
            <summary>
            Fires the OnMouseMove events.
            </summary>
            <param name="mouse">The mouse information.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.OnMouseWheel(Vintagestory.API.Client.MouseWheelEventArgs)">
            <summary>
            Fires the OnMouseWheel events.
            </summary>
            <param name="mouse">The mouse wheel information.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.OnKeyDown(Vintagestory.API.Client.KeyEvent,System.Boolean)">
            <summary>
            Fires the OnKeyDown events.
            </summary>
            <param name="args">The keyboard information.</param>
            <param name="haveFocus">Whether or not the gui has focus.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.OnKeyPress(Vintagestory.API.Client.KeyEvent)">
            <summary>
            Fires the OnKeyPress event.
            </summary>
            <param name="args">The keyboard information</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.PostRender(System.Single)">
            <summary>
            Fires the PostRender event.
            </summary>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.Render(System.Single)">
            <summary>
            Fires the render event.
            </summary>
            <param name="deltaTime">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.AddInteractiveElement(Vintagestory.API.Client.GuiElement,System.String)">
            <summary>
            Adds an interactive element to the composer.
            </summary>
            <param name="element">The element to add.</param>
            <param name="key">The name of the element. (default: null)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.AddStaticElement(Vintagestory.API.Client.GuiElement,System.String)">
            <summary>
            Adds a static element to the composer.
            </summary>
            <param name="element">The element to add.</param>
            <param name="key">The name of the element (default: null)</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiComposer.GetElement(System.String)">
            <summary>
            Gets the element by name.
            </summary>
            <param name="key">The name of the element to get.</param>
        </member>
        <member name="T:Vintagestory.API.Client.GuiDialog.DlgComposers">
            <summary>
            Dialogue Composer for the GUIDialogue.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.DlgComposers.Values">
            <summary>
            Returns all composers as a flat list
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.DlgComposers.#ctor(Vintagestory.API.Client.GuiDialog)">
            <summary>
            Constructor.
            </summary>
            <param name="dialog">The dialogue this composer belongs to.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.DlgComposers.ClearComposers">
            <summary>
            Cleans up and clears the composers.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.DlgComposers.Dispose">
            <summary>
            Clean disposal method.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.DlgComposers.Item(System.String)">
            <summary>
            Returns the composer for given composer name
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.DlgComposers.ContainsKey(System.String)">
            <summary>
            Checks to see if the key is located within the given dialogue composer.
            </summary>
            <param name="key">The key you are searching for.</param>
            <returns>Do we have your key?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.DlgComposers.Remove(System.String)">
            <summary>
            Removes the given key and the corresponding value from the Dialogue Composer.
            </summary>
            <param name="key">The Key to remove.</param>
        </member>
        <member name="F:Vintagestory.API.Client.GuiDialog.Composers">
            <summary>
            The Instance of Dialogue Composer for this GUIDialogue.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.SingleComposer">
            <summary>
            A single composer for this GUIDialogue.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.DebugName">
            <summary>
            Debug name.  For debugging purposes.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.ZSize">
            <summary>
            The amount of depth required for this dialog. Default is 150. Required for correct z-ordering of dialogs.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.Focused">
            <summary>
            Is the dialogue currently in focus?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.DialogType">
            <summary>
            Is this dialogue a dialogue or a HUD object?
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.GuiDialog.OnOpened">
            <summary>
            The event fired when this dialogue is opened.
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.GuiDialog.OnClosed">
            <summary>
            The event fired when this dialogue is closed.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.#ctor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Constructor for the GUIDialogue.
            </summary>
            <param name="capi">The Client API.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnBlockTexturesLoaded">
            <summary>
            Makes this gui pop up once a pre-set given key combination is set.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnLevelFinalize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.DrawOrder">
            <summary>
            0 = draw first, 1 = draw last. Used to enforce tooltips and held itemstack always drawn last to be visible.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Vintagestory.API.Client.GuiDialog.InputOrder" -->
        <member name="P:Vintagestory.API.Client.GuiDialog.UnregisterOnClose">
            <summary>
            Should this dialogue de-register itself once it's closed? (Defaults to no)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnGuiOpened">
            <summary>
            Fires when the GUI is opened.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnGuiClosed">
            <summary>
            Fires when the GUI is closed.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.TryOpen">
            <summary>
            Attempts to open this dialogue.
            </summary>
            <returns>Was this dialogue successfully opened?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.TryClose">
            <summary>
            Attempts to close this dialogue- triggering the OnCloseDialogue event.
            </summary>
            <returns>Was this dialogue successfully closed?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.UnFocus">
            <summary>
            Unfocuses the dialogue.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.Focus">
            <summary>
            Focuses the dialog
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.Toggle">
            <summary>
            If the dialogue is opened, this attempts to close it.  If the dialogue is closed, this attempts to open it.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.IsOpened">
            <summary>
            Is this dialogue opened?
            </summary>
            <returns>Whether this dialogue is opened or not.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.IsOpened(System.String)">
            <summary>
            Is this dialogue opened in the given context?
            </summary>
            <param name="dialogComposerName">The composer context.</param>
            <returns>Whether this dialogue was opened or not within the given context.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnBeforeRenderFrame3D(System.Single)">
            <summary>
            This runs before the render.  Local update method.
            </summary>
            <param name="deltaTime">The time that has elapsed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnRenderGUI(System.Single)">
            <summary>
            This runs when the dialogue is ready to render all of the components.
            </summary>
            <param name="deltaTime">The time that has elapsed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnFinalizeFrame(System.Single)">
            <summary>
            This runs when the dialogue is finalizing and cleaning up all of the components.
            </summary>
            <param name="dt">The time that has elapsed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnKeyDown(Vintagestory.API.Client.KeyEvent)">
            <summary>
            Fires when keys are held down.  
            </summary>
            <param name="args">The key or keys that were held down.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnKeyPress(Vintagestory.API.Client.KeyEvent)">
            <summary>
            Fires when the keys are pressed.
            </summary>
            <param name="args">The key or keys that were pressed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnKeyUp(Vintagestory.API.Client.KeyEvent)">
            <summary>
            Fires when the keys are released.
            </summary>
            <param name="args">the key or keys that were released.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnEscapePressed">
            <summary>
            Fires explicitly when the Escape key is pressed and attempts to close the dialogue.
            </summary>
            <returns>Whether the dialogue was closed.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnMouseEnterSlot(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Fires when the mouse enters the given slot.
            </summary>
            <param name="slot">The slot the mouse entered.</param>
            <returns>Whether this event was handled.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnMouseLeaveSlot(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Fires when the mouse leaves the slot.
            </summary>
            <param name="itemSlot">The slot the mouse entered.</param>
            <returns>Whether this event was handled.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnMouseClickSlot(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Fires when the mouse clicks within the slot.
            </summary>
            <param name="itemSlot">The slot that the mouse clicked in.</param>
            <returns>Whether this event was handled.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnMouseDown(Vintagestory.API.Client.MouseEvent)">
            <summary>
            Fires when a mouse button is held down.
            </summary>
            <param name="args">The mouse button or buttons in question.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnMouseUp(Vintagestory.API.Client.MouseEvent)">
            <summary>
            Fires when a mouse button is released.
            </summary>
            <param name="args">The mouse button or buttons in question.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnMouseMove(Vintagestory.API.Client.MouseEvent)">
            <summary>
            Fires when the mouse is moved.
            </summary>
            <param name="args">The mouse movements in question.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.OnMouseWheel(Vintagestory.API.Client.MouseWheelEventArgs)">
            <summary>
            Fires when the mouse wheel is scrolled.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.ShouldReceiveRenderEvents">
            <summary>
            A check for whether the dialogue should recieve Render events.
            </summary>
            <returns>Whether the dialogue is opened or not.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.ShouldReceiveKeyboardEvents">
            <summary>
            A check for whether the dialogue should recieve keyboard events.
            </summary>
            <returns>Whether the dialogue is focused or not.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.ShouldReceiveMouseEvents">
            <summary>
            A check if the dialogue should recieve mouse events.
            </summary>
            <returns>Whether the mouse events should fire.</returns>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.PrefersUngrabbedMouse">
            <summary>
            Gets whether it is preferred for the mouse to be not grabbed while this dialog is opened.
            If true (default), the Alt button needs to be held to manually grab the mouse.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.DisableMouseGrab">
            <summary>
            Gets whether ability to grab the mouse cursor is disabled while
            this dialog is opened. For example, the escape menu. (Default: false)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.CaptureAllInputs">
            <summary>
            Should this dialogue capture all the keyboard events (IE: textbox) except for escape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.Dispose">
            <summary>
            Disposes the Dialogue.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialog.ClearComposers">
            <summary>
            Clears the composers.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialog.ToggleKeyCombinationCode">
            <summary>
            The key combination string that toggles this GUI object.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.GuiDialogBlockEntity">
            <summary>
            Base class for dialogs bound to block entities.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialogBlockEntity.OpenSound">
            <summary>
            Gets the opening sound for the dialog being opened, or null if none.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialogBlockEntity.CloseSound">
            <summary>
            Gets the opening sound for the dialog being opened, or null if none.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialogBlockEntity.FloatyDialogPosition">
            <summary>
            Gets the Y offset of the dialog in-world if floaty GUIs is turned on.
            0.5 is the center of the block and larger means it will float higher up.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialogBlockEntity.FloatyDialogAlign">
            <summary>
            Gets the Y align of the dialog if floaty GUIs is turned on.
            0.5 means the dialog is centered on <see cref="P:Vintagestory.API.Client.GuiDialogBlockEntity.FloatyDialogPosition"/>.
            0 is top-aligned while 1 is bottom-aligned.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.#ctor(System.String,Vintagestory.API.Common.InventoryBase,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Client.ICoreClientAPI)">
            <param name="dialogTitle">The title of this dialogue. Ex: "Chest"</param>
            <param name="inventory">The inventory associated with this block entity.</param>
            <param name="blockEntityPos">The position of this block entity.</param>
            <param name="capi">The Client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.#ctor(System.String,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Client.ICoreClientAPI)">
            <param name="dialogTitle">The title of this dialogue. Ex: "Chest"</param>
            <param name="inventory">The inventory associated with this block entity.</param>
            <param name="blockEntityPos">The position of this block entity.</param>
            <param name="capi">The Client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.OnFinalizeFrame(System.Single)">
            <summary>
            This occurs right before the frame is pushed to the screen.
            </summary>
            <param name="dt">The time elapsed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.OnRenderGUI(System.Single)">
            <summary>
            Render's the object in Orthographic mode.
            </summary>
            <param name="deltaTime">The time elapsed.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.DoSendPacket(System.Object)">
            <summary>
            We tunnel our packet through a block entity packet so the block entity can 
            handle all the network stuff
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.OnNewScrollbarvalue(System.Single)">
            <summary>
            Called whenever the scrollbar or mouse wheel is used.
            </summary>
            <param name="value">The new value of the scrollbar.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.CloseIconPressed">
            <summary>
            Occurs whenever the X icon in the top right corner of the GUI (not the window) is pressed.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.OnGuiOpened">
            <summary>
            Called whenver the GUI is opened.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.TryOpen">
            <summary>
            Attempts to open this gui.
            </summary>
            <returns>Whether the attempt was successful.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.OnGuiClosed">
            <summary>
            Called when the GUI is closed.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogBlockEntity.ReloadValues">
            <summary>
            Reloads the values of the GUI.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.EnumBlockEntityPacketId">
            <summary>
            Packet IDs for block entities.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.GuiDialogBlockEntityInventory">
            <summary>
            A block entity inventory system for things like a campfire, or other things like that.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.GuiDialogGeneric">
            <summary>
            Mainly used for block entity based guis
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.GuiDialogGeneric.DialogTitle">
            <summary>
            The title of the Dialog.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialogGeneric.UnregisterOnClose">
            <summary>
            Should this Dialog de-register itself once closed?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiDialogGeneric.Attributes">
            <summary>
            The tree attributes for this dialog.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogGeneric.#ctor(System.String,Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Constructor for a generic Dialog.
            </summary>
            <param name="DialogTitle">The title of the dialog.</param>
            <param name="capi">The Client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogGeneric.Recompose">
            <summary>
            Recomposes the dialog with it's set of elements.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogGeneric.UnfocusElements">
            <summary>
            Unfocuses the elements in each composer.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogGeneric.FocusElement(System.Int32)">
            <summary>
            Focuses a specific element in the single composer.
            </summary>
            <param name="index">Index of the element.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiDialogGeneric.IsInRangeOfBlock(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Checks if the player is in range of the block.
            </summary>
            <param name="blockEntityPos">The block's position.</param>
            <returns>In range or no?</returns>
        </member>
        <member name="T:Vintagestory.API.Client.GuiJsonDialog">
            <summary>
            This is a dialogue built from JSON files.  
            </summary>
            <remarks>
            JSON made this gui.  Thanks JSON.
            </remarks>
        </member>
        <member name="P:Vintagestory.API.Client.GuiJsonDialog.DebugName">
            <summary>
            The debug name of the GUI
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.GuiJsonDialog.ToggleKeyCombinationCode">
            <summary>
            Key Combination for the GUI
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiJsonDialog.#ctor(Vintagestory.API.Client.JsonDialogSettings,Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Builds the dialogue using the dialogue settings from JSON.
            </summary>
            <param name="settings">The dialogue settings.</param>
            <param name="capi">The Client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiJsonDialog.Recompose">
            <summary>
            Recomposes the GUI.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiJsonDialog.ComposeDialog">
            <summary>
            Composes the dialogue with specifications dictated by JSON.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.GuiJsonDialog.OnMouseDown(Vintagestory.API.Client.MouseEvent)">
            <summary>
            Fires an event when the mouse is held down.
            </summary>
            <param name="args">The mouse events.</param>
        </member>
        <member name="M:Vintagestory.API.Client.GuiJsonDialog.ReloadValues">
            <summary>
            Reloads the values in the GUI.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.HudElement">
            <summary>
            Base class for Hud Elements.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.HudElement.#ctor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Creates a new Hud Element.
            </summary>
            <param name="capi">The Client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.IconUtil.#ctor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Creates a new IconUtil instance.
            </summary>
            <param name="capi">The Client API.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IconUtil.GenTexture(System.Int32,System.Int32,Vintagestory.API.Client.DrawDelegate)">
            <summary>
            Generates the texture.  
            </summary>
            <param name="width">The width of the drawing</param>
            <param name="height">The height of the drawing.</param>
            <param name="drawHandler">A delegate which handles the drawing.</param>
            <returns>The resulting built texture.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IconUtil.DrawIcon(Cairo.Context,System.String,System.Double,System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            Draws the icon.
            </summary>
            <param name="cr">The context.</param>
            <param name="type">The type to draw</param>
            <param name="x">X position of the Icon.</param>
            <param name="y">Y position of the Icon.</param>
            <param name="width">Width of the Icon.</param>
            <param name="height">Height of the Icon.</param>
            <param name="rgba">The color of the icon.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IconUtil.DrawIconInt(Cairo.Context,System.String,System.Int32,System.Int32,System.Single,System.Single,System.Double[])">
            <summary>
            Draws the icon.
            </summary>
            <param name="cr">The context.</param>
            <param name="type">The type of icon to draw</param>
            <param name="x">X position of the Icon.</param>
            <param name="y">Y position of the Icon.</param>
            <param name="width">Width of the Icon.</param>
            <param name="height">Height of the Icon.</param>
            <param name="rgba">The color of the icon.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IconUtil.DrawConnectionQuality(Cairo.Context,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Draws 5 vertical bars of increasing size and Quality amount of them green
            </summary>
            <param name="ctx"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="quality"></param>
            <param name="size"></param>
        </member>
        <member name="F:Vintagestory.API.Client.TextLine.Text">
            <summary>
            The text of the text line.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextLine.Bounds">
            <summary>
            The bounds of the line of text.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextLine.PaddingLeft">
            <summary>
            The padding to the left of the text.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextLine.PaddingRight">
            <summary>
            The padding to the right of the text.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.AutobreakAndDrawMultilineText(Cairo.Context,Vintagestory.API.Client.CairoFont,System.String,System.Double,Vintagestory.API.Client.EnumTextOrientation)">
            <summary>
            Use Matrix transformation to move the draw position
            </summary>
            <param name="ctx">The context of the text.</param>
            <param name="font">The font of the text.</param>
            <param name="text">The text itself.</param>
            <param name="boxWidth">The width of the box containing the text.</param>
            <param name="orientation">The orientation of the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.AutobreakAndDrawMultilineTextAt(Cairo.Context,Vintagestory.API.Client.CairoFont,System.String,System.Double,System.Double,System.Double,Vintagestory.API.Client.EnumTextOrientation)">
            <summary>
            Draws the text with matrix transformations.
            </summary>
            <param name="ctx">The context of the text.</param>
            <param name="font">The font of the text.</param>
            <param name="text">The text itself.</param>
            <param name="posX">The X position of the text.</param>
            <param name="posY">The Y position of the text.</param>
            <param name="boxWidth">The width of the box containing the text.</param>
            <param name="orientation">The orientation of the text.</param>
            <returns>The new height of the text.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.DrawMultilineTextAt(Cairo.Context,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.TextLine[],System.Double,System.Double,System.Double,Vintagestory.API.Client.EnumTextOrientation)">
            <summary>
            Draws the text with pre-set breaks.
            </summary>
            <param name="ctx">The context of the text.</param>
            <param name="font">The font of the text.</param>
            <param name="lines">The lines of text.</param>
            <param name="posX">The X position of the text.</param>
            <param name="posY">The Y position of the text.</param>
            <param name="boxWidth">The width of the box containing the text.</param>
            <param name="orientation">The orientation of the text.</param>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.GetLineHeight(Vintagestory.API.Client.CairoFont)">
            <summary>
            Gets the height of the font to calculate the height of the line.
            </summary>
            <param name="font">The font to calculate from.</param>
            <returns>The height of the line.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.GetQuantityTextLines(Vintagestory.API.Client.CairoFont,System.String,Vintagestory.API.Client.TextFlowPath[],System.Double)">
            <summary>
            Gets the number of lines of text.
            </summary>
            <param name="font">The font of the text.</param>
            <param name="text">The text itself.</param>
            <param name="flowPath">The path for the text.</param>
            <param name="lineY">The height of the line</param>
            <returns>The number of lines.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.GetMultilineTextHeight(Vintagestory.API.Client.CairoFont,System.String,Vintagestory.API.Client.TextFlowPath[],System.Double)">
            <summary>
            Get the final height of the text.
            </summary>
            <param name="font">The font of the text.</param>
            <param name="text">The text itself.</param>
            <param name="flowPath">The path for the text.</param>
            <param name="lineY">The height of the line</param>
            <returns>The final height of the text.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.Lineize(Vintagestory.API.Client.CairoFont,System.String,Vintagestory.API.Client.TextFlowPath[],System.Double,System.Double)">
            <summary>
            Turns the supplied text into line of text constrained by supplied flow path and starting at supplied start coordinates
            </summary>
            <param name="font">The font of the text.</param>
            <param name="fulltext">The text of the lines.</param>
            <param name="flowPath">The flow direction of text.</param>
            <param name="startOffsetX">The offset start position for X</param>
            <param name="startY">The offset start position for Y</param>
            <returns>The text broken up into lines.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.Lineize(Cairo.Context,System.String,Vintagestory.API.Client.TextFlowPath[],System.Double,System.Double,System.Double)">
            <summary>
            Turns the supplied text into line of text constrained by supplied flow path and starting at supplied start coordinates
            </summary>
            <param name="ctx">Contexts of the GUI.</param>
            <param name="text">The text to be split</param>
            <param name="flowPath">Sets the general flow of text.</param>
            <param name="startOffsetX">The offset start position for X</param>
            <param name="startY">The offset start position for Y</param>
            <returns>The text broken up into lines.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.DrawMultilineText(Cairo.Context,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.TextLine[],Vintagestory.API.Client.EnumTextOrientation)">
            <summary>
            lineX is set to 0 after the second line, lineY is advanced by line height for each line
            </summary>
            <param name="ctx">The context of the text.</param>
            <param name="lines">The preformatted lines of the text.</param>
            <param name="font">The font of the text</param>
            <param name="orientation">The orientation of text (Default: Left)</param>
        </member>
        <member name="M:Vintagestory.API.Client.TextDrawUtil.DrawTextLine(Cairo.Context,Vintagestory.API.Client.CairoFont,System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            Draws a line of text on the screen.
            </summary>
            <param name="ctx">The context of the text.</param>
            <param name="font">The font of the text.</param>
            <param name="text">The text to draw.</param>
            <param name="offsetX">The X offset for the text start position. (Default: 0)</param>
            <param name="offsetY">The Y offset for the text start position. (Default: 0)</param>
            <param name="textPathMode">Whether or not to use TextPathMode.</param>
        </member>
        <member name="M:Vintagestory.API.Client.TextTextureUtil.#ctor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Text Texture Util constructor.
            </summary>
            <param name="capi">The Client API.</param>
        </member>
        <member name="M:Vintagestory.API.Client.TextTextureUtil.GenTextTexture(System.String,Vintagestory.API.Client.CairoFont,System.Int32,System.Int32,Vintagestory.API.Client.TextBackground,Vintagestory.API.Client.EnumTextOrientation,System.Boolean)">
            <summary>
            Takes a string of text and applies a texture to it.
            </summary>
            <param name="text">The text to texture.</param>
            <param name="font">The font of the text.</param>
            <param name="width">The width of the text.</param>
            <param name="height">The height of the text.</param>
            <param name="background">The background of the text. (default: none/null)</param>
            <param name="orientation">The orientation of the text. (default: left)</param>
            <returns>The texturized text.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextTextureUtil.GenOrUpdateTextTexture(System.String,Vintagestory.API.Client.CairoFont,System.Int32,System.Int32,Vintagestory.API.Client.LoadedTexture@,Vintagestory.API.Client.TextBackground,Vintagestory.API.Client.EnumTextOrientation,System.Boolean)">
            <summary>
            Takes a texture and applies some text to it.
            </summary>
            <param name="text">The text to texture.</param>
            <param name="font">The font of the text.</param>
            <param name="width">The width of the text.</param>
            <param name="height">The height of the text.</param>
            <param name="loadedTexture">The texture to be loaded on to.</param>
            <param name="background">The background of the text. (default: none/null)</param>
            <param name="orientation">The orientation of the text. (default: left)</param>
        </member>
        <member name="M:Vintagestory.API.Client.TextTextureUtil.GenTextTexture(System.String,Vintagestory.API.Client.CairoFont,System.Int32,System.Int32,Vintagestory.API.Client.TextBackground)">
            <summary>
            Takes a string of text and applies a texture to it.
            </summary>
            <param name="text">The text to texture.</param>
            <param name="font">The font of the text.</param>
            <param name="width">The width of the text.</param>
            <param name="height">The height of the text.</param>
            <param name="background">The background of the text. (default: none/null)</param>
            <returns>The texturized text.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextTextureUtil.GenTextTexture(System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.TextBackground)">
            <summary>
            Takes a string of text and applies a texture to it.
            </summary>
            <param name="text">The text to texture.</param>
            <param name="font">The font of the text.</param>
            <param name="background">The background of the text. (default: none/null)</param>
            <returns>The texturized text.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextTextureUtil.GenOrUpdateTextTexture(System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.LoadedTexture@,Vintagestory.API.Client.TextBackground)">
            <summary>
            Takes a texture and applies some text to it.
            </summary>
            <param name="text">The text to texture.</param>
            <param name="font">The font of the text.</param>
            <param name="loadedTexture">The texture to be loaded on to.</param>
            <param name="background">The background of the text. (default: none/null)</param>
        </member>
        <member name="M:Vintagestory.API.Client.TextTextureUtil.GenUnscaledTextTexture(System.String,Vintagestory.API.Client.CairoFont,Vintagestory.API.Client.TextBackground)">
            <summary>
            Generates an unscaled text texture.
            </summary>
            <param name="text">The text to texture.</param>
            <param name="font">The font of the text.</param>
            <param name="background">The background of the text (Default: none/null)</param>
            <returns>The loaded unscaled texture.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.TextTextureUtil.GenTextTexture(System.String,Vintagestory.API.Client.CairoFont,System.Int32,Vintagestory.API.Client.TextBackground,Vintagestory.API.Client.EnumTextOrientation)">
            <summary>
            Takes a string of text and applies a texture to it.
            </summary>
            <param name="text">The text to texture.</param>
            <param name="font">The font of the text.</param>
            <param name="maxWidth">The maximum width of the text.</param>
            <param name="background">The background of the text. (default: none/null)</param>
            <param name="orientation">The orientation of the text. (default: left)</param>
            <returns>The texturized text.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IMeshPoolSupplier.GetMeshPoolForPass(Vintagestory.API.Client.EnumChunkRenderPass,System.Int32)">
            <summary>
            Gets a mesh pool supplier for the given render pass.
            </summary>
            <param name="forRenderPass">The given render pass.</param>
            <param name="lodLevel"></param>
            <returns>The mesh data for the render pass.</returns>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.Tex2D">
            <summary>
            The texture 2D for this mesh.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.ShadowMapNear2D">
            <summary>
            The shadowmap ID for nearby shadows.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.ShadowMapFar2D">
            <summary>
            The shadowmap ID for far away shadows.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.ZNear">
            <summary>
            The Near plane distance.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.ZFar">
            <summary>
            The far plane distance.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.AlphaTest">
            <summary>
            The shader will discard things below this threshold.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.RgbaAmbientIn">
            <summary>
            The color of the ambient light source.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.RgbaLightIn">
            <summary>
            The color of the general light.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.RgbaGlowIn">
            <summary>
            The color of the glow light.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.RgbaFogIn">
            <summary>
            The color of the fog.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.RgbaTint">
            <summary>
            The color of the tint.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.FogMinIn">
            <summary>
            The minimum distance for fog.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.FogDensityIn">
            <summary>
            The density level of the fog.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.ProjectionMatrix">
            <summary>
            The projection matrix.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.ModelMatrix">
            <summary>
            The model Matrix.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.ViewMatrix">
            <summary>
            The view matrix.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.ToShadowMapSpaceMatrixFar">
            <summary>
            The matrix for converting the vertex position from world space to far shadow space as supplied by IRenderAPI.CurrentShadowProjectionMatrix.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.ToShadowMapSpaceMatrixNear">
            <summary>
            The matrix for converting the vertex position from world space to near shadow space as supplied by IRenderAPI.CurrentShadowProjectionMatrix.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.WaterWaveCounter">
            <summary>
            Required for water waving meshes.  Supplied the water counter as supplied as IRenderAPI.WaterWaveCounter.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IStandardShaderProgram.DontWarpVertices">
            <summary>
            The position of the player.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.JsonDialogSettings.OnSet">
            <summary>
            Called whenever the value of a input field has changed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.JsonDialogSettings.OnGet">
            <summary>
            Called when the dialog is opened the first time or when dialog.ReloadValues() is called. Should return the values the input fields should be set to
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.JsonDialogSettings.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Writes the content to the writer.
            </summary>
            <param name="writer">The writer to fill with data.</param>
        </member>
        <member name="M:Vintagestory.API.Client.JsonDialogSettings.FromBytes(System.IO.BinaryReader)">
            <summary>
            Reads the content to the dialog.
            </summary>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="F:Vintagestory.API.Client.DialogElement.Param">
            <summary>
            To hold generic data
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.EnumDialogArea">
            <summary>
            First word = X Alignment (left, center, right or fixed)
            Second word = Y Alignment (top, middle, bottom or fixed)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.BlockChangedDelegate">
            <summary>
            OldBlock param may be null!
            </summary>
            <param name="pos"></param>
            <param name="oldBlock"></param>
        </member>
        <member name="T:Vintagestory.API.Client.ContinousParticleSpawnTaskDelegate">
            <summary>
            Return false to stop spawning particles
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.IClientEventAPI">
            <summary>
            Contains some client specific events you can hook into
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.ChatMessage">
            <summary>
            Called when a chat message was received
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.OnSendChatMessage">
            <summary>
            Called before a chat message is sent to the server
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.PlayerJoin">
            <summary>
            Called when a player joins. The Entity of the player might be null if out of range!
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.PlayerLeave">
            <summary>
            Called whenever a player disconnects (timeout, leave, disconnect, kick, etc.). The Entity of the player might be null if out of range!
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.IsPlayerReady">
            <summary>
            Fired when a player is ready to join but awaits any potential mod-user interaction, such as a character selection screen
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.PlayerEntitySpawn">
            <summary>
            Called when a players entity got in range
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.PlayerEntityDespawn">
            <summary>
            Called whenever a players got out of range
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.PauseResume">
            <summary>
            When the game was paused/resumed (only in single player)
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.LeaveWorld">
            <summary>
            When the player wants to leave the world to go back to the main menu
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.LeftWorld">
            <summary>
            When the player left the world to go back to the main menu
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.BlockChanged">
            <summary>
            When a player block has been modified. OldBlock param may be null!
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.BeforeActiveSlotChanged">
            <summary>
            Fired before a player changes their active slot (such as selected hotbar slot).
            Allows for the event to be cancelled depending on the return value.
            Note: Not called when the server forcefully changes active slot.
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.AfterActiveSlotChanged">
            <summary>
            Fired after a player changes their active slot (such as selected hotbar slot).
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.InGameError">
            <summary>
            Fired when somethign fires an ingame error
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.InGameDiscovery">
            <summary>
            Fired when somethign fires an ingame error
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.RegisterRenderer(Vintagestory.API.Client.IRenderer,Vintagestory.API.Client.EnumRenderStage,System.String)">
            <summary>
            Registers a rendering handler to be called during every render frame
            </summary>
            <param name="renderer"></param>
            <param name="renderStage"></param>
            <param name="profilingName">If set, the frame profile will record the frame cost for this renderer</param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.UnregisterRenderer(Vintagestory.API.Client.IRenderer,Vintagestory.API.Client.EnumRenderStage)">
            <summary>
            Removes a previously registered rendering handler.
            </summary>
            <param name="renderer"></param>
            <param name="renderStage"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientEventAPI.RegisterAsyncParticleSpawner(Vintagestory.API.Client.ContinousParticleSpawnTaskDelegate)">
            <summary>
            Set up an asynchronous particle spawner. The async particle simulation does most of the work in a seperate thread and thus runs a lot faster, with the down side of not being exaclty in sync with player interactions. This method of spawning particles is best suited for ambient particles, such as rain fall.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.BlockTexturesLoaded">
            <summary>
            Called when server assetes were received and all texture atlases have been created
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Vintagestory.API.Client.IClientEventAPI.ReloadShader" -->
        <member name="E:Vintagestory.API.Client.IClientEventAPI.ReloadTextures">
            <summary>
            Called when textures got reloaded
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.LevelFinalize">
            <summary>
            Called when the client received the level finalize packet from the server
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.ReloadShapes">
            <summary>
            Called when shapes got reloaded
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.MouseDown">
            <summary>
            Provides low level access to the mouse down event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.MouseUp">
            <summary>
            Provides low level access to the mouse up event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.MouseMove">
            <summary>
            Provides low level access to the mouse move event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.KeyDown">
            <summary>
            Provides low level access to the key down event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <member name="E:Vintagestory.API.Client.IClientEventAPI.KeyUp">
            <summary>
            Provides low level access to the key up event. If e.Handled is set to true, the event will not be handled by the game
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:Vintagestory.API.Client.IClientEventAPI.FileDrop" -->
        <member name="T:Vintagestory.API.Client.EnumChannelState">
            <summary>
            The state of a network channel
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChannelState.NotFound">
            <summary>
            No such channel was registered
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChannelState.Registered">
            <summary>
            This channel has been registered but he server did not send the server channel information yet
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChannelState.Connected">
            <summary>
            This channel has been registered client and server side. It is ready to send and receive messages
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChannelState.NotConnected">
            <summary>
            This channel has been registered only client side. You cannot send data on this channel
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.IClientNetworkAPI">
            <summary>
            API Features to set up a network channel for custom server&lt;-&gt;client data exchange. Client side.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.RegisterChannel(System.String)">
            <summary>   
            Supplies you with your very own and personal network channel with which you can send packets to the server. Use the same channelName on the client and server to have them link up.
            </summary>
            <param name="channelName">Unique channel identifier</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.GetChannel(System.String)">
            <summary>
            Returns a previoulsy registered channeled, null otherwise
            </summary>
            <param name="channelName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.GetChannelState(System.String)">
            <summary>
            Check in what state a channel currently is in
            </summary>
            <param name="channelName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendBlockEntityPacket(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Sends a blockentity interaction packet to the server. For quick an easy blockentity network communication without setting up a channel first.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendEntityPacket(System.Int64,System.Int32,System.Byte[])">
            <summary>
            Sends a entity interaction packet to the server. For quick an easy entity network communication without setting up a channel first.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendBlockEntityPacket(System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Sends a blockentity interaction packet to the server. For quick an easy blockentity network communication without setting up a channel first.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="internalPacket"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendEntityPacket(System.Int64,System.Object)">
            <summary>
            Sends a entity interaction packet to the server. For quick an easy entity network communication without setting up a channel first.
            </summary>
            <param name="entityid"></param>
            <param name="internalPacket"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendArbitraryPacket(System.Byte[])">
            <summary>
            Sends given packet data to the server. This let's you mess with the raw network communication and fiddle with internal engine packets if you know the protocol. For normal network communication you probably want to register your own network channel.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendPacketClient(System.Object)">
            <summary>
            Sends given packet to server. For use with inventory supplied network packets only, since the packet format is not exposed to the api 
            </summary>
            <param name="packetClient">The network packet to send.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendHandInteraction(System.Int32,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandInteract,System.Int32,System.Boolean,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            Sends the current hand interaction.  
            </summary>
            <param name="mouseButton">the current mouse button press</param>
            <param name="blockSelection">the currently selected Block (if there is one)</param>
            <param name="entitySelection">the currently selected Entity (if there is one)</param>
            <param name="beforeUseType"></param>
            <param name="state">The state of the hand.</param>
            <param name="firstEvent">Is it the first of this events for this block? (by default the client calls the interaction every second while the player holds down the right mouse button)</param>
            <param name="cancelReason">The reason we cancelled the use of an item (if there is  one)</param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkAPI.SendPlayerNowReady">
            <summary>
            If any mod denies the client event IsPlayerReady, then it has to call this method once to indicate that the player is now ready to play (which switches the server side client state from Connected to Playing)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.INetworkChannel.ChannelName">
            <summary>
            The channel name this channel was registered with
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.INetworkChannel.RegisterMessageType(System.Type)">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Vintagestory.API.Client.INetworkChannel.RegisterMessageType``1">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.NetworkServerMessageHandler`1">
            <summary>
            Handler for processing a message
            </summary>
            <param name="networkMessage"></param>
        </member>
        <member name="T:Vintagestory.API.Client.IClientNetworkChannel">
            <summary>
            Represent a custom network channel for sending messages between client and server
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientNetworkChannel.Connected">
            <summary>
            True if the server is listening on this channel
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkChannel.RegisterMessageType(System.Type)">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkChannel.RegisterMessageType``1">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkChannel.SetMessageHandler``1(Vintagestory.API.Client.NetworkServerMessageHandler{``0})">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientNetworkChannel.SendPacket``1(``0)">
            <summary>
            Sends a packet to the server
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Vintagestory.API.Client.IClientPlayer">
            <summary>
            A client side player
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientPlayer.CameraYaw">
            <summary>
            The cameras current yaw
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientPlayer.CameraPitch">
            <summary>
            The cameras current pitch
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientPlayer.CameraMode">
            <summary>
            The players current camera mode
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientPlayer.ShowChatNotification(System.String)">
            <summary>
            Writes given message to the players current chat group but doesn't send it to the server
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientPlayer.TriggerFpAnimation(Vintagestory.API.Common.EnumHandInteract)">
            <summary>
            Tells the engine to run a first person animtion
            </summary>
            <param name="anim"></param>
        </member>
        <member name="T:Vintagestory.API.Client.ICoreClientAPI">
            <summary>
            The core api implemented by the client. The main interface for accessing the client. Contains all sub components and some miscellaneous methods.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.LinkProtocols">
            <summary>
            Add your own link protocol here if you want to implement a custom protocol. E.g. image://url-to-picture
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.TagConverters">
            <summary>
            Add your own rich text elements here. Your will need to convert a VTML tag into a RichTextComponentBase element. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Settings">
            <summary>
            The clients game settings as stored in the clientsettings.json
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Forms">
            <summary>
            Platform independent ui methods and features. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.MacroManager">
            <summary>
            Api to the client side macros system
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.ElapsedMilliseconds">
            <summary>
            Amount of milliseconds ellapsed since client startup
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.InWorldEllapsedMilliseconds">
            <summary>
            Amount of milliseconds ellapsed while in a running game that is not paused
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.IsShuttingDown">
            <summary>
            True if the client is currently in the process of exiting
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.IsGamePaused">
            <summary>
            True if the game is currently paused (only available in singleplayer)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.IsSinglePlayer">
            <summary>
            True if this is a singleplayer session
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.HideGuis">
            <summary>
            If true, the player is in gui-less mode (through the F4 key)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.PlayerReadyFired">
            <summary>
            True if all SendPlayerNowReady() was sent, signalling the player is now ready (called by the character selector upon submit)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Ambient">
            <summary>
            API Component to control the clients ambient values
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Event">
            <summary>
            API Component for registering to various Events
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Render">
            <summary>
            API for Rendering stuff onto the screen using OpenGL
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Gui">
            <summary>
            API for GUI Related methods
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Input">
            <summary>
            API for Mouse / Keyboard input related things
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.TesselatorManager">
            <summary>
            Holds the default meshes of all blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Tesselator">
            <summary>
            API for Meshing in the Mainthread. Thread safe.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.BlockTextureAtlas">
            <summary>
            API for the Block Texture Atlas
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.ItemTextureAtlas">
            <summary>
            API for the Item Texture Atlas
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.EntityTextureAtlas">
            <summary>
            API for the Entity Texture Atlas
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Shader">
            <summary>
            API for Rendering stuff onto the screen using OpenGL
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.Network">
            <summary>
            API for doing sending/receiving network packets
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.World">
            <summary>
            API for accessing anything in the game world
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.OpenedGuis">
            <summary>
            Active GUI objects.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.RegisterCommand(Vintagestory.API.Common.ClientChatCommand)">
            <summary>
            Registers a chat command
            </summary>
            <param name="chatcommand"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.RegisterCommand(System.String,System.String,System.String,Vintagestory.API.Common.ClientChatCommandDelegate)">
            <summary>
            Registers a chat command
            </summary>
            <param name="command"></param>
            <param name="descriptionMsg"></param>
            <param name="syntaxMsg"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.RegisterEntityRendererClass(System.String,System.Type)">
            <summary>
            Registers an entity renderer for given entity
            </summary>
            <param name="className"></param>
            <param name="rendererType"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.RegisterLinkProtocol(System.String,Vintagestory.API.Common.Action{Vintagestory.API.Client.LinkTextComponent})">
            <summary>
            Register a link protocol handler
            </summary>
            <param name="protocolname"></param>
            <param name="onLinkClicked"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.ShowChatMessage(System.String)">
            <summary>
            Shows a client side only chat message in the current chat channel. Uses the same code paths a server => client message takes. Does not execute client commands.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.TriggerIngameDiscovery(System.Object,System.String,System.String)">
            <summary>
            Triggers a discovery event. HudDiscoveryMessage registers to this event and fades in/out a "discovery message" on the players screen
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.TriggerIngameError(System.Object,System.String,System.String)">
            <summary>
            Triggers an in-game-error event. HudIngameError registers to this event and shows a vibrating red text on the players screen
            </summary>
            <param name="sender"></param>
            <param name="errorCode"></param>
            <param name="text"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.TriggerChatMessage(System.String)">
            <summary>
            Same as <see cref="M:Vintagestory.API.Client.ICoreClientAPI.ShowChatMessage(System.String)"/> but will also execute client commands if they are prefixed with a dot.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.SendChatMessage(System.String,System.Int32,System.String)">
            <summary>
            Sends a chat message to the server
            </summary>
            <param name="message"></param>
            <param name="groupId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.SendChatMessage(System.String,System.String)">
            <summary>
            Sends a chat message to the server in the players currently active channel
            </summary>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ICoreClientAPI.StartTrack(Vintagestory.API.Common.AssetLocation,System.Single,Vintagestory.API.Client.EnumSoundType,Vintagestory.API.Common.Action{Vintagestory.API.Client.ILoadedSound})">
            <summary>
            Tells the music engine to load and immediately start given track once loaded, if the priority is higher than the currently playing track. May also be stopped while playing if another track with a higher priority is started.
            If you supply an onLoaded method the track is not started immediately and you can manually start it at any given time by calling sound.Start()
            </summary>
            <param name="soundLocation"></param>
            <param name="priority"></param>
            <param name="soundType"></param>
            <param name="onLoaded"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.ICoreClientAPI.CurrentMusicTrack">
            <summary>
            Returns the currently playing music track, if any is playing
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.ITesselatorManager">
            <summary>
            Manager interface for Tesselators.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorManager.GetDefaultBlockMesh(Vintagestory.API.Common.Block)">
            <summary>
            Returns the default block mesh that being used by the engine when tesselating a chunk. The alternate and inventory versions are seperate.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorManager.GetDefaultBlockMeshRef(Vintagestory.API.Common.Block)">
            <summary>
            Returns the default block mesh ref that being used by the engine when rendering a block in the inventory. The alternate and inventory versions are seperate.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorManager.GetDefaultItemMeshRef(Vintagestory.API.Common.Item)">
            <summary>
            Returns the default block mesh ref that being used by the engine when rendering an item in the inventory. The alternate and inventory versions are seperate.
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.ITesselatorAPI">
            <summary>
            Interface that allows custom model model meshing for items, blocks and entities
            Texturing crash course:
            1. Block, Item and Entity textures are loaded from json files in the form of a CompositeTexture instance
            2. After connecting to a game server, the client inserts all of these textures into their type-respective texture atlasses
            3. After insertion a "texture sub-id" is left behind in the CompositeTexture.Baked Property
            4. You can now find the position of the texture inside the atlas through the Block/Item/Entity-TextureAtlasPositions arrays (teturesubid is the array key)
            
            Shape Tesselation crash course:
            1. Block and Item shapes are loaded from json files in the form of a CompositeShape instance
            2. A CompositeShape instance hold some block/item specific information as well as an identifier to a Shape instance
            4. After connecting to a game server, the client loads all shapes from the shape folder then finds each blocks/items shape by its shape identifier 
            5. Result is a MeshData instance that holds all vertices, UV coords, colors and etc. for each block
            6. That meshdata instance is 
               a) Held as-is in memory for using during chunk tesselation (you can get a reference to it through getDefaultBlockMesh())
               b) "Compiled" to a Model for use during rendering in the gui. 
                  Model Compilation means all it's mesh data is uploaded onto the graphcis through a VAO and a ModelRef instance is left behind which
                  can be used by the RenderAPI to render it.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateBlock(Vintagestory.API.Common.Block,Vintagestory.API.Client.MeshData@)">
            <summary>
            Tesselates a block for you using given blocks shape and texture configuration
            </summary>
            <param name="block"></param>
            <param name="modeldata"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateItem(Vintagestory.API.Common.Item,Vintagestory.API.Client.MeshData@)">
            <summary>
            Tesselates an item for you using given items shape and texture configuration
            </summary>
            <param name="item"></param>
            <param name="modeldata"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateItem(Vintagestory.API.Common.Item,Vintagestory.API.Common.CompositeShape,Vintagestory.API.Client.MeshData@)">
            <summary>
            Tesselates an item for you using given items shape and texture configuration
            </summary>
            <param name="item"></param>
            <param name="forShape"></param>
            <param name="modeldata"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateItem(Vintagestory.API.Common.Item,Vintagestory.API.Client.MeshData@,Vintagestory.API.Client.ITexPositionSource)">
            <summary>
            Tesselates an item for you using the items shape and your own defined texture configuration. You need to implement the ITextureSource yourself.
            </summary>
            <param name="item"></param>
            <param name="modeldata"></param>
            <param name="texSource"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateShape(Vintagestory.API.Common.CollectibleObject,Vintagestory.API.Common.Shape,Vintagestory.API.Client.MeshData@,Vintagestory.API.MathTools.Vec3f,System.Nullable{System.Int32},System.String[])">
            <summary>
            Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Uses the given collectible texture configuration as texture source.
            </summary>
            <param name="textureSourceCollectible"></param>
            <param name="shape"></param>
            <param name="modeldata"></param>
            <param name="meshRotationDeg"></param>
            <param name="quantityElements"></param>
            <param name="selectiveElements"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateShape(System.String,Vintagestory.API.Common.Shape,Vintagestory.API.Client.MeshData@,Vintagestory.API.Client.ITexPositionSource,Vintagestory.API.MathTools.Vec3f,System.Int32,System.Byte,System.Byte,System.Nullable{System.Int32},System.String[])">
            <summary>
            Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Can be used to supply a custom texture source. 
            </summary>
            <param name="typeForLogging"></param>
            <param name="shapeBase"></param>
            <param name="modeldata"></param>
            <param name="texSource"></param>
            <param name="meshRotationDeg"></param>
            <param name="generalGlowLevel"></param>
            <param name="generalTintIndex"></param>
            <param name="quantityElements"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.TesselateShapeWithJointIds(System.String,Vintagestory.API.Common.Shape,Vintagestory.API.Client.MeshData@,Vintagestory.API.Client.ITexPositionSource,Vintagestory.API.MathTools.Vec3f,System.Nullable{System.Int32},System.String[])">
            <summary>
            Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Can be used to supply a custom texture source. Will add a customints array to the meshdata that holds each elements JointId for all its vertices (you will have to manually set the jointid for each element though)
            </summary>
            <param name="typeForLogging"></param>
            <param name="shapeBase"></param>
            <param name="modeldata"></param>
            <param name="texSource"></param>
            <param name="rotation"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.VoxelizeTexture(Vintagestory.API.Client.CompositeTexture,Vintagestory.API.MathTools.Size2i,Vintagestory.API.Client.TextureAtlasPosition)">
            <summary>
            A helper method that turns a flat texture into its 1-voxel thick voxelized form
            </summary>
            <param name="texture"></param>
            <param name="atlasSize"></param>
            <param name="atlasPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.VoxelizeTexture(System.Int32[],System.Int32,System.Int32,Vintagestory.API.MathTools.Size2i,Vintagestory.API.Client.TextureAtlasPosition)">
            <summary>
            A helper method that turns a flat texture into its 1-voxel thick voxelized form
            </summary>
            <param name="texturePixels"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="atlasSize"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.GetTexSource(Vintagestory.API.Common.Block,System.Int32,System.Boolean)">
            <summary>
            Returns the texture source from given block. This can be used to obtain the positions of the textures in the block texture atlas.
            </summary>
            <param name="block"></param>
            <param name="altTextureNumber"></param>
            <param name="returnNullWhenMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.GetTextureSource(Vintagestory.API.Common.Item,System.Boolean)">
            <summary>
            Returns the texture source from given item. This can be used to obtain the positions of the textures in the item texture atlas.
            </summary>
            <param name="item"></param>
            <param name="returnNullWhenMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITesselatorAPI.GetTextureSource(Vintagestory.API.Common.Entities.Entity,System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Client.CompositeTexture},System.Int32,System.Boolean)">
            <summary>
            Returns the texture source from given entity. This can be used to obtain the positions of the textures in the entity texture atlas.
            </summary>
            <param name="entity"></param>
            <param name="extraTextures"></param>
            <param name="altTextureNumber"></param>
            <param name="returnNullWhenMissing"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.IRenderAPI">
            <summary>
            The main api component to assist you in rendering pretty stuff onto the screen
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FrameBuffers">
            <summary>
            List of all loaded frame buffers. To get the god rays frame buffer for exampple, do <code>Framebuffers[(int)EnumFrameBuffer.GodRays]</code>
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.ShaderUniforms">
            <summary>
            A number of default shader uniforms
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CameraOffset">
            <summary>
            Can be used to offset the position of the player camera
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentRenderStage">
            <summary>
            The render stage the engine is currently at
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.PerspectiveViewMat">
            <summary>
            The default view matrix used during perspective rendering. Is refreshed before EnumRenderStage.Opaque. Useful for doing projections in the Ortho stage via MatrixToolsd.Project()
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.PerspectiveProjectionMat">
            <summary>
            The default projection matrix used during perspective rendering. Is refreshed before EnumRenderStage.Opaque. Useful for doing projections in the Ortho stage via MatrixToolsd.Project()
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.DecorativeFontName">
            <summary>
            The name of the font used during this render (if it exists).
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.StandardFontName">
            <summary>
            The standard font used during this render (if it exists).
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FrameWidth">
            <summary>
            Width of the primary render framebuffer
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FrameHeight">
            <summary>
            Height of the primary render framebuffer
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CameraType">
            <summary>
            The camera type.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.MvMatrix">
            <summary>
            The current modelview matrix stack
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.PMatrix">
            <summary>
            The current projection matrix stack
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetItemStackRenderInfo(Vintagestory.API.Common.ItemStack,Vintagestory.API.Client.EnumItemRenderTarget)">
            <summary>
            Returns you a render info object of given item stack. Can be used to render held items onto a creature.
            </summary>
            <param name="itemstack"></param>
            <param name="ground"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetItemStackRenderInfo(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Client.EnumItemRenderTarget)">
            <summary>
            Returns you a render info object of given item stack. Can be used to render held items onto a creature.
            </summary>
            <param name="inSlot"></param>
            <param name="ground"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlGetError">
            <summary>
            Returns null if no OpenGL Error happened, otherwise one of the official opengl error codes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.CheckGlError(System.String)">
            <summary>
            If opengl debug mode is enabled and an opengl error is found this method will throw an exception. 
            It is recommended to use this methods in a few spots during render code to track down rendering issues in time.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlMatrixModeModelView">
            <summary>
            The current model view.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlPushMatrix">
            <summary>
            Pushes a copy of the current matrix onto the games matrix stack
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlPopMatrix">
            <summary>
            Pops the top most matrix from the games matrix stack
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlLoadMatrix(System.Double[])">
            <summary>
            Replaces the top most matrix with given one
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlTranslate(System.Single,System.Single,System.Single)">
            <summary>
            Translates top most matrix in the games matrix stack
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlTranslate(System.Double,System.Double,System.Double)">
            <summary>
            Translates top most matrix in the games matrix stack
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlScale(System.Single,System.Single,System.Single)">
            <summary>
            Scales top most matrix in the games matrix stack
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlRotate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Rotates top most matrix in the games matrix stack
            </summary>
            <param name="angle"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlEnableCullFace">
            <summary>
            Enables the Culling faces.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlDisableCullFace">
            <summary>
            Disables the culling faces.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GLEnableDepthTest">
            <summary>
            Enables the Depth Test.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GLDisableDepthTest">
            <summary>
            Disables the Depth Test.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GLDepthMask(System.Boolean)">
            <summary>
            Toggle writing to the depth buffer
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlGenerateTex2DMipmaps">
            <summary>
            Regenerates the mip maps for the currently bound texture
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlToggleBlend(System.Boolean,Vintagestory.API.Client.EnumBlendMode)">
            <summary>
            To enable/disable various blending modes
            </summary>
            <param name="blend"></param>
            <param name="blendMode"></param>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentModelviewMatrix">
            <summary>
            The current top most matrix in the model view matrix stack. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CameraMatrixOrigin">
            <summary>
            Player camera matrix with player positioned at 0,0,0.
            You can use this matrix instead of <see cref="P:Vintagestory.API.Client.IRenderAPI.CurrentModelviewMatrix"/> for high precision rendering.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CameraMatrixOriginf">
            <summary>
            Player camera matrix with player positioned at 0,0,0.
            You can use this matrix instead of <see cref="P:Vintagestory.API.Client.IRenderAPI.CurrentModelviewMatrix"/> for high precision rendering.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentProjectionMatrix">
            <summary>
            The current top most matrix in the projection matrix stack
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentShadowProjectionMatrix">
            <summary>
            The current projection matrix for shadow rendering (renders the scene from the viewpoint of the sun)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.PushScissor(Vintagestory.API.Client.ElementBounds,System.Boolean)">
            <summary>
            Convenience method for GlScissor(). Tells the graphics card to not render anything outside supplied bounds. Can be turned of again with PopScissor(). Any previously applied scissor will be restored after calling PopScissor().
            </summary>
            <param name="bounds"></param>
            <param name="stacking">If true, also applies scissoring from the previous call to PushScissor, otherwise replaces the scissor bounds</param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.PopScissor">
            <summary>
            End scissor mode. Disable any previously set render constraints
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tells the graphics card to not render anything outside supplied bounds. Only sets the boundaries. Can be turned on/off with GlScissorFlag(true/false)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlScissorFlag(System.Boolean)">
            <summary>
            Whether scissor mode should be active or not
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.BitmapCreateFromPng(System.Byte[])">
            <summary>
            Creates a bitmap from a given PNG.
            </summary>
            <param name="pngdata">the PNG data passed in.</param>
            <returns>A bitmap object.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.LoadTextureFromBgra(System.Int32[],System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Loads texture from Pixels in BGRA format.
            </summary>
            <param name="bgraPixels">The pixel array</param>
            <param name="width">the width of the final texture</param>
            <param name="height">the height of the final texture</param>
            <param name="linearMag">Enable/Disable Linear rendering or use Nearest rendering.</param>
            <param name="clampMode">The current clamp mode</param>
            <returns>The GLID for the resulting texture.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.LoadTextureFromRgba(System.Int32[],System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Loads texture from Pixels in RGBA format.
            </summary>
            <param name="rgbaPixels">The pixel array</param>
            <param name="width">the width of the final texture</param>
            <param name="height">the height of the final texture</param>
            <param name="linearMag">Enable/Disable Linear rendering or use Nearest rendering.</param>
            <param name="clampMode">The current clamp mode</param>
            <returns>The OpenGL Identifier for the resulting texture.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.LoadOrUpdateTextureFromBgra(System.Int32[],System.Boolean,System.Int32,Vintagestory.API.Client.LoadedTexture@)">
            <summary>
            Loads texture from Pixels in BGRA format.
            </summary>
            <param name="bgraPixels">The pixel array</param>
            <param name="linearMag">Enable/Disable Linear rendering or use Nearest rendering.</param>
            <param name="clampMode">The current clamp mode</param>
            <param name="intoTexture">The target texture space it should load the pixels into. Must have width/height set accordingly. Will set the opengl textureid upon successful load</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.LoadOrUpdateTextureFromRgba(System.Int32[],System.Boolean,System.Int32,Vintagestory.API.Client.LoadedTexture@)">
            <summary>
            Loads texture from Pixels in RGBA format.
            </summary>
            <param name="rgbaPixels">The pixel array</param>
            <param name="linearMag">Enable/Disable Linear rendering or use Nearest rendering.</param>
            <param name="clampMode">The current clamp mode</param>
            <param name="intoTexture">The target texture space it should load the pixels into. Must have width/height set accordingly. Will set the opengl textureid upon successful load.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GLDeleteTexture(System.Int32)">
            <summary>
            Deletes given texture
            </summary>
            <param name="textureId">the OpenGL Identifier for the target Texture.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GlGetMaxTextureSize">
            <summary>
            Max size a texture can have on the current graphics card
            </summary>
            <returns>The maximum size a texture can have on the current graphics card in Pixels.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.BindTexture2d(System.Int32)">
            <summary>
            Binds given texture. For use with shaders - you should assign the texture directly though shader uniforms.
            </summary>
            <param name="textureid">The OpenGL Identifier ID for the target texture to bind.</param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetOrLoadTexture(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Loads given texture through the assets managers and loads it onto the graphics card. Will return a cached version on every subsequent call to this method. 
            </summary>
            <param name="name">the location of the texture as it exists within the game or mod directory.</param>
            <returns>The texture id</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetOrLoadTexture(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Client.LoadedTexture@)">
            <summary>
            Loads given texture through the assets managers and loads it onto the graphics card. Will return a cached version on every subsequent call to this method. 
            </summary>
            <param name="name">the location of the texture as it exists within the game or mod directory.</param>
            <param name="intoTexture">the texture object to be populated. If it already is populated it will be disposed first</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetOrLoadTexture(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.BitmapRef,Vintagestory.API.Client.LoadedTexture@)">
            <summary>
            Loads the texture supplied by the bitmap, uploads it to the graphics card and keeps a cached version under given name. Will return that cached version on every subsequent call to this method. 
            </summary>
            <param name="name">the location of the texture as it exists within the game or mod directory.</param>
            <param name="bmp">The referenced bitmap</param>
            <param name="intoTexture">the texture object to be populated. If it already is populated it will be disposed first</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RemoveTexture(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Removes given texture from the cache and from graphics card memory
            </summary>
            <param name="name">the location of the texture as it exists within the game or mod directory.</param>
            <returns>whether the operation was successful or not.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetUniformLocation(System.Int32,System.String)">
            <summary>
            Gets you the uniform location of given uniform for given shader
            </summary>
            <param name="shaderProgramNumber"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetEngineShader(Vintagestory.API.Client.EnumShaderProgram)">
            <summary>
            Gives you access to all of the vanilla shaders
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetShader(System.Int32)">
            <summary>
            Gives you access to all currently registered shaders identified by their number
            </summary>
            <param name="shaderProgramNumber"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.StandardShader">
            <summary>
            Gives you a reference to the "standard" shader, a general purpose shader for normal shading work
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.PreparedStandardShader(System.Int32,System.Int32,System.Int32,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Populates the uniforms and light values for given positions and calls shader.Use().
            </summary>
            <param name="posX">The position for light level reading</param>
            <param name="posY">The position for light level reading</param>
            <param name="posZ">The position for light level reading</param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.CurrentActiveShader">
            <summary>
            Gives you a reference to the currently active shader, or null if none is active right now
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.AllocateEmptyMesh(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Vintagestory.API.Client.CustomMeshDataPartFloat,Vintagestory.API.Client.CustomMeshDataPartShort,Vintagestory.API.Client.CustomMeshDataPartByte,Vintagestory.API.Client.CustomMeshDataPartInt,Vintagestory.API.Client.EnumDrawMode,System.Boolean)">
            <summary>
            Allocates memory on the graphics card. Can use UpdateMesh() to populate it with data. The custom mesh data parts may be null. Sizes are in bytes.
            </summary>
            <param name="xyzSize">the squared size of the texture.</param>
            <param name="normalSize">the size of the normals</param>
            <param name="uvSize">the size of the UV map.</param>
            <param name="rgbaSize">size of the RGBA colors.</param>
            <param name="flagsSize">Size of the render flags.</param>
            <param name="indicesSize">Size of the indices</param>
            <param name="customFloats">Float values of the mesh</param>
            <param name="customInts">Float values of the mesh</param>
            <param name="customBytes">Byte values of the mesh</param>
            <param name="drawMode">The current draw mode</param>
            <param name="staticDraw">whether the draw should be static or dynamic.</param>
            <returns>the reference to the mesh</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.UploadMesh(Vintagestory.API.Client.MeshData)">
            <summary>
            Will load your mesh into a VAO. VBO locations:
            xyz=0, uv=1, rgba=2, rgba2=3, flags=4, customFloats=5, customInts=6, customBytes=7  (indices do not get their own data location)
            If any of them are null, the vbo location is not consumed and all used location numbers shift by -1
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.UpdateMesh(Vintagestory.API.Client.MeshRef,Vintagestory.API.Client.MeshData)">
            <summary>
            Updates the existing mesh. Updates any non null data from <paramref name="updatedata"/>
            </summary>
            <param name="meshRef"></param>
            <param name="updatedata"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.DeleteMesh(Vintagestory.API.Client.MeshRef)">
            <summary>
            Frees up the memory on the graphics card. Should always be called at the end of the lifetime to prevent memory leaks. Equivalent to calling Dispose on the meshref itself
            </summary>
            <param name="vao"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderMesh(Vintagestory.API.Client.MeshRef)">
            <summary>
            Renders given mesh onto the screen
            </summary>
            <param name="meshRef"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderMeshInstanced(Vintagestory.API.Client.MeshRef,System.Int32)">
            <summary>
            Uses the graphics instanced rendering methods to efficiently render the same mesh multiple times. Use the custom mesh data parts with instanced flag on to supply custom data to each mesh.
            </summary>
            <param name="meshRef"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderMesh(Vintagestory.API.Client.MeshRef,System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Draws only a part of the mesh
            </summary>
            <param name="meshRef"></param>
            <param name="indicesStarts"></param>
            <param name="indicesSizes"></param>
            <param name="groupCount"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderTextureIntoTexture(Vintagestory.API.Client.LoadedTexture,System.Single,System.Single,System.Single,System.Single,Vintagestory.API.Client.LoadedTexture,System.Single,System.Single,System.Single)">
            <summary>
            Renders given texture into another texture. If you use the resulting texture for in-world rendering, remember to recreate the mipmaps via <seealso cref="M:Vintagestory.API.Client.IRenderAPI.GlGenerateTex2DMipmaps"/>
            </summary>
            <param name="fromTexture"></param>
            <param name="sourceX"></param>
            <param name="sourceY"></param>
            <param name="sourceWidth"></param>
            <param name="sourceHeight"></param>
            <param name="intoTexture"></param>
            <param name="targetX"></param>
            <param name="targetY"></param>
            <param name="alphaTest">If below given threshold, the pixel is not drawn into the target texture. (Default: 0.05)</param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderItemstackToGui(Vintagestory.API.Common.ItemStack,System.Double,System.Double,System.Double,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Renders given itemstack at given position (gui/orthographic mode)
            </summary>
            <param name="itemstack"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="size"></param>
            <param name="color">Set to <seealso cref="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgb"/> for normal rendering</param> 
            <param name="shading">Unused.</param>
            <param name="rotate">If true, will slowly rotate the itemstack around the Y-Axis</param>
            <param name="showStackSize">If true, will render a number depicting how many blocks/item are in the stack</param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderItemstackToGui(Vintagestory.API.Common.ItemSlot,System.Double,System.Double,System.Double,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Renders given itemstack in slot at given position (gui/orthographic mode)
            </summary>
            <param name="inSlot"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="shading"></param>
            <param name="rotate"></param>
            <param name="showStackSize"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.GetTextureAtlasPosition(Vintagestory.API.Common.ItemStack)">
            <summary>
            Returns the first TextureAtlasPosition it can find for given block or item in itemstack. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderEntityToGui(System.Single,Vintagestory.API.Common.Entities.Entity,System.Double,System.Double,System.Double,System.Single,System.Single,System.Int32)">
            <summary>
            Renders given entity at given position (gui/orthographic mode)
            </summary>
            <param name="dt"></param>
            <param name="entity"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="yawDelta">For rotating the entity around its y-axis</param>
            <param name="size"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.Render2DTexturePremultipliedAlpha(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Renders given texture onto the screen, uses a simple quad for rendering (gui mode). Assumes the texture to use a premultiplied alpha channel
            </summary>
            <param name="textureid"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.Render2DTexturePremultipliedAlpha(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Single,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Renders given texture onto the screen, uses a simple quad for rendering (gui mode). Assumes the texture to use a premultiplied alpha channel
            </summary>
            <param name="textureid"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.Render2DTexturePremultipliedAlpha(System.Int32,Vintagestory.API.Client.ElementBounds,System.Single,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Renders given texture onto the screen, uses a simple quad for rendering (gui mode). Assumes the texture to use a premultiplied alpha channel
            </summary>
            <param name="textureid"></param>
            <param name="bounds"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderTexture(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Single,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Renders given texture onto the screen, uses a simple quad for rendering (gui mode)
            </summary>
            <param name="textureid"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.Render2DTexture(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Renders given texture onto the screen, uses a simple quad for rendering (gui mode)
            </summary>
            <param name="textureid"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.Render2DTexture(System.Int32,Vintagestory.API.Client.ElementBounds,System.Single,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Renders given texture onto the screen, uses a simple quad for rendering (gui mode)
            </summary>
            <param name="textureid"></param>
            <param name="bounds"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.Render2DLoadedTexture(Vintagestory.API.Client.LoadedTexture,System.Single,System.Single,System.Single)">
            <summary>
            Renders given texture onto the screen, uses a simple quad for rendering (gui mode)
            </summary>
            <param name="textTexture"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderAPI.RenderRectangle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Renders a rectangle outline at given position
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="color"></param>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.AmbientColor">
            <summary>
            The current ambient color (e.g. will return a blue tint when player is under water)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FogColor">
            <summary>
            The current fog color (e.g. will return a blue tint when player is under water)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FogMin">
            <summary>
            Current minimum fog value 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderAPI.FogDensity">
            <summary>
            Density of the current fog. Fog is calculated as followed in the shaders: clamp(fogMin + 1 - 1 / exp(gl_FragDepth * fogDensity), 0, 1)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.IRenderer">
            <summary>
            Interface to render something on to the clients screens. Used for block entitites.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderer.RenderOrder">
            <summary>
            0 = drawn first, 1 = drawn last
            Default render orders by render stage:
            Before:
            0 = Ambient Manager
            0 = Camera
            
            Opaque:
            0.1 = Blue sky (Icosahedron)
            0.2 = Night skybox
            0.3 = Sun and moon
            0.37 = Terrain opaque
            0.4 = Enitities
            0.5 = Decals
            0.5 = Debug wireframe
            0.6 = particles
            0.7 = Cinematic camera line preview
            0.8 = fp held item
            0.9 = held item opaque custom renderer
            
            OIT:
            0.2 = Frame buffer debug screen
            0.37 = Terrain oit
            0.4 = Enitities
            0.6 = particles
            0.9 = held item oit custom renderer
            
            Shadow far:
            0 = shadow map init
            0.37 = Terrain shadow far
            0.4 = Enitities
            
            Shadow far done:
            1 = shadow map finish
            
            Shadow near:
            0 = shadow map init
            0.37 = Terrain shadow near
            0.4 = Enitities
            
            Shadow near done:
            1 = shadow map finish
            Ortho:
            0.2 = Frame buffer debug screen
            0.4 = Enitities
            0.9 = held item ortho custom renderer
            0.95 = sleeping overlay
            0.98 = bow/spear aiming reticle
            1 = Gui manager
            1.02 = crosshair and mouse cursor
            
            AfterFinalComposition:
            2 = screenshot
            
            Done:
            0.1 = gui manager
            2 = screenshot
            
            0.98 = Cinematic camera camera advancing and frame capture when recording
            0.99 = Chunk Tesselator Manager (uploads new/modified chunk meshes)
            0.999 = Compress chunks scan
            1 = video recorder
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IRenderer.RenderRange">
            <summary>
            Within what range to the player OnRenderFrame() should be called (currently not used!)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderer.OnRenderFrame(System.Single,Vintagestory.API.Client.EnumRenderStage)">
            <summary>
            Called every frame for rendering whatever you need to render
            </summary>
            <param name="deltaTime"></param>
            <param name="stage"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IRenderer.Dispose">
            <summary>
            Called when the renderer was unregistered. Should free up the gpu memory you reserved.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.MeshRef">
            <summary>
            A reference to an uploaded mesh (that has been placed in an OpenGL VAO). This reference can be used for rendering it.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshRef.Disposed">
            <summary>
            Am I disposed?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshRef.Dispose">
            <summary>
            Equivalent to calling api.Render.DeleteMesh()
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.SurfaceMusicTrack">
            <summary>
            Adds a basic music track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.Location">
            <summary>
            The location of the track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.Playstyle">
            <summary>
            The current play style of the track
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.MinSunlight">
            <summary>
            Minimum sunlight to play the track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.MinHour">
            <summary>
            Earliest to play the track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.MaxHour">
            <summary>
            Latest to play the track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.loading">
            <summary>
            Is it loading?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.Sound">
            <summary>
            Get the current sound file.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.SurfaceMusicTrack.IsActive">
            <summary>
            Is the current song actively playing or is it loading? (False if neither action.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.SurfaceMusicTrack.Priority">
            <summary>
            The current song's priority.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.SurfaceMusicTrack.Name">
            <summary>
            The name of the track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.rand">
            <summary>
            The music seed for random values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.AnySongCoolDowns">
            <summary>
            Cooldowns between songs. First value is the minimum delay, second value is added randomness. (in seconds)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.SameSongCoolDowns">
            <summary>
            Time before we play the same song again. First value is the minimum delay, second value is added randomness. (in seconds)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.initialized">
            <summary>
            Is this track initialized?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.globalCooldownUntilMs">
            <summary>
            Global cooldown until next track
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.tracksCooldownUntilMs">
            <summary>
            Cooldown for each track by name.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.capi">
            <summary>
            Core client API.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.SurfaceMusicTrack.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SurfaceMusicTrack.prevFrequency">
            <summary>
            Gets the previous frequency setting.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.SurfaceMusicTrack.MusicFrequency">
            <summary>
            Gets the current Music Frequency setting.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.SurfaceMusicTrack.Initialize(Vintagestory.API.Common.IAssetManager,Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.IMusicEngine)">
            <summary>
            Initialize the track.
            </summary>
            <param name="assetManager">the global Asset Manager</param>
            <param name="capi">The Core Client API</param>
            <param name="musicEngine"></param>
        </member>
        <member name="M:Vintagestory.API.Client.SurfaceMusicTrack.FrequencyChanged(System.Int32,Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            The Frequency change in the static system.
            </summary>
            <param name="newFreq">The new frequency</param>
            <param name="capi">the core client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.SurfaceMusicTrack.ShouldPlay(Vintagestory.API.Common.Entities.TrackedPlayerProperties,Vintagestory.API.Common.ClimateCondition,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Should this current track play?
            </summary>
            <param name="props">Player Properties</param>
            <returns>Should we play the current track?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.SurfaceMusicTrack.BeginPlay(Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            Begins playing the Music track.
            </summary>
            <param name="props">Player Properties</param>
        </member>
        <member name="M:Vintagestory.API.Client.SurfaceMusicTrack.ContinuePlay(System.Single,Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            Is it cool for the current track to continue playing?
            </summary>
            <param name="dt">Delta Time/Change in time.</param>
            <param name="props">Track properties.</param>
            <returns>Cool or not cool?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.SurfaceMusicTrack.FadeOut(System.Single,Vintagestory.API.Common.Action)">
            <summary>
            Fades out the current track.  
            </summary>
            <param name="seconds">The duration of the fade out in seconds.</param>
            <param name="onFadedOut">What to have happen after the track has faded out.</param>
        </member>
        <member name="M:Vintagestory.API.Client.SurfaceMusicTrack.SetCooldown(System.Single)">
            <summary>
            Sets the cooldown of the current track.
            </summary>
            <param name="multiplier">The multiplier for the cooldown.</param>
        </member>
        <member name="M:Vintagestory.API.Client.SurfaceMusicTrack.UpdateVolume">
            <summary>
            Updates the volume of the current track provided Sound is not null. (effectively calls Sound.SetVolume)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IMusicTrack.Name">
            <summary>
            The name of the track
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IMusicTrack.IsActive">
            <summary>
            Is the track active?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IMusicTrack.Priority">
            <summary>
            The priority of the track.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IMusicTrack.Initialize(Vintagestory.API.Common.IAssetManager,Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.IMusicEngine)">
            <summary>
            Initialization of the Music Track.
            </summary>
            <param name="assetManager">the global Asset Manager</param>
            <param name="capi">The Core Client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.IMusicTrack.ShouldPlay(Vintagestory.API.Common.Entities.TrackedPlayerProperties,Vintagestory.API.Common.ClimateCondition,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Should this current track play?
            </summary>
            <param name="props">Player Properties</param>
            <returns>Should we play the current track?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IMusicTrack.BeginPlay(Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            Begin playing the current track.
            </summary>
            <param name="props">Player Properties</param>
        </member>
        <member name="M:Vintagestory.API.Client.IMusicTrack.ContinuePlay(System.Single,Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            Is it cool for the current track to continue playing?
            </summary>
            <param name="dt">Delta Time/Change in time.</param>
            <param name="props">Track properties.</param>
            <returns>Cool or not cool?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.IMusicTrack.UpdateVolume">
            <summary>
            Updates the volume on the current track.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IMusicTrack.FadeOut(System.Single,Vintagestory.API.Common.Action)">
            <summary>
            Called when the track to interupted or when Update() returned false. 
            So called every time the tracked ended or has to end
            </summary>
            <param name="seconds"></param>
            <param name="onFadedOut"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IMusicEngine.LoadTrack(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.Action{Vintagestory.API.Client.ILoadedSound},System.Single,System.Single)">
            <summary>
            Loads the sound into memory and plays the track. Slow call. Encapsulate it into ThreadPool.QueueUserWorkItem() to not block the main thread
            </summary>
            <param name="location"></param>
            <param name="onLoaded"></param>
            <param name="volume"></param>
            <param name="pitch"></param>
        </member>
        <member name="P:Vintagestory.API.Client.IMusicEngine.CurrentTrack">
            <summary>
            The currently playing track
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IMusicEngine.LastPlayedTrack">
            <summary>
            The track that played before
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IMusicEngine.MillisecondsSinceLastTrack">
            <summary>
            The total passed milliseconds since game start at the point where the last track stopped playing
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.RainMusicTrack">
            <summary>
            Creates a track for rain related music.  [Not yet implemented]
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.LineMeshUtil.GetRectangle(System.Int32)">
            <summary>
            Gets the current rectangle for the line.
            </summary>
            <param name="color">the converted base color.</param>
            <returns>The mesh data for the rectangle..</returns>
        </member>
        <member name="M:Vintagestory.API.Client.LineMeshUtil.GetCube(System.Int32)">
            <summary>
            Gets the cube of this line.
            </summary>
            <param name="color">The converted base color.</param>
            <returns>The mesh data for the cube.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.LineMeshUtil.AddLine2D(Vintagestory.API.Client.MeshData,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a 2D line to the mesh data.
            </summary>
            <param name="m">The current mesh data.</param>
            <param name="x1">X position of the first point.</param>
            <param name="y1">Y position of the first point.</param>
            <param name="x2">X position of the second point.</param>
            <param name="y2">Y position of the second point.</param>
            <param name="color">The converted base color.</param>
        </member>
        <member name="M:Vintagestory.API.Client.LineMeshUtil.AddLineLoop(Vintagestory.API.Client.MeshData,Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec3f,System.Int32)">
            <summary>
            Adds a collection of lines to the given mesh.
            </summary>
            <param name="m">The current mesh data.</param>
            <param name="p0">The first point.</param>
            <param name="p1">The second point.</param>
            <param name="p2">The third point.</param>
            <param name="p3">The fourth point.</param>
            <param name="color">The color of the resulting lines.</param>
        </member>
        <member name="M:Vintagestory.API.Client.LineMeshUtil.AddVertex(Vintagestory.API.Client.MeshData,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a vertex to the mesh data.
            </summary>
            <param name="model">The mesh data.</param>
            <param name="x">X position of the vertex.</param>
            <param name="y">Y position of the vertex.</param>
            <param name="z">Z position of the vertex.</param>
            <param name="color">The color of the vertex.</param>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.Before">
            <summary>
            Before any rendering has begun, use for setting up stuff during render
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.Opaque">
            <summary>
            Opaque/Alpha tested rendering
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.OIT">
            <summary>
            Order independent transparency 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.AfterOIT">
            <summary>
            To render the held item over water. If done in the opaque pass it would not render water behind it.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.ShadowFar">
            <summary>
            Shadow map
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.ShadowFarDone">
            <summary>
            Shadow map done
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.ShadowNear">
            <summary>
            Shadow map
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.ShadowNearDone">
            <summary>
            Shadow map done
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.AfterPostProcessing">
            <summary>
            After all 3d geometry has rendered and post processing of the frame is complete
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.Ortho">
            <summary>
            Ortho mode for rendering GUIs and everything 2D
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.AfterFinalComposition">
            <summary>
            The post processing passes are merged with all 3d geometry and the scene is color graded
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumRenderStage.Done">
            <summary>
            Scene is blitted onto the default frame buffer, buffers not yet swapped though so can still render to default FB
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.CaveMusicTrack">
            <summary>
            Represent a dynamically composed track made out of individual small pieces of music mixed together defined by specific rules
            Requirements:
            - Start/Stop Multiple Trackpieces
            - Set their volumne dynamically
            - Decide which Trackpieces to play
            - Allow individual rules per Trackpiece
            Specific examples:
            - Play Thunder ambient only if thunderlevel above 10
              - Thunder ambient volume based on thunderlevel (between 0.3 and 1.1?)
            - Play Aquatic Drone only when y below 60
            - Play Deep Drone only when y below 50
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.CaveMusicTrack.Name">
            <summary>
            The name of the music track.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.CaveMusicTrack.SessionPlayTime">
            <summary>
            When playing cave sounds, play between 4-10 minutes each time
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.CaveMusicTrack.IsActive">
            <summary>
            Is the track active?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.CaveMusicTrack.Vintagestory#API#Client#IMusicTrack#Priority">
            <summary>
            The priority of the track.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CaveMusicTrack.Initialize(Vintagestory.API.Common.IAssetManager,Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.IMusicEngine)">
            <summary>
            Initializes the music track
            </summary>
            <param name="assetManager">the global Asset Manager</param>
            <param name="capi">The Core Client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.CaveMusicTrack.ShouldPlay(Vintagestory.API.Common.Entities.TrackedPlayerProperties,Vintagestory.API.Common.ClimateCondition,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Should the game play this track?
            </summary>
            <param name="props">The properties of the current track.</param>
            <returns>Do we play this track?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CaveMusicTrack.BeginPlay(Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            Starts playing the track.
            </summary>
            <param name="props">The properties of the current track.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CaveMusicTrack.ContinuePlay(System.Single,Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            Do we continue playing this track?
            </summary>
            <param name="dt">Delta time or Change in time</param>
            <param name="props">The properties of the current track.</param>
            <returns>Are we still playing or do we stop?</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CaveMusicTrack.FadeOut(System.Single,Vintagestory.API.Common.Action)">
            <summary>
            Fade out the track to end.
            </summary>
            <param name="seconds">Seconds to fade out across.</param>
            <param name="onFadedOut">Delegate to have happen once the fade-out is done.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CaveMusicTrack.UpdateVolume">
            <summary>
            Updates the volume of the track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrackPart.MinSuitability">
            <summary>
            The minimum Suitability of the given track
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrackPart.MaxSuitability">
            <summary>
            The maximum Suitability of the given track
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrackPart.MinVolumne">
            <summary>
            The minimum volume of a given track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrackPart.MaxVolumne">
            <summary>
            The maximum volume of a given track.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrackPart.PosY">
            <summary>
            the Y position.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrackPart.Files">
            <summary>
            The files for the part.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrackPart.Sound">
            <summary>
            The loaded sound
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrackPart.StartedMs">
            <summary>
            Start time in Miliseconds
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MusicTrackPart.Loading">
            <summary>
            Am I loading?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MusicTrackPart.IsPlaying">
            <summary>
            Am I playing?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrackPart.Applicable(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            Am I applicable?
            </summary>
            <param name="world">world information</param>
            <param name="props">the properties of the current track.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrackPart.CurrentVolume(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            The current volume of the track.
            </summary>
            <param name="world">world information</param>
            <param name="props">the properties of the current track.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrackPart.CurrentSuitability(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.TrackedPlayerProperties)">
            <summary>
            The current Suitability of the track.
            </summary>
            <param name="world">world information</param>
            <param name="props">the properties of the current track.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MusicTrackPart.ExpandFiles(Vintagestory.API.Common.IAssetManager)">
            <summary>
            Expands the target files.
            </summary>
            <param name="assetManager">The current AssetManager instance.</param>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.Default">
            <summary>
            Culls faces if they are opaque faces adjacent to opaque faces
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.NeverCull">
            <summary>
            Never culls any faces
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.Merge">
            <summary>
            Culls all faces that are adjacent to opaque faces and faces adjacent to blocks of the same id
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.Collapse">
            <summary>
            Culls all faces that are adjacent to opaque faces and the bottom, east or south faces adjacent to blocks of the same id
            This causes to still leave one single face inbetween instead of 2, eliminating any z-fighting.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.MergeMaterial">
            <summary>
            Same as Merge but checks for equal material
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.CollapseMaterial">
            <summary>
            Same as Collapse but checks for equal material
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumFaceCullMode.Liquid">
            <summary>
            Same as CollapseMaterial but also culls faces towards opaque blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShader.PrefixCode">
            <summary>
            If set, the shader registry will attach this bit of code to the beginning of the fragment shader file. Useful for setting stuff at runtime when using file shaders, e.g. via #define
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShader.Code">
            <summary>
            Source code of the shader
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.PassId">
            <summary>
            A uniqe shader pass number assigned to each shader program
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.PassName">
            <summary>
            The name it was registered with. If you want to load this shader from a file, make sure the use the filename here
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.ClampTexturesToEdge">
            <summary>
            If true, it well configure the textures to clamp to the edge (CLAMP_TO_EDGE). Requires the textureid to be defined using SetTextureIds
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.VertexShader">
            <summary>
            The vertex shader of this shader program
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.FragmentShader">
            <summary>
            The fragment shader of this shader program
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.GeometryShader">
            <summary>
            The geometry shader of this shader program
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IShaderProgram.Disposed">
            <summary>
            True if this shader has been disposed
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.IShaderAPI">
            <summary>
            API for configuring and loading GLSL Shaders
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.NewShaderProgram">
            <summary>
            Returns an empty instance of an IShaderProgram for you to configure. Once configured, call RegisterShaderProgram
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.NewShader(Vintagestory.API.Client.EnumShaderType)">
            <summary>
            Returns an empty instance of an IShader for you to configure as vertex, fragment or geometry shader
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.RegisterFileShaderProgram(System.String,Vintagestory.API.Client.IShaderProgram)">
            <summary>
            Registers a configured IShaderProgram. The name must correspond to the .vsh and .fsh filenames (without ending).
            Returns a program number to be used in UseShaderProgram()
            </summary>
            <param name="name"></param>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.RegisterMemoryShaderProgram(System.String,Vintagestory.API.Client.IShaderProgram)">
            <summary>
            Registers a configured IShaderProgram. Will not load anything from the shaders folder.
            Returns a program number to be used in UseShaderProgram()
            </summary>
            <param name="name"></param>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.GetProgram(System.Int32)">
            <summary>
            Returns the loaded shaders for use in rendering
            </summary>
            <param name="renderPass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.ReloadShaders">
            <summary>
            Discards all currently compiled shaders and recompiles them. Returns true if all shaders compiled without errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IShaderAPI.IsGLSLVersionSupported(System.String)">
            <summary>
            Returns true if given GLSL Version is available on this machine
            </summary>
            <param name="minVersion"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.ITerrainMeshPool.AddMeshData(Vintagestory.API.Client.MeshData,System.Int32)">
            <summary>
            Requires xyz, uv, rgba, indices, flags and xyzFaces to be set
            </summary>
            <param name="data"></param>
            <param name="lodLevel"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ITerrainMeshPool.AddMeshData(Vintagestory.API.Client.MeshData,Vintagestory.API.Client.ColorMapData,System.Int32)">
            <summary>
            Requires xyz, uv, rgba, indices, flags and xyzFaces to be set
            </summary>
            <param name="data"></param>
            <param name="colorMapData"></param>
            <param name="lodLevel"></param>
        </member>
        <member name="T:Vintagestory.API.Client.ITexPositionSource">
            <summary>
            An interface that can supply texture atlas positions 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ITexPositionSource.AtlasSize">
            <summary>
            This returns the size of the atlas this texture resides in.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.ItemRenderInfo">
            <summary>
            Holds information on how a collectible should be rendered in hands, on the ground or in gui.
            In collectible.OnBeforeRender() the values are prefilled with the default ones.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.ModelRef">
            <summary>
            The model to be rendered
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.Transform">
            <summary>
            The transform to be applied when rendered
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.CullFaces">
            <summary>
            Wether or not to cull back faces
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.TextureId">
            <summary>
            The texture to be used when rendering. Should probalby be the texture id of the block or item texture atlas
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.AlphaTest">
            <summary>
            For discarding fragments with alpha value below this threshold
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.ItemRenderInfo.HalfTransparent">
            <summary>
            (Currently) not used.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Standard">
            <summary>
            A very plain shader for drawing any geometry
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Particlescube">
            <summary>
            For instanced rendering of cubic particles
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Particlesquad">
            <summary>
            For instanced rendering of quad particles
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Sky">
            <summary>
            For rendering the sky colors
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Nightsky">
            <summary>
            For rendering the stars skybox
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Woittest">
            <summary>
            Debug shader for testing Weighted Blended Order Independent
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Transparentcompose">
            <summary>
            Merges opaque geomerty with WOIT geometry
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Debugdepthbuffer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Helditem">
            <summary>
            For rendering the currently held item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Chunkopaque">
            <summary>
            Renders opaque chunk geometry, no blend, alpha discard;
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Multitexturetest">
            <summary>
            Debug shader for testing multitexturing
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Chunkliquid">
            <summary>
            Renders liquid chunk geometry
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Decals">
            <summary>
            Renders decals, obviously O_O
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Final">
            <summary>
            Color grading and merging of all rendered scenes
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Gui">
            <summary>
            For drawing an item stack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Blur">
            <summary>
            The Blur shader
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Chunktransparent">
            <summary>
            Renders half transparent chunk geometry using WOIT
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Findbright">
            <summary>
            For bloom shader
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Chunktopsoil">
            <summary>
            Renders top soil chunk geometry 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Godrays">
            <summary>
            For god rays
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Autocamera">
            <summary>
            Cinematic camera pather rendering
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Blockhighlights">
            <summary>
            Worldedit block highlights
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Wireframe">
            <summary>
            The selected block outline
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Entityanimated">
            <summary>
            For animated entities
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumShaderProgram.Luma">
            <summary>
            Luma prepass for FXAA
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.WorldInteraction.MouseButton">
            <summary>
            Left or Right mouse button?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.WorldInteraction.HotKeyCode">
            <summary>
            Does it require pressing a key to perform this action (e.g. "sneak" for sneaking)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.WorldInteraction.HotKeyCodes">
            <summary>
            Does it require pressing multiple keys to perform this action (if set then HotkeyCode is ignored)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.WorldInteraction.ActionLangCode">
            <summary>
            The text to show, will be used in the form of Lang.Get(ActionLangCode); 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.WorldInteraction.JsonItemStacks">
            <summary>
            Does the player need to hold a certain items/blocks in hands? (e.g. a knife). You can define an array of item stacks here and the game will loop through them in a 1 second interval.
            This property is loaded from the entitytypes and blocktype json files and then resolved.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.WorldInteraction.RequireFreeHand">
            <summary>
            If true, the interaction only applies when the player has no slot in hands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.WorldInteraction.GetMatchingStacks">
            <summary>
            Only applicable when ItemStacks is non null. If set, this method will be executed before adding the interaction. Lets you return a filtered list of itemstacks that can be used for this interaction (or null/empty array for not interactable)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.WorldInteraction.ShouldApply">
            <summary>
            Only applicable when ItemStacks is null. If set and the method returns falsee, the interaction will not be displayed
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.IClientWorldAccessor">
            <summary>
            The world accessor implemented by the client, offers some extra features only available on the client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientWorldAccessor.Calendar">
            <summary>
            Interface to access the game calendar
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientWorldAccessor.ApplyColorMapOnRgba(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads the rgb climate and season color map value at given position and multiplies it byte-wise with supplied color
            </summary>
            <param name="climateColorMap"></param>
            <param name="seasonColorMap"></param>
            <param name="color"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="flipRb"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IClientWorldAccessor.ApplyColorMapOnRgba(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads the rgb climate and season color map value for given rain and temp value and multiplies it byte-wise with supplied color
            </summary>
            <param name="climateColorMap"></param>
            <param name="seasonColorMap"></param>
            <param name="color"></param>
            <param name="rain"></param>
            <param name="temp"></param>
            <param name="flipRb"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Client.IClientWorldAccessor.ForceLiquidSelectable">
            <summary>
            Whether the player can select liquids
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientWorldAccessor.AmbientParticles">
            <summary>
            Whether to spawn ambient particles
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.IClientWorldAccessor.Player">
            <summary>
            Returns the player running this client instance
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.IClientWorldAccessor.LoadSound(Vintagestory.API.Client.SoundParams)">
            <summary>
            Loads a sounds without playing it. Use to individually control when to play/stop. Might want to set DisposeOnFinish to false but then you have to dispose it yourself. 
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.IClientWorldAccessor.AddCameraShake(System.Single)">
            <summary>
            Shakes the camera view by given strength
            </summary>
            <param name="strengh"></param>
        </member>
        <member name="M:Vintagestory.API.Client.IClientWorldAccessor.TryAttackEntity(Vintagestory.API.Common.EntitySelection)">
            <summary>
            Makes an attempt to attack a particular entity.
            </summary>
            <param name="sele"></param>
        </member>
        <member name="P:Vintagestory.API.Client.IClientWorldAccessor.LoadedEntities">
            <summary>
            The internal cache of all currently loaded entities. Warning: You should not set or remove anything from this dic unless you *really* know what you're doing. Use SpawnEntity/DespawnEntity instead.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.EnumChunkRenderPass">
            <summary>
            The various render passes available for rendering blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.Opaque">
            <summary>
            Backfaced culled, no alpha testing, alpha discard
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.OpaqueNoCull">
            <summary>
            Backfaced not culled, no alpha blended but alpha discard
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.BlendNoCull">
            <summary>
            Backfaced not culled, alpha blended and alpha discard
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.Transparent">
            <summary>
            Uses a special rendering system called Weighted Blended Order Independent Transparency for half transparent blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.Liquid">
            <summary>
            Same as OpaqueNoCull but with a few quirks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.TopSoil">
            <summary>
            Special render pass for top soil only in order to have climated tinted grass half transparently overlaid over an opaque block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.EnumChunkRenderPass.Meta">
            <summary>
            Special render pass for meta blocks
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.ILoadedSound">
            <summary>
            Represents a loaded game sound 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Vintagestory.API.Client.ILoadedSound.SoundLengthSeconds" -->
        <member name="P:Vintagestory.API.Client.ILoadedSound.PlaybackPosition">
            <summary>
            Get the current playback position or set it (in seconds)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.IsDisposed">
            <summary>
            Is the sound disposed of?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.IsPlaying">
            <summary>
            Is sound currently playing
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.IsFadingIn">
            <summary>
            True if the track is fading to a higher volume
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.IsFadingOut">
            <summary>
            True if the track is fading to a lower volume
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.HasStopped">
            <summary>
            Is the sound finished with playing? (false when only paused)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.Channels">
            <summary>
            Amount of audio channels this sound has
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.ILoadedSound.Params">
            <summary>
            The params the sound was created with.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Start">
            <summary>
            Starts the sound
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Stop">
            <summary>
            Stops the sound
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Pause">
            <summary>
            Pauses the sound
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Toggle(System.Boolean)">
            <summary>
            True for Starting, False for Stopping the sound
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.Dispose">
            <summary>
            Dispose the object sound. May no longer be used after disposing. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.SetPitch(System.Single)">
            <summary>
            Allows you to modify the pitch of the sound. May also be called while the sound is currently playing.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.SetPitchOffset(System.Single)">
            <summary>
            Allows you to modify the pitch of the sound. May also be called while the sound is currently playing. This value is added together with the normal pitch level. This method is currently used to distort sound during low temporal stability
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.SetVolume(System.Single)">
            <summary>
            Allows you to modify the volumne of the sound. May also be called while the sound is currently playing.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.SetVolume">
            <summary>
            Sets the current volumne again. Use this to update the sounds volumne after the global sound level has changed
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.SetPosition(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Sets the position from where the sound is originating from
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.FadeTo(System.Double,System.Single,Vintagestory.API.Common.Action{Vintagestory.API.Client.ILoadedSound})">
            <summary>
            Fades the sounds volumne to given value
            </summary>
            <param name="newVolume"></param>
            <param name="duration"></param>
            <param name="onFaded"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.FadeOut(System.Single,Vintagestory.API.Common.Action{Vintagestory.API.Client.ILoadedSound})">
            <summary>
            Causes the sound to fade out 
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.FadeIn(System.Single,Vintagestory.API.Common.Action{Vintagestory.API.Client.ILoadedSound})">
            <summary>
            Causes the sound to fade in
            </summary>
            <param name="seconds"></param>
            <param name="onFadedIn"></param>
        </member>
        <member name="M:Vintagestory.API.Client.ILoadedSound.FadeOutAndStop(System.Single)">
            <summary>
            Causes the sound to fade out and stop the track
            </summary>
            <param name="seconds"></param>
        </member>
        <member name="T:Vintagestory.API.Client.CompositeTexture">
            <summary>
            A single block texture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CompositeTexture.Base">
            <summary>
            The basic texture for this composite texture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CompositeTexture.Overlays">
            <summary>
            The base texture may be overlayed with any quantity of textures. These are baked together during texture atlas creation
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CompositeTexture.Alternates">
            <summary>
            The texture may consists of any amount of alternatives, one of which will be randomly chosen when the block is placed in the world.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CompositeTexture.Baked">
            <summary>
            BakedCompositeTexture is an expanded, atlas friendly version of CompositeTexture. Required during texture atlas generation.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CompositeTexture.Rotation">
            <summary>
            Rotation of the texture may only be a multiple of 90
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.#ctor">
            <summary>
            Creates a new empty composite texture
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.#ctor(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Creates a new empty composite texture with given base texture
            </summary>
            <param name="Base"></param>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.Clone">
            <summary>
            Creates a deep copy of the texture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.Bake(Vintagestory.API.Common.IAssetManager)">
            <summary>
            Expands the Composite Texture to a texture atlas friendly version and populates the Baked field. This method is called by the texture atlas managers.
            Won't have any effect if called after the texture atlasses have been created.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.RuntimeBake(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ITextureAtlasAPI)">
            <summary>
            Expands the Composite Texture to a texture atlas friendly version and populates the Baked field. This method can be called after the game world has loaded.
            </summary>
            <param name="capi">The Client API</param>
            <param name="intoAtlas">The atlas to insert the baked texture.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CompositeTexture.Bake(Vintagestory.API.Common.IAssetManager,Vintagestory.API.Client.CompositeTexture)">
            <summary>
            Expands a CompositeTexture to a texture atlas friendly version and populates the Baked field
            </summary>
            <param name="assetManager"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Client.BakedCompositeTexture">
            <summary>
            An expanded, atlas-friendly version of a CompositeTexture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.BakedCompositeTexture.TextureSubId">
            <summary>
            Unique identifier for this texture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.BakedCompositeTexture.BakedName">
            <summary>
            The Base name and Overlay concatenated (if there was any defined)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.BakedCompositeTexture.TextureFilenames">
            <summary>
            The base name and overlays as array
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.BakedCompositeTexture.BakedVariants">
            <summary>
            If non-null also contains BakedName
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.CustomMeshDataPart`1">
            <summary>
            Holds arbitrary mesh data for meshes to be used in a shader
            </summary>
            <typeparam name="T">The arbitrary type.</typeparam>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.Values">
            <summary>
            The arbitrary data to be uploaded to the graphics card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.Count">
            <summary>
            Amout of values currently added
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.CustomMeshDataPart`1.BufferSize">
            <summary>
            Size of the Values array
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.CustomMeshDataPart`1.AllocationSize">
            <summary>
            Size of the array that should be allocated on the graphics card.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.InterleaveSizes">
            <summary>
            Amount of variable components for variable (i.e. 2, 3 for a vec2 and a vec3), valid values are 1, 2, 3 and 4 (limited by glVertexAttribPointer)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.InterleaveStride">
            <summary>
            Stride - Size in bytes of all values for one vertex
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.InterleaveOffsets">
            <summary>
            Offset in bytes for each variable 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.Instanced">
            <summary>
            For instanced rendering
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.StaticDraw">
            <summary>
            Set to false if you intend to update the buffer very often (i.e. every frame)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CustomMeshDataPart`1.BaseOffset">
            <summary>
            Used as offset when doing a partial update on an existing buffer
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.#ctor">
            <summary>
            Blank constructor.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.#ctor(System.Int32)">
            <summary>
            Array initialization constructor.
            </summary>
            <param name="arraySize">the size of the typed Array.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.GrowBuffer(System.Int32)">
            <summary>
            Grows the buffer with a minimum.
            </summary>
            <param name="growAtLeastBy">The minimum amount to grow the buffer by.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.Add(`0)">
            <summary>
            Adds a value to the buffer.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.Add4(`0)">
            <summary>
            Adds the same value to the buffer 4 times - coded for performance.
            </summary>
            <param name="value">The value to add.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.Add(`0[])">
            <summary>
            Adds multiple values to the buffer.
            </summary>
            <param name="values">The values being added.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.SetAllocationSize(System.Int32)">
            <summary>
            Lets you define your a self defined size to be allocated on the graphics card.
            If not called the allocation size will be the count of the Elements in the Array
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.AutoAllocationSize">
            <summary>
            Use the element count as the allocation size (default behavior)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPart`1.SetFrom(Vintagestory.API.Client.CustomMeshDataPart{`0})">
            <summary>
            Sets a value from a given mesh data part.
            </summary>
            <param name="meshdatapart">the mesh data part for this type.</param>
        </member>
        <member name="T:Vintagestory.API.Client.CustomMeshDataPartByte">
            <summary>
            Holds arbitrary byte data for meshes to be used in the shader
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartByte.#ctor">
            <summary>
            Empty Constructor.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartByte.#ctor(System.Int32)">
            <summary>
            Size initialization constructor.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartByte.AddBytes(System.Int32)">
            <summary>
            adds values to the bytes part per four bytes.
            </summary>
            <param name="fourbytes">the integer mask of four separate bytes.</param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartByte.Clone">
            <summary>
            Creates a clone of this collection of data parts.
            </summary>
            <returns>A clone of this collection of data parts.</returns>
        </member>
        <member name="T:Vintagestory.API.Client.CustomMeshDataPartFloat">
            <summary>
            Holds arbitrary float data for meshes to be used in the shader
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartFloat.#ctor">
            <summary>
            Empty Constructor.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartFloat.#ctor(System.Int32)">
            <summary>
            Size initialization constructor.
            </summary>
            <param name="arraySize"></param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartFloat.Clone">
            <summary>
            Creates a clone of this collection of data parts.
            </summary>
            <returns>A clone of this collection of data parts.</returns>
        </member>
        <member name="T:Vintagestory.API.Client.CustomMeshDataPartInt">
            <summary>
            Holds arbitrary int data for meshes to be used in the shader
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartInt.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartInt.#ctor(System.Int32)">
            <summary>
            Size initialization constructor.
            </summary>
            <param name="arraySize"></param>
        </member>
        <member name="M:Vintagestory.API.Client.CustomMeshDataPartInt.Clone">
            <summary>
            Creates a clone of this collection of data parts.
            </summary>
            <returns>A clone of this collection of data parts.</returns>
        </member>
        <member name="F:Vintagestory.API.Client.LoadedTexture.TextureId">
            <summary>
            The OpenGL Texture Id
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.LoadedTexture.Width">
            <summary>
            Width of the texture.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.LoadedTexture.Height">
            <summary>
            Height of the texture.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.LoadedTexture.IgnoreUndisposed">
            <summary>
            Set this only you really know what you're doing
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.LoadedTexture.#ctor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Creates an empty loaded texture context with the Client API.
            </summary>
            <param name="capi">The Client API</param>
        </member>
        <member name="M:Vintagestory.API.Client.LoadedTexture.#ctor(Vintagestory.API.Client.ICoreClientAPI,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a loaded texture context with pre-set texture information.
            </summary>
            <param name="capi">The Client API</param>
            <param name="textureId">The ID of the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
        </member>
        <member name="M:Vintagestory.API.Client.LoadedTexture.Dispose">
            <summary>
            Disposes of the loaded texture safely.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.MeshData">
            <summary>
            A bit fat data structure that can be used to upload mesh information onto the graphics card
            Please note, all arrays are used as a buffer. They do not tightly fit the data but are always sized as a multiple of 2 from the initial size.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.xyz">
            <summary>
            The x/y/z coordinates buffer. This should hold VerticesCount*3 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Flags">
            <summary>
            The render flags buffer. This should hold VerticesCount*1 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Normals">
            <summary>
            The normals buffer. This should hold VerticesCount*1 values. Currently unused by the engine.
            GL_INT_2_10_10_10_REV Format
            x: bits 0-9    (10 bit signed int)
            y: bits 10-19  (10 bit signed int)
            z: bits 20-29  (10 bit signed int) 
            w: bits 30-31
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Uv">
            <summary>
            The uv buffer for texture coordinates. This should hold VerticesCount*2 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Rgba">
            <summary>
            The vertex color buffer. This should hold VerticesCount*4 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Indices">
            <summary>
            The indices buffer. This should hold IndicesCount values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.CustomFloats">
            <summary>
            Custom floats buffer. Can be used to upload arbitrary amounts of float values onto the graphics card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.CustomInts">
            <summary>
            Custom ints buffer. Can be used to upload arbitrary amounts of int values onto the graphics card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.CustomShorts">
            <summary>
            Custom shorts buffer. Can be used to upload arbitrary amounts of short values onto the graphics card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.CustomBytes">
            <summary>
            Custom bytes buffer. Can be used to upload arbitrary amounts of byte values onto the graphics card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzInstanced">
            <summary>
            When using instanced rendering, set this flag to have the xyz values instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.UvInstanced">
            <summary>
            When using instanced rendering, set this flag to have the uv values instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RgbaInstanced">
            <summary>
            When using instanced rendering, set this flag to have the rgba values instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Rgba2Instanced">
            <summary>
            When using instanced rendering, set this flag to have the rgba2 values instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesInstanced">
            <summary>
            When using instanced rendering, set this flag to have the indices instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.FlagsInstanced">
            <summary>
            When using instanced rendering, set this flag to have the flags instanced.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzStatic">
            <summary>
            xyz vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.UvStatic">
            <summary>
            uv vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RgbaStatic">
            <summary>
            rgab vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Rgba2Static">
            <summary>
            rgba2 vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesStatic">
            <summary>
            indices vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.FlagsStatic">
            <summary>
            flags vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.UvOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RgbaOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.Rgba2Offset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.FlagsOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.NormalsOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesOffset">
            <summary>
            For offseting the data in the VBO. This field is used when updating a mesh.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.mode">
            <summary>
            The meshes draw mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.NormalsCount">
            <summary>
            Amount of currently assigned normals
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.VerticesCount">
            <summary>
            Amount of currently assigned vertices
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesCount">
            <summary>
            Amount of currently assigned indices
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.VerticesMax">
            <summary>
            Vertex buffer size
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndicesMax">
            <summary>
            Index buffer size
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzFaces">
            <summary>
            BlockShapeTesselator xyz faces. Required by TerrainChunkTesselator to determine vertex lightness. Should hold VerticesCount / 4 values. Set to 0 for no face, set to 1..8 for faces 0..7
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzFacesCount">
            <summary>
            Amount of assigned xyz face values
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.ClimateColorMapIds">
            <summary>
            BlockShapeTesselator climate colormap ids. Required by TerrainChunkTesselator to determine whether to color a vertex by a color map or not. Should hold VerticesCount / 4 values. Set to 0 for no color mapping, set 1..n for color map 0..n-1
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.SeasonColorMapIds">
            <summary>
            BlockShapeTesselator season colormap ids. Required by TerrainChunkTesselator to determine whether to color a vertex by a color map or not. Should hold VerticesCount / 4 values. Set to 0 for no color mapping, set 1..n for color map 0..n-1
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RenderPasses">
            <summary>
            BlockShapeTesselator renderpass. Required by TerrainChunkTesselator to determine in which mesh data pool each quad should land in. Should hold VerticesCount / 4 values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.ColorMapIdsCount">
            <summary>
            Amount of assigned tint values
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RenderPassCount">
            <summary>
            Amount of assigned render pass values
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.GetVerticesCount">
            <summary>
            Gets the number of verticies in the the mesh.
            </summary>
            <returns>The number of verticies in this mesh.</returns>
            <remarks>..Shouldn't this be a property?</remarks>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.SetVerticesCount(System.Int32)">
            <summary>
            Sets the number of verticies in this mesh.
            </summary>
            <param name="value">The number of verticies in this mesh</param>
            <remarks>..Shouldn't this be a property?</remarks>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.GetIndicesCount">
            <summary>
            Gets the number of Indicices in this mesh.
            </summary>
            <returns>The number of indicies in the mesh.</returns>
            <remarks>..Shouldn't this be a property?</remarks>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.SetIndicesCount(System.Int32)">
            <summary>
            Sets the number of indices in this mesh.
            </summary>
            <param name="value">The number of indices in this mesh.</param>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.XyzSize">
            <summary>
            The size of the position values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.NormalSize">
            <summary>
            The size of the normals.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.RgbaSize">
            <summary>
            The size of the color.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.UvSize">
            <summary>
            The size of the Uv.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.IndexSize">
            <summary>
            the size of the index.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.MeshData.FlagsSize">
            <summary>
            the size of the flags.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.XyzCount">
            <summary>
            returns VerticesCount * 3
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.RgbaCount">
            <summary>
            returns VerticesCount * 4
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.Rgba2Count">
            <summary>
            returns VerticesCount * 4
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.FlagsCount">
            <summary>
            returns VerticesCount
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.MeshData.UvCount">
            <summary>
            returns VerticesCount * 2
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Translate(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Offset the mesh by given values
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Offset the mesh by given values
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Rotate(Vintagestory.API.MathTools.Vec3f,System.Single,System.Single,System.Single)">
            <summary>
            Rotate the mesh by given angles around given origin
            </summary>
            <param name="origin"></param>
            <param name="radX"></param>
            <param name="radY"></param>
            <param name="radZ"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Scale(Vintagestory.API.MathTools.Vec3f,System.Single,System.Single,System.Single)">
            <summary>
            Scale the mesh by given values around given origin
            </summary>
            <param name="origin"></param>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <param name="scaleZ"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.ModelTransform(Vintagestory.API.Common.ModelTransform)">
            <summary>
            Apply given transformation on the mesh
            </summary>
            <param name="transform"></param>        
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.MatrixTransform(System.Single[])">
            <summary>
            Apply given transformation on the mesh
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.MatrixTransform(System.Single[],System.Single[],Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Apply given transformation on the mesh - specifying two temporary vectors to work in (these can then be re-used for performance reasons)
            </summary>
            <param name="matrix"></param>
            <param name="vec">a re-usable float[4], values unimportant</param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.MatrixTransform(System.Double[])">
            <summary>
            Apply given transformation on the mesh
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.#ctor(System.Boolean)">
            <summary>
            Creates a new mesh data instance with no components initialized.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new mesh data instance with given components, but you can also freely nullify or set individual components after initialization
            Any component that is null is ignored by UploadModel/UpdateModel
            </summary>
            <param name="capacityVertices"></param>
            <param name="capacityIndices"></param>
            <param name="withUv"></param>
            <param name="withNormals"></param>
            <param name="withRgba"></param>
            <param name="withRgba2"></param>
            <param name="withFlags"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.WithColorMaps">
            <summary>
            Sets up the tints array for holding tint info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.WithXyzFaces">
            <summary>
            Sets up the xyzfaces array for holding xyzfaces info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.WithRenderpasses">
            <summary>
            Sets up the renderPasses array for holding render pass info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddMeshData(Vintagestory.API.Client.MeshData,Vintagestory.API.Client.EnumChunkRenderPass)">
            <summary>
            Add supplied mesh data to this mesh. If a given dataset is not set, it is not copied from the sourceMesh. Automatically adjusts the indices for you.
            Is filtered to only add mesh data for given render pass.
            A negative render pass value defaults to EnumChunkRenderPass.Opaque
            </summary>
            <param name="data"></param>
            <param name="filterByRenderPass"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddMeshData(Vintagestory.API.Client.MeshData)">
            <summary>
            Add supplied mesh data to this mesh. If a given dataset is not set, it is not copied from the sourceMesh. Automatically adjusts the indices for you.
            </summary>
            <param name="sourceMesh"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.RemoveIndex">
            <summary>
            Removes the last index in the indices array
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.RemoveVertex">
            <summary>
            Removes the last vertex in the vertices array
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.RemoveVertices(System.Int32)">
            <summary>
            Removes the last "count" vertices from the vertex array
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddWithFlagsVertex(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="color"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertexWithFlags(System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <param name="flags"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddVertex(System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte[])">
            <summary>
            Adds a new vertex to the mesh. Grows the vertex buffer if necessary.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="color"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddNormal(System.Single,System.Single,System.Single)">
            <summary>
            Adds a new normal to the mesh. Grows the normal buffer if necessary.
            </summary>
            <param name="normalizedX"></param>
            <param name="normalizedY"></param>
            <param name="normalizedZ"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.AddNormal(Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Adds a new normal to the mesh. Grows the normal buffer if necessary.
            </summary>
            <param name="facing"></param>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.GrowVertexBuffer">
            <summary>
            Doubles the size of the xyz, uv, rgba, rgba2 and flags arrays
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.CompactBuffers">
            <summary>
            Resizes all buffers to tightly fit the data. Recommended to run this method for long-term in-memory storage of meshdata for meshes that won't get any new vertices added
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Clone">
            <summary>
            Creates a deep copy of the mesh
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.Clear">
            <summary>
            Sets the counts of all data to 0
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.WithTexPos(Vintagestory.API.Client.TextureAtlasPosition)">
            <summary>
            Returns a copy of this mesh with the uvs set to the specified TextureAtlasPosition
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.MeshData.SetTexPos(Vintagestory.API.Client.TextureAtlasPosition)">
            <summary>
            Sets the uvs of this mesh to the specified TextureAtlasPosition
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CloudSideShadings">
            <summary>
            Top, Front/Left, Back/Right, Bottom
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.DefaultBlockSideShadings">
            <summary>
            Top, Front/Left, Back/Right, Bottom
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.DefaultBlockSideShadingsByFacing">
            <summary>
            Shadings by Blockfacing index
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CubeVertices">
            <summary>
            XYZ Vertex postions for every vertex in a cube. Origin is the cube middle point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CubeFaceIndices">
            <summary>
            Cube face indices, in order: North, East, South, West, Up, Down.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CubeUvRotation">
            <summary>
            Cube UV Rotation.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CubeUvCoords">
            <summary>
            UV Coords for every Vertex in a cube
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.CubeVertexIndices">
            <summary>
            Indices for every triangle in a cube
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.CubeMeshUtil.BaseCubeVertexIndices">
            <summary>
            Can be used for any face if offseted correctly
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCube">
            <summary>
            Returns a default 2x2x2 cube with xyz,uv,rgba and indices set - ready for upload to the graphics card
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetShadedCubeRGBA(System.Int32,System.Single[],System.Boolean)">
            <summary>
            Returns a rgba byte array to be used for default shading on a standard cube, can supply the shading levels
            </summary>
            <param name="baseColor"></param>
            <param name="blockSideShadings"></param>
            <param name="smoothShadedSides"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetShadedCubeRGBA(System.Int32[],System.Boolean)">
            <summary>
            Returns a rgba byte array to be used for default shading on a standard cube
            </summary>
            <param name="colorSides"></param>
            <param name="smoothShadedSides"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCubeOnlyScaleXyz(System.Single,System.Single,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Same as GetCubeModelData but can define scale and translation. Scale is applied first.
            </summary>
            <param name="scaleH"></param>
            <param name="scaleV"></param>
            <param name="translate"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCube(System.Single,System.Single,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Same as GetCubeModelData but can define scale and translation. Scale is applied first.
            </summary>
            <param name="scaleH"></param>
            <param name="scaleV"></param>
            <param name="translate"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCube(System.Single,System.Single,System.Single,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Same as GetCubeModelData but can define scale and translation. Scale is applied first.
            </summary>
            <param name="scaleH"></param>
            <param name="scaleV"></param>
            <param name="translate"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCubeFace(Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Gets the face of a given cube.
            </summary>
            <param name="face">The face you want to fetch in cardinal directions.</param>
            <returns>The mesh data for the cube's given face.</returns>
        </member>
        <member name="M:Vintagestory.API.Client.CubeMeshUtil.GetCubeFace(Vintagestory.API.MathTools.BlockFacing,System.Single,System.Single,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Gets the face of a given cube.
            </summary>
            <param name="face">The face you want to fetch in cardinal directions.</param>
            <param name="scaleH">The horizontal scale.</param>
            <param name="scaleV">The vertical scale.</param>
            <param name="translate">The translation desired.</param>
            <returns>The mesh data for the given parameters.</returns>
        </member>
        <member name="T:Vintagestory.API.Client.QuadMeshUtil">
            <summary>
            Utility class for simple quad meshes
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.QuadMeshUtil.GetQuad">
            <summary>
            Returns a single vertical quad mesh of with vertices going from -1/-1 to 1/1
            With UV, without RGBA
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.QuadMeshUtil.GetCustomQuadModelData(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Quad without rgba, with uv
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="dw"></param>
            <param name="dh"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.QuadMeshUtil.GetCustomQuad(System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a single vertical  quad mesh at given position, size and color
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.QuadMeshUtil.GetCustomQuadHorizontal(System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a single horziontal quad mesh with given params
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="width"></param>
            <param name="length"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Client.QuadMeshUtil.GetCustomQuadModelData(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns a custom quad mesh with the given params.
            </summary>
            <param name="u"></param>
            <param name="v"></param>
            <param name="u2"></param>
            <param name="v2"></param>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dw"></param>
            <param name="dh"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Client.TextBackground.Padding">
            <summary>
            The padding around the text.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextBackground.Radius">
            <summary>
            The radius of the text.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextBackground.FillColor">
            <summary>
            The fill color of the background
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextBackground.BorderColor">
            <summary>
            The stroke color of the border
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextBackground.BorderWidth">
            <summary>
            The thickness of the border
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextBackground.Shade">
            <summary>
            Adds a blur to the background
            </summary>
        </member>
        <member name="T:Vintagestory.API.Client.SoundParams">
            <summary>
            The sound paramaters used for loading sounds on the client side
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.Location">
            <summary>
            The specific sound to be played
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.Position">
            <summary>
            The position of the sound
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.RelativePosition">
            <summary>
            If true then Position is added relative to the players current position
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.ShouldLoop">
            <summary>
            If the sound should start again when finished
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.DisposeOnFinish">
            <summary>
            Probably want to set this to false on looping sounds. But remember to dispose it yourself when you no longer need it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.Pitch">
            <summary>
            The sounds intial pitch. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Client.SoundParams.Volume">
            <summary>
            The sounds initial volumne (0f - 1f)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.Range">
            <summary>
            The sounds initial range
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.SoundParams.SoundType">
            <summary>
            Determines whether to apply the music or sound volumne level to the Volume
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.SoundParams.#ctor">
            <summary>
            Empty Constructor.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Client.SoundParams.#ctor(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Constructs the sound based off the asset location.
            </summary>
            <param name="location">The asset location of the track.</param>
        </member>
        <member name="T:Vintagestory.API.Client.TextureAtlasPosition">
            <summary>
            The position of a texture inside an atlas
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.atlasTextureId">
            <summary>
            The OpenGL textureid
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.atlasNumber">
            <summary>
            A sequential number in which atlas this position is in. Atlasses for a given type are sequentially numbered if more than one atlas was required to hold all the textures
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.x1">
            <summary>
            The x coordinate of the texture origin point
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.y1">
            <summary>
            The y coordinate of the texture origin point
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.x2">
            <summary>
            The x coordinate of the texture end point
            </summary>
        </member>
        <member name="F:Vintagestory.API.Client.TextureAtlasPosition.y2">
            <summary>
            The y coordinate of the texture end point
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumWorldAccessResponse.Granted">
            <summary>
            Access ok or was called client side
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumWorldAccessResponse.InSpectatorMode">
            <summary>
            Players in spectator mode may not place blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumWorldAccessResponse.InGuestMode">
            <summary>
            Player tries to place/break blocks but is in guest mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumWorldAccessResponse.PlayerDead">
            <summary>
            Dead players may not place blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumWorldAccessResponse.NoPrivilege">
            <summary>
            This player was not granted the block build or use privilege
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumWorldAccessResponse.LandClaimed">
            <summary>
            Player does not have the build/use blocks every privilege and the position is claimed by another player
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumWorldAccessResponse.DeniedByMod">
            <summary>
            A mod denied use/placement
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IBlockAccessorPrefetch">
            <summary>
            Useful for when you have to scan multiple times over the same set of blocks
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessorPrefetch.PrefetchBlocks(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Pre-loads all blocks inside given area which can then be accessed very quickly using .GetBlock(). 
            This method must be called before using GetBlock()
            </summary>
            <param name="minPos"></param>
            <param name="maxPos"></param>
        </member>
        <member name="P:Vintagestory.API.Common.ILandClaimAPI.All">
            <summary>
            List of all claims on the server. Same as WorldManager.SaveGame.Claims.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ILandClaimAPI.TestAccess(Vintagestory.API.Common.IPlayer,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumBlockAccessFlags)">
            <summary>
            Checks with the permission system if given player has use or place/break permissions on supplied position. Returns always true when called on the client!
            </summary>
            <param name="player"></param>
            <param name="pos"></param>
            <param name="accessFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ILandClaimAPI.TryAccess(Vintagestory.API.Common.IPlayer,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumBlockAccessFlags)">
            <summary>
            Same as <see cref="M:Vintagestory.API.Common.ILandClaimAPI.TestAccess(Vintagestory.API.Common.IPlayer,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumBlockAccessFlags)"/> but also sends an error message to the player and executes a MarkDirty() event the block. Returns always true when called on the client!
            </summary>
            <param name="player"></param>
            <param name="pos"></param>
            <param name="accessFlag"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ILandClaimAPI.Get(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Get all claims registered at this position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ILandClaimAPI.Add(Vintagestory.API.Server.LandClaim)">
            <summary>
            Add a new claim. 
            </summary>
            <param name="claim"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ILandClaimAPI.Remove(Vintagestory.API.Server.LandClaim)">
            <summary>
            Remove a claim. Returns false if no such claim was registered
            </summary>
            <param name="claim"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.BlockEntityBehavior">
            <summary>
            Basic class for block entities - a data structures to hold custom information for blocks, e.g. for chests to hold it's contents
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockEntityBehavior.Blockentity">
            <summary>
            The block for this behavior instance.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockEntityBehavior.properties">
            <summary>
            The properties of this block behavior.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntityBehavior.Initialize(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.JsonObject)">
            <summary>
            Called right after the block behavior was created
            </summary>
            <param name="properties"></param>
        </member>
        <member name="F:Vintagestory.API.Common.CrushingProperties.CrushedStack">
            <summary>
            If set, the block/item is crusable in a pulverizer and this is the resulting itemstack once the crushing time is over.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CrushingProperties.HardnessTier">
            <summary>
            0 = stone, 1 = copper, 2 = bronze, 3 = iron, 4 = steel
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CrushingProperties.Clone">
            <summary>
            Makes a deep copy of the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.HeldSounds.Clone">
            <summary>
            Clones the held sounds.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.EnumTransitionType.Perish">
            <summary>
            For food, animals or non-organic materials
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumTransitionType.Dry">
            <summary>
            Can be dried
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumTransitionType.Burn">
            <summary>
            Can be burned to a crisp :D
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumTransitionType.Convert">
            <summary>
            something else o.O
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumTransitionType.Ripen">
            <summary>
            Cheese ripening
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.TransitionableProperties.Type">
            <summary>
            What kind of transition can it make?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.TransitionableProperties.FreshHours">
            <summary>
            The amount of hours this item stays fresh / untransitioned
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.TransitionableProperties.TransitionHours">
            <summary>
            The amount of hours it takes for the item to transition
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.TransitionableProperties.TransitionedStack">
            <summary>
            The itemstack the item/block turns into upon transitioning
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.TransitionableProperties.TransitionRatio">
            <summary>
            Conversion ratio of fresh stacksize to transitioned stack size
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.TransitionableProperties.Clone">
            <summary>
            Duplicates the properties, which includes cloning the stack that was eaten.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.BarrelRecipeIngredient.ConsumeQuantity">
            <summary>
            If set, the barrel may contain more, but it gets consumed by this amount
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BarrelRecipe.Ingredients">
            <summary>
            ...or alternatively for recipes with multiple ingredients
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BarrelRecipe.GetOutputName(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack[])">
            <summary>
            Gets the name of the output food if one exists.
            </summary>
            <param name="worldForResolve"></param>
            <param name="inputStacks"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BarrelRecipe.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serialized the alloy
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BarrelRecipe.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Deserializes the alloy
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BarrelRecipe.GetNameToCodeMapping(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Resolves Wildcards in the ingredients
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.LayeredVoxelRecipe`1.Resolve(Vintagestory.API.Common.IWorldAccessor,System.String)">
            <summary>
            Resolves the recipe.
            </summary>
            <param name="world"></param>
            <param name="sourceForErrorLogging"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.LayeredVoxelRecipe`1.GenVoxels">
            <summary>
            Generates the voxels for the recipe.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.LayeredVoxelRecipe`1.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serialized the recipe
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.LayeredVoxelRecipe`1.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Deserializes the alloy
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.LayeredVoxelRecipe`1.GetNameToCodeMapping(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Resolves Wildcards in the ingredients
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.LayeredVoxelRecipe`1.WildCardMatch(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.AssetLocation)">
            <summary>
            Matches the wildcards for the clay recipe.
            </summary>
            <param name="wildCard"></param>
            <param name="blockCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityStats.Register(System.String,Vintagestory.API.Common.EnumStatBlendType)">
            <summary>
            Set up a stat. Its not required to call this method, you can go straight to doing .Set() if your blend type is weighted sum. Also initializes a base value of 1.
            </summary>
            <param name="category"></param>
            <param name="blendType"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityStats.Set(System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Set a stat value, if the stat catgory does not exist, it will create a new default one. Initializes a base value of 1 when creating a new stat.
            </summary>
            <param name="category"></param>
            <param name="code"></param>
            <param name="value"></param>
            <param name="persistent"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityStats.Remove(System.String,System.String)">
            <summary>
            Remove a stat value
            </summary>
            <param name="category"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityStats.GetBlended(System.String)">
            <summary>
            Get the final stat value, blended by the stats blend type
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActiveSlotChangeEventArgs">
            <summary>
            This contains data about an event that fires when a player changes which
            slot they're actively using. Such as the currently selected hotbar slot.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ActiveSlotChangeEventArgs.FromSlot">
            <summary>
            The currently active slot being switched away from.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ActiveSlotChangeEventArgs.ToSlot">
            <summary>
            The target slot that is being switched to.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IBlockEntityRotatable">
            <summary>
            Implement this interface if schematics containing this block entity needs to modify it's tree attribute data. Beware, this method is called without
            the block entity existing in the world (yet). The modified tree will then be used to actually create the block
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockEntityRotatable.OnTransformed(Vintagestory.API.Datastructures.ITreeAttribute,System.Int32,System.Nullable{Vintagestory.API.MathTools.EnumAxis})">
            <summary>
            If flipAxis is null it means it was not flipped, only horizontally rotated. Apply flip first, and then rotation.
            </summary>
            <param name="tree"></param>
            <param name="degreeRotation"></param>
            <param name="flipAxis"></param>
        </member>
        <member name="T:Vintagestory.API.Common.VertexFlags">
            <summary>
            Special class to handle the vertex flagging in a very nicely compressed space.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.VertexFlags.Clone">
            <summary>
            Clones this set of vertex flags.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CreativeTabAndStackList.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IClassRegistryAPI)">
            <summary>
            Reads the blocks and items from the Json files and converts them to an array of tabs which contain those blocks and items.
            </summary>
            <param name="reader">The reader to read the json.</param>
            <param name="registry">The registry of blocks and items.</param>
        </member>
        <member name="M:Vintagestory.API.Common.CreativeTabAndStackList.ToBytes(System.IO.BinaryWriter,Vintagestory.API.Common.IClassRegistryAPI)">
            <summary>
            Writes all the data to the BinaryWriter.
            </summary>
            <param name="writer">The writer to write the save data</param>
            <param name="registry">The registry of blocks and items.</param>
        </member>
        <member name="F:Vintagestory.API.Common.GrindingProperties.GroundStack">
            <summary>
            If set, the block/item is grindable in a quern and this is the resulting itemstack once the grinding time is over.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.GrindingProperties.Clone">
            <summary>
            Makes a deep copy of the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.VanillaCookingRecipeNames.GetNameForIngredients(Vintagestory.API.Common.IWorldAccessor,System.String,Vintagestory.API.Common.ItemStack[])">
            <summary>
            Gets the name for ingredients in regards to food.
            </summary>
            <param name="worldForResolve">The world to resolve in.</param>
            <param name="recipeCode">The recipe code.</param>
            <param name="stacks">The stacks of items to add.</param>
            <returns>The name of the food type.</returns>
        </member>
        <member name="T:Vintagestory.API.Common.ICookingRecipeNamingHelper">
            <summary>
            Interface for a helper for cooking various food in game.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ICookingRecipeNamingHelper.GetNameForIngredients(Vintagestory.API.Common.IWorldAccessor,System.String,Vintagestory.API.Common.ItemStack[])">
            <summary>
            Gets the name for ingredients in regards to food.
            </summary>
            <param name="worldForResolve">The world to resolve in.</param>
            <param name="recipeCode">The recipe code.</param>
            <param name="stacks">The stacks of items to add.</param>
            <returns>The name of the food type.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.CookingRecipe.GetOutputName(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack[])">
            <summary>
            Gets the name of the output food if one exists.
            </summary>
            <param name="worldForResolve"></param>
            <param name="inputStacks"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CookingRecipe.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serialized the alloy
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CookingRecipe.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Deserializes the alloy
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="F:Vintagestory.API.Common.CookingRecipeIngredient.Code">
            <summary>
            The code for the recipe ingredient.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CookingRecipeIngredient.MinQuantity">
            <summary>
            The minimum quantity required for the given ingredient.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CookingRecipeIngredient.MaxQuantity">
            <summary>
            The maximum quantity required for the given ingredient.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CookingRecipeIngredient.world">
            <summary>
            The world accessor for the ingredient.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CookingRecipeIngredient.Clone">
            <summary>
            Creates a deep copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CookingRecipeIngredient.Matches(Vintagestory.API.Common.ItemStack)">
            <summary>
            Checks to see whether or not the itemstack matches the ingredient.
            </summary>
            <param name="inputStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CookingRecipeIngredient.GetMatchingStack(Vintagestory.API.Common.ItemStack)">
            <summary>
            Attempts to get a matching ingredient stack for the given input.
            </summary>
            <param name="inputStack"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.EntityBehaviorNameTag.DisplayName">
            <summary>
            The display name for the entity.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityBehaviorNameTag.ShowOnlyWhenTargeted">
            <summary>
            Whether or not to show the nametag constantly or only when being looked at.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityBehaviorNameTag.SetName(System.String)">
            <summary>
            Sets the display name of the entity to playername.
            </summary>
            <param name="playername"></param>
        </member>
        <member name="M:Vintagestory.API.Common.FrameProfilerUtil.Begin">
            <summary>
            Called by the game engine for each render frame or server tick
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.FrameProfilerUtil.Mark(System.String)">
            <summary>
            Use this method to add a frame profiling marker, will set or add the time ellapsed since the previous mark to the frame profiling reults.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Vintagestory.API.Common.FrameProfilerUtil.Skip">
            <summary>
            Same as Mark(), but without actually taking note on where the time was spent
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.FrameProfilerUtil.End">
            <summary>
            Called by the game engine at the end of the render frame or server tick
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Code">
            <summary>
            The entity code in the code.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Variant">
            <summary>
            Variant values as resolved from blocktype/itemtype or entitytype
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Class">
            <summary>
            The classification of the entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Habitat">
            <summary>
            Natural habitat of the entity. Decides whether to apply gravity or not
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.HitBoxSize">
            <summary>
            The size of the entity's hitbox (default: 0.2f/0.2f)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.DeadHitBoxSize">
            <summary>
            The size of the hitbox while the entity is dead.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.EyeHeight">
            <summary>
            How high the camera should be placed if this entity were to be controlled by the player
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityProperties.SetEyeHeight(System.Double)">
            <summary>
            Sets the eye height of the entity.
            </summary>
            <param name="height"></param>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Weight">
            <summary>
            The mass of this type of entity in kilograms, on average - defaults to 25kg (medium-low) if not set by the asset
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.CanClimb">
            <summary>
            If true the entity can climb on walls
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.CanClimbAnywhere">
            <summary>
            If true the entity can climb anywhere.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.FallDamage">
            <summary>
            Whether the entity should take fall damage
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.RotateModelOnClimb">
            <summary>
            Should the model in question rotate if climbing?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.KnockbackResistance">
            <summary>
            The resistance to being pushed back by an impact.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Attributes">
            <summary>
            The attributes of the entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Client">
            <summary>
            The client properties of the entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Server">
            <summary>
            The server properties of the entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Sounds">
            <summary>
            The sounds that this entity can make.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.ResolvedSounds">
            <summary>
            The sounds this entity can make after being resolved.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.IdleSoundChance">
            <summary>
            The chance that an idle sound will play for the entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.IdleSoundRange">
            <summary>
            The sound range for the idle sound in blocks.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityProperties.Drops">
            <summary>
            The drops for the entity when they are killed.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityProperties.SpawnCollisionBox">
            <summary>
            The collision box they have.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityProperties.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityProperties.Initialize(Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Initalizes the properties for the entity.
            </summary>
            <param name="entity">the entity to tie this to.</param>
            <param name="api">The Core API</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityProperties.InitSounds(Vintagestory.API.Common.IAssetManager)">
            <summary>
            Initializes the sounds for this entity type.
            </summary>
            <param name="assetManager"></param>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntitySidedProperties.Behaviors">
            <summary>
            The behaviors attached to this entity.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntitySidedProperties.Clone">
            <summary>
            Use this to make a deep copy of these properties.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityClientProperties.Renderer">
            <summary>
            Set by the game client
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityClientProperties.RendererName">
            <summary>
            Name of there renderer system that draws this entity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityClientProperties.Textures">
            <summary>
            Directory of all available textures. First one will be default one
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityClientProperties.Texture">
            <summary>
            Used by various renderers to retrieve the entities texture it should be drawn with
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityClientProperties.GlowLevel">
            <summary>
            The glow level for the entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityClientProperties.Shape">
            <summary>
            The shape of the entity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityClientProperties.LoadedShape">
            <summary>
            Only loaded for World.EntityTypes instances of EntityProperties, because it makes no sense to have 1000 loaded entities needing to load 1000 shapes. During entity load/spawn this value is assigned however
            On the client it gets set by the EntityTextureAtlasManager
            On the server by the EntitySimulation system
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityClientProperties.Size">
            <summary>
            The size of the entity (default: 1f)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityClientProperties.Animations">
            <summary>
            The animations of the entity.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityClientProperties.FirstTexture">
            <summary>
            Returns the first texture in Textures dict
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityClientProperties.LoadShape(Vintagestory.API.Common.Entities.EntityProperties,Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Loads the shape of the entity.
            </summary>
            <param name="entityTypeForLogging">The entity to shape</param>
            <param name="api">The Core API</param>
            <returns>The loaded shape.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityClientProperties.Init(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Initializes the client properties.
            </summary>
            <param name="entityTypeCode"></param>
            <param name="world"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityClientProperties.Clone">
            <summary>
            Does not clone textures and shapes
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityServerProperties.Attributes">
            <summary>
            The attributes of the entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityServerProperties.SpawnConditions">
            <summary>
            The conditions for spawning the entity.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityServerProperties.Clone">
            <summary>
            Makes a copy of this EntiyServerProperties type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.SpawnConditions">
            <summary>
            The spawn conditions assigned to various things.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.SpawnConditions.Runtime">
            <summary>
            Runtime requirements for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.SpawnConditions.Worldgen">
            <summary>
            Worldgen/region requirements for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.RuntimeSpawnConditions.Chance">
            <summary>
            The chance for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.RuntimeSpawnConditions.MaxQuantity">
            <summary>
            The max quantity of objects to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.RuntimeSpawnConditions.MinDistanceToPlayer">
            <summary>
            The minimum distance from the player that an object will spawn.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.RuntimeSpawnConditions.Clone">
            <summary>
            Creates a deep copy of this set of spawn conditions.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.WorldGenSpawnConditions.TriesPerChunk">
            <summary>
            The amount of time the object will attempt to spawn per chunk.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.Group">
            <summary>
            The group of the spawn conditions.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MinLightLevel">
            <summary>
            The minimum light level for an object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MaxLightLevel">
            <summary>
            The maximum light level for an object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.LightLevelType">
            <summary>
            The type of light counted for spawning purposes.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.HerdSize">
            <summary>
            the group size for the spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.Companions">
            <summary>
            Additional companions for the spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.InsideBlockCodes">
            <summary>
            The blocks that the object will spawn in.  (default: air)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.RequireSolidGround">
            <summary>
            Checks to see if the object requires solid ground.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.TryOnlySurface">
            <summary>
            checks to see if the object can only spawn in the surface.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.ClimateValueMode">
            <summary>
            Whether the rain and temperature values are referring to the worldgen values (i.e. yearly averages) or the current values at the moment of spawning
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MinTemp">
            <summary>
            The minimum tempurature for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MaxTemp">
            <summary>
            The maximum tempurature for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MinRain">
            <summary>
            The minimum amount of rain for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MaxRain">
            <summary>
            The maximum amount of rain for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MinForest">
            <summary>
            The minimum amount of forest cover needed for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MaxForest">
            <summary>
            The maximum amount of forest cover needed for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MinShrubs">
            <summary>
            The minimum amount of shrubbery needed for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MaxShrubs">
            <summary>
            The maximum amount of shrubbery needed for the object to spawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MinY">
            <summary>
            Won't span below minY. 0...1 is world bottom to sea level, 1...2 is sea level to world top
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MaxY">
            <summary>
            Won't span above maxY. 0...1 is world bottom to sea level, 1...2 is sea level to world top
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.BaseSpawnConditions.MinForestOrShrubs">
            <summary>
            The minimum amount of forest or shrubs for the object to spawn.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.EntityRenderer">
            <summary>
            Base class for entity rendering
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityRenderer.entity">
            <summary>
            The current entity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityRenderer.capi">
            <summary>
            A reference to the client api
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.#ctor(Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Creates a new entity renderer instance
            </summary>
            <param name="entity"></param>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.OnEntityLoaded">
            <summary>
            Called when the entity is now fully either spawned or fully loaded
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender3DOpaque(System.Single,System.Boolean)">
            <summary>
            Draw call with no shader initialized
            </summary>
            <param name="dt"></param>
            <param name="isShadowPass"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender3DOpaqueBatched(System.Single,System.Boolean)">
            <summary>
            Draw call with the Entityanimated shader loaded and initialized with the correct color/fog/sunlight/texture values
            If shadows are enabled, then this method is called again with shadowmap shader intialized
            </summary>
            <param name="dt"></param>
            <param name="isShadowPass"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender2D(System.Single)">
            <summary>
            Ortho mode draw call for 2d gui stuff, like name tags. Gui shader initialized already.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.RenderToGui(System.Single,System.Double,System.Double,System.Double,System.Single,System.Single)">
            <summary>
            Called before gui rendering starts. Drawing of the whole model into a gui dialog. Gui shader initialized already.
            </summary>
            <param name="dt"></param>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="yawDelta"></param>
            <param name="size"></param>
            <param name="meshRef"></param>
            <param name="modelviewMatrix"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.BeforeRender(System.Single)">
            <summary>
            Called before in-world rendering starts
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.Dispose">
            <summary>
            Should free up all the resources
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender3DOIT(System.Single)">
            <summary>
            Render call for the transparent pass
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityRenderer.DoRender3DOITBatched(System.Single)">
            <summary>
            Batched render call for the transparent pass
            </summary>
            <param name="dt"></param>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.Entity">
            <summary>
            The basic class for all entities in the game
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.World">
            <summary>
            World where the entity is spawned in. Available on the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.Api">
            <summary>
            The api, if you need it. Available on the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.PhysicsUpdateWatcher">
            <summary>
            The vanilla physics systems will call this method if a physics behavior was assigned to it. The game client for example requires this to be called for the current player to properly render the player. Available on the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.AnimManager">
            <summary>
            Server simulated animations. Only takes care of stopping animations once they're done
            Set and Called by the Entities ServerSystem
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.ActivityTimers">
            <summary>
            An uptime value running activities. Available on the game client and server. Not synchronized.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.Pos">
            <summary>
            Client position
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.ServerPos">
            <summary>
            Server simulated position. May not exactly match the client positon
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.PreviousServerPos">
            <summary>
            Server simulated position copy. Needed by Entities server system to send pos updatess only if ServerPos differs noticably from PreviousServerPos
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.PositionBeforeFalling">
            <summary>
            The position where the entity last had contact with the ground. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.CollisionBox">
            <summary>
            The entities collision box. Offseted by the animation system when necessary. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.OriginCollisionBox">
            <summary>
            The entities collision box. Not Offseted. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.Teleporting">
            <summary>
            Used by the teleporter block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.IsTeleport">
            <summary>
            Used by the server to tell connected clients that the next entity position packet should not have its position change get interpolated. Gets set to false after the packet was sent
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.EntityId">
            <summary>
            A unique identifier for this entity. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.SimulationRange">
            <summary>
            The range in blocks the entity has to be to a client to do physics and AI. When outside range, then <seealso cref="F:Vintagestory.API.Common.Entities.Entity.State"/> will be set to inactive
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.ClimbingOnFace">
            <summary>
            The face the entity is climbing on. Null if the entity is not climbing. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.ClimbingOnCollBox">
            <summary>
            Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.OnGround">
            <summary>
            True if this entity is in touch with the ground. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.FeetInLiquid">
            <summary>
            True if the bottom of the collisionbox is inside a liquid. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.Swimming">
            <summary>
            True if the collisionbox is 2/3rds submerged in liquid. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.CollidedVertically">
            <summary>
            True if the entity is in touch with something solid on the vertical axis. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.CollidedHorizontally">
            <summary>
            True if the entity is in touch with something solid on both horizontal axes. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.State">
            <summary>
            The current entity state. Stored in WatchedAttributes in from/tobytes, so available on the client and server side
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.WatchedAttributes">
            <summary>
            Permanently stored entity attributes that are sent to client everytime they have been changed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.DebugAttributes">
            <summary>
            If entity debug mode is on, this info will be transitted to client and displayed above the entities head
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.Attributes">
            <summary>
            Permanently stored entity attributes that are only client or only server side
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.IsRendered">
            <summary>
            Set by the client renderer when the entity was rendered last frame
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.IsShadowRendered">
            <summary>
            Set by the client renderer when the entity shadow was rendered last frame
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.Entity.HurtColor">
            <summary>
            Color used when the entity is being attacked
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.IsInteractable">
            <summary>
            Should return true when this entity should be interactable by a player or other entities
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.SwimmingOffsetY">
            <summary>
            Used for passive physics simulation, together with the MaterialDensity to check how deep in the water the entity should float
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.Collided">
            <summary>
            CollidedVertically || CollidedHorizontally
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.SidedPos">
            <summary>
            ServerPos on server, Pos on client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.LocalEyePos">
            <summary>
            The height of the eyes for the given entity.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.ApplyGravity">
            <summary>
            If gravity should applied to this entity
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.MaterialDensity">
            <summary>
            Determines on whether an entity floats on liquids or not and how strongly items get pushed by water. Water has a density of 1000.
            A density below 1000 means the entity floats on top of water if has a physics simulation behavior attached to it.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.LightHsv">
            <summary>
            If set, the entity will emit dynamic light
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.ShouldDespawn">
            <summary>
            If the entity should despawn next server tick. By default returns !Alive for non-creatures and creatures that don't have a Decay behavior
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.StoreWithChunk">
            <summary>
            Players and whatever the player rides on will be stored seperatly
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.AlwaysActive">
            <summary>
            Whether this entity should always stay in Active model, regardless on how far away other player are
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.Alive">
            <summary>
            True if the entity is in state active or inactive
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.RenderColor">
            <summary>
            Used by some renderers to apply an overal color tint on the entity
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.Entity.LadderFixDelta">
            <summary>
            A small offset used to prevent players from clipping through the blocks above ladders: relevant if the entity's collision box is sometimes adjusted by the game code
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.#ctor">
            <summary>
            Creates a new instance of an entity
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnHurt(Vintagestory.API.Common.DamageSource,System.Single)">
            <summary>
            Called when the entity got hurt. On the client side, dmgSource is null
            </summary>
            <param name="dmgSource"></param>
            <param name="damage"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.Initialize(Vintagestory.API.Common.Entities.EntityProperties,Vintagestory.API.Common.ICoreAPI,System.Int64)">
            <summary>
            Called when this entity got created or loaded
            </summary>
            <param name="properties"></param>
            <param name="api"></param>
            <param name="InChunkIndex3d"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TryGiveItemStack(Vintagestory.API.Common.ItemStack)">
            <summary>
            Called when something tries to given an itemstack to this entity
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.GetDrops(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer)">
            <summary>
            Is called before the entity is killed, should return what items this entity should drop. Return null or empty array for no drops.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportToDouble(System.Double,System.Double,System.Double,Vintagestory.API.Common.Action)">
            <summary>
            Teleports the entity to given position. Actual teleport is delayed until target chunk is loaded.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportTo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Teleports the entity to given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportTo(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Teleports the entity to given position
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportTo(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Teleports the entity to given position
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.TeleportTo(Vintagestory.API.Common.Entities.EntityPos,Vintagestory.API.Common.Action)">
            <summary>
            Teleports the entity to given position
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.ReceiveDamage(Vintagestory.API.Common.DamageSource,System.Single)">
            <summary>
            Called when the entity should be receiving damage from given source
            </summary>
            <param name="damageSource"></param>
            <param name="damage"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.ShouldReceiveDamage(Vintagestory.API.Common.DamageSource,System.Single)">
            <summary>
            Should return true if the entity can get damaged by given damageSource. Is called by ReceiveDamage.
            </summary>
            <param name="damageSource"></param>
            <param name="damage"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnGameTick(System.Single)">
            <summary>
            Called every 1/75 second
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnTesselation(Vintagestory.API.Common.Shape@,System.String)">
            <summary>
            Called by EntityShapeRenderer.cs before tesselating the entity shape
            </summary>
            <param name="entityShape"></param>
            <param name="shapePathForLogging"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnFallToGround(System.Double)">
            <summary>
            Called when the entity collided vertically
            </summary>
            <param name="motionY"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnCollided">
            <summary>
            Called when the entity collided with something solid and <see cref="P:Vintagestory.API.Common.Entities.Entity.Collided"/> was false before
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnCollideWithLiquid">
            <summary>
            Called when the entity got in touch with a liquid
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnEntityLoaded">
            <summary>
            Called when after the got loaded from the savegame (not called during spawn)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnEntitySpawn">
            <summary>
            Called when the entity spawns (not called when loaded from the savegame).
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnEntityDespawn(Vintagestory.API.Common.Entities.EntityDespawnReason)">
            <summary>
            Called when the entity despawns
            </summary>
            <param name="despawn"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnExitedLiquid">
            <summary>
            Called when the entity has left a liquid
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnInteract(Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.ItemSlot,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.EnumInteractMode)">
            <summary>
            Called when an entity has interacted with this entity
            </summary>
            <param name="byEntity"></param>
            <param name="itemslot">If being interacted with a block/item, this should be the slot the item is being held in</param>
            <param name="hitPosition">Relative position on the entites hitbox where the entity interacted at</param>
            <param name="mode">0 = attack, 1 = interact</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.GetInteractionHelp(Vintagestory.API.Client.IClientWorldAccessor,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Client.IClientPlayer)">
            <summary>
            Called when a player looks at the entity with interaction help enabled
            </summary>
            <param name="world"></param>
            <param name="es"></param>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnReceivedServerPos(System.Boolean)">
            <summary>
            Called by client when a new server pos arrived
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnReceivedClientPacket(Vintagestory.API.Server.IServerPlayer,System.Int32,System.Byte[])">
            <summary>
            Called when on the client side something called capi.Network.SendEntityPacket()
            </summary>
            <param name="player"></param>
            <param name="packetid"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnReceivedServerPacket(System.Int32,System.Byte[])">
            <summary>
            Called when on the server side something called sapi.Network.SendEntityPacket()
            Packetid = 1 is used for teleporting
            Packetid = 2 is used for BehaviorHarvestable
            </summary>
            <param name="packetid"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnCollected(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Called by BehaviorCollectEntities of nearby entities. Should return the itemstack that should be collected. If the item stack was fully picked up, BehaviorCollectEntities will kill this entity
            </summary>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.OnStateChanged(Vintagestory.API.Common.EnumEntityState)">
            <summary>
            Called on the server when the entity was changed from active to inactive state or vice versa
            </summary>
            <param name="beforeState"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.SetHitbox(System.Single,System.Single)">
            <summary>
            Helper method to set the CollisionBox
            </summary>
            <param name="length"></param>
            <param name="height"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.AddBehavior(Vintagestory.API.Common.Entities.EntityBehavior)">
            <summary>
            Adds given behavior to the entities list of active behaviors
            </summary>
            <param name="behavior"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.RemoveBehavior(Vintagestory.API.Common.Entities.EntityBehavior)">
            <summary>
            Removes given behavior to the entities list of active behaviors. Does nothing if the behavior has already been removed
            </summary>
            <param name="behavior"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.HasBehavior(System.String)">
            <summary>
            Returns true if the entity has given active behavior
            </summary>
            <param name="behaviorName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.GetBehavior(System.String)">
            <summary>
            Returns the behavior instance for given entity. Returns null if it doesn't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.GetBehavior``1">
            <summary>
            Returns the first behavior instance for given entity of given type. Returns null if it doesn't exist.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.IsActivityRunning(System.String)">
            <summary>
            Returns true if given activity is running
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.RemainingActivityTime(System.String)">
            <summary>
            Returns the remaining time on an activity in milliesconds
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.SetActivityRunning(System.String,System.Int32)">
            <summary>
            Starts an activity for a given duration
            </summary>
            <param name="key"></param>
            <param name="milliseconds"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.UpdateDebugAttributes">
            <summary>
            Updates the DebugAttributes tree
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.ToBytes(System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Serializes the slots contents to be stored in the SaveGame
            </summary>
            <param name="writer"></param>
            <param name="forClient">True when being used to send an entity to the client</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.FromBytes(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Loads the entity from a stored byte array from the SaveGame
            </summary>
            <param name="reader"></param>
            <param name="fromServer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.Revive">
            <summary>
            Revives the entity and heals for 9999.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.Die(Vintagestory.API.Common.EnumDespawnReason,Vintagestory.API.Common.DamageSource)">
            <summary>
            Makes the entity despawn. Entities only drop something on EnumDespawnReason.Death
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.PlayEntitySound(System.String,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single)">
            <summary>
            Assumes that it is only called on the server
            </summary>
            <param name="type"></param>
            <param name="dualCallByPlayer"></param>
            <param name="randomizePitch"></param>
            <param name="range"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.CanCollect(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Should return true if this item can be picked up as an itemstack
            </summary>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.Notify(System.String,System.Object)">
            <summary>
            This method pings the Notify() method of all behaviors and ai tasks. Can be used to spread information to other creatures.
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.HasEmotionState(System.String)">
            <summary>
            True if given emotion state is currently set
            </summary>
            <param name="statecode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.WillExport(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            This method is called by the BlockSchematic class a moment before a schematic containing this entity is getting exported.
            Since a schematic can be placed anywhere in the world, this method has to make sure the entities position is set to a value
            relative of the schematic origin point defined by startPos
            Right after calling this method, the world edit system will call .ToBytes() to serialize the entity
            </summary>
            <param name="startPos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.DidImportOrExport(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            This method is called by the BlockSchematic class a moment after a schematic containing this entity has been exported. 
            Since a schematic can be placed anywhere in the world, this method has to make sure the entities position is set to the correct 
            position in relation to the target position of the schematic to be imported.
            </summary>
            <param name="startPos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.GetName">
            <summary>
            Gets the name for this entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.GetInfoText">
            <summary>
            gets the info text for the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.StartAnimation(System.String)">
            <summary>
            Starts the animation for the entity.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.Entity.StopAnimation(System.String)">
            <summary>
            stops the animation for the entity.
            </summary>
            <param name="code"></param>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.EntityBehavior">
            <summary>
            Defines a basic entity behavior that can be attached to entities
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.Initialize(Vintagestory.API.Common.Entities.EntityProperties,Vintagestory.API.JsonObject)">
            <summary>
            Initializes the entity.
            </summary>
            <param name="properties">The properties of this entity.</param>
            <param name="attributes">The attributes of this entity.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnGameTick(System.Single)">
            <summary>
            The event fired when a game ticks over.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnEntitySpawn">
            <summary>
            The event fired when the entity is spawned (not called when loaded from the savegame).
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnEntityLoaded">
            <summary>
            The event fired when the entity is loaded from disk (not called during spawn)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnEntityDespawn(Vintagestory.API.Common.Entities.EntityDespawnReason)">
            <summary>
            The event fired when the entity is despawned.
            </summary>
            <param name="despawn">The reason the entity despawned.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.PropertyName">
            <summary>
            The name of the property tied to this entity behavior.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnEntityReceiveDamage(Vintagestory.API.Common.DamageSource,System.Single)">
            <summary>
            The event fired when the entity recieves damage.
            </summary>
            <param name="damageSource">The source of the damage</param>
            <param name="damage">The amount of the damage.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnEntityRevive">
            <summary>
            When the entity got revived (only for players and traders currently)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnFallToGround(Vintagestory.API.MathTools.Vec3d,System.Double)">
            <summary>
            The event fired when the entity falls to the ground.
            </summary>
            <param name="lastTerrainContact">the point which the entity was previously on the ground.</param>
            <param name="withYMotion">The vertical motion the entity had before landing on the ground.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnEntityReceiveSaturation(System.Single,Vintagestory.API.Common.EnumFoodCategory,System.Single,System.Single)">
            <summary>
            The event fired when the entity recieves saturation.
            </summary>
            <param name="saturation">The amount of saturation recieved.</param>
            <param name="foodCat">The category of food recieved.</param>
            <param name="saturationLossDelay">The delay before the loss of saturation.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnReceivedServerPos(System.Boolean,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            The event fired when the server position is changed.
            </summary>
            <param name="isTeleport">Whether or not this entity was teleported.</param>
            <param name="handled">How this event is handled.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.GetDrops(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            gets the drops for this specific entity.
            </summary>
            <param name="world">The world of this entity</param>
            <param name="pos">The block position of the entity.</param>
            <param name="byPlayer">The player this entity was killed by.</param>
            <param name="handling">How this event was handled.</param>
            <returns>the items dropped from this entity</returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnStateChanged(Vintagestory.API.Common.EnumEntityState,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            The event fired when the state of the entity is changed.
            </summary>
            <param name="beforeState">The previous state.</param>
            <param name="handling">How this event was handled.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.Notify(System.String,System.Object)">
            <summary>
            The notify method bubbled up from entity.Notify()
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.GetInfoText(System.Text.StringBuilder)">
            <summary>
            Gets the information text when highlighting this entity.
            </summary>
            <param name="infotext">The supplied stringbuilder information.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnEntityDeath(Vintagestory.API.Common.DamageSource)">
            <summary>
            The event fired when the entity dies.
            </summary>
            <param name="damageSourceForDeath">The source of damage for the entity.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnInteract(Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.ItemSlot,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.EnumInteractMode,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            The event fired when the entity is interacted with by the player.
            </summary>
            <param name="byEntity">The entity it was interacted with.</param>
            <param name="itemslot">The item slot involved (if any)</param>
            <param name="hitPosition">The hit position of the entity.</param>
            <param name="mode">The interaction mode for the entity.</param>
            <param name="handled">How this event is handled.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnReceivedClientPacket(Vintagestory.API.Server.IServerPlayer,System.Int32,System.Byte[],Vintagestory.API.Common.EnumHandling@)">
            <summary>
            The event fired when the server receives a packet.
            </summary>
            <param name="player">The server player.</param>
            <param name="packetid">the packet id.</param>
            <param name="data">The data contents.</param>
            <param name="handled">How this event is handled.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.OnReceivedServerPacket(System.Int32,System.Byte[],Vintagestory.API.Common.EnumHandling@)">
            <summary>
            The event fired when the client receives a packet.
            </summary>
            <param name="player"></param>
            <param name="packetid"></param>
            <param name="data"></param>
            <param name="handled"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityBehavior.GetInteractionHelp(Vintagestory.API.Client.IClientWorldAccessor,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Client.IClientPlayer,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when a player looks at the entity with interaction help enabled
            </summary>
            <param name="world"></param>
            <param name="es"></param>
            <param name="player"></param>
            <param name="handled"></param>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityDespawnReason.reason">
            <summary>
            The reason this entity despawned.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.EntityDespawnReason.damageSourceForDeath">
            <summary>
            In the case of death, this was the damage source.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.EntityPos">
            <summary>
            Represents all positional information of an entity, such as coordinates, motion and angles
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.X">
            <summary>
            The X position of the Entity.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.Y">
            <summary>
            The Y position of the Entity.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.Z">
            <summary>
            The Z position of the Entity.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.Roll">
            <summary>
            The rotation around the X axis, in radians.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.Yaw">
            <summary>
            The rotation around the Y axis, in radians.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.Pitch">
            <summary>
            The rotation around the Z axis, in radians.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.AsBlockPos">
            <summary>
            Returns the position as BlockPos object
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.XYZInt">
            <summary>
            Returns the position as a Vec3i object
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.XYZ">
            <summary>
            Returns the position as a Vec3d object
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.EntityPos.XYZFloat">
            <summary>
            Returns the position as a Vec3f object
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetPos(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Sets this position to a Vec3d
            </summary>
            <param name="pos">The Vec3d to set to.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the entity position.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetPos(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Sets the entity position.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetPos(System.Double,System.Double,System.Double)">
            <summary>
            Sets the entity position.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetPos(Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Sets the entity position.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetAngles(Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Sets the entity angles.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetAngles(System.Single,System.Single,System.Single)">
            <summary>
            Sets the entity position.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetYaw(System.Single)">
            <summary>
            Sets the Yaw of this entity.
            </summary>
            <param name="yaw"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(Vintagestory.API.Common.Entities.EntityPos,System.Int32)">
            <summary>
            Returns true if the entity is within given distance of the other entity
            </summary>
            <param name="position"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InHorizontalRangeOf(System.Int32,System.Int32,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(System.Double,System.Double,System.Double,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(Vintagestory.API.MathTools.BlockPos,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given block position
            </summary>
            <param name="pos"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(Vintagestory.API.MathTools.Vec3f,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="pos"></param>
            <param name="squareDistance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.InRangeOf(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single)">
            <summary>
            Returns true if the entity is within given distance of given position
            </summary>
            <param name="position"></param>
            <param name="horRangeSq"></param>
            <param name="vertRange"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SquareDistanceTo(System.Single,System.Single,System.Single)">
            <summary>
            Returns the squared distance of the entity to this position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SquareDistanceTo(System.Double,System.Double,System.Double)">
            <summary>
            Returns the squared distance of the entity to this position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SquareDistanceTo(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Returns the squared distance of the entity to this position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SquareDistanceTo(Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Returns the squared distance of the entity to this position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.Copy">
            <summary>
            Creates a full copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.GetViewVector">
            <summary>
            Same as AheadCopy(1) - AheadCopy(0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.GetViewVector(System.Single,System.Single)">
            <summary>
            Same as AheadCopy(1) - AheadCopy(0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.AheadCopy(System.Double)">
            <summary>
            Returns a new entity position that is in front of the position the entity is currently looking at
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.HorizontalAheadCopy(System.Double)">
            <summary>
            Returns a new entity position that is in front of the position the entity is currently looking at using only the entities yaw, meaning the resulting coordinate will be always at the same y position.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.BehindCopy(System.Double)">
            <summary>
            Returns a new entity position that is behind of the position the entity is currently looking at
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.BasicallySameAs(Vintagestory.API.Common.Entities.EntityPos,System.Single)">
            <summary>
            Makes a "basiclly equals" check on the position, motions and angles using a small tolerance of epsilon=0.0001f 
            </summary>
            <param name="pos"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.BasicallySameAsIgnoreMotion(Vintagestory.API.Common.Entities.EntityPos,System.Single)">
            <summary>
            Makes a "basiclly equals" check on the position, motions and angles using a small tolerance of epsilon=0.0001f. Ignores motion
            </summary>
            <param name="pos"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.BasicallySameAsIgnoreAngles(Vintagestory.API.Common.Entities.EntityPos,System.Single)">
            <summary>
            Makes a "basiclly equals" check on position and motions using a small tolerance of epsilon=0.0001f. Ignores the entities angles.
            </summary>
            <param name="pos"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetFrom(Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Loads the position and angles from given entity position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.SetFrom(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Loads the position from given position.
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serializes all positional information
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.EntityPos.FromBytes(System.IO.BinaryReader)">
            <summary>
            Deserializes all positional information
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Vintagestory.API.Common.Entities.SyncedEntityPos">
            <summary>
            Represents an EntityPos thats synced over the network using a dirty flag and regular is-dirty checks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.SyncedEntityPos.XInternal">
            <summary>
            Internally sets the value of X.  This may cause desync.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.SyncedEntityPos.YInternal">
            <summary>
            Internally sets the value of Y.  This may cause desync.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.SyncedEntityPos.ZInternal">
            <summary>
            Internally sets the value of Z.  This may cause desync.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.SyncedEntityPos.RollInternal">
            <summary>
            Sets the roll of the Entity Position.  This may cause desync.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.SyncedEntityPos.YawInternal">
            <summary>
            Sets the yaw of the Entity Position.  This may cause desync.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.SyncedEntityPos.PitchInternal">
            <summary>
            Sets the pitch of the Entity Position.  This may cause desync.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.SyncedEntityPos.StanceInternal">
            <summary>
            Sets the stance of the Entity Position.  This may cause desync.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Entities.SyncedEntityPos.Dirty">
            <summary>
            Marks the position as dirty- requiring a refresh from the server.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Entities.SyncedEntityPos.MarkClean">
            <summary>
            Marks the position as clean- and not requiring a refresh from the server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.TrackedPlayerProperties.posY">
            <summary>
            Relative value. bottom 0...1 sealevel, 1 .... 2 max-y
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.TrackedPlayerProperties.sunSlight">
            <summary>
            0...32
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Entities.TrackedPlayerProperties.Playstyle">
            <summary>
            The servers playstyle
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.DummyInventory">
            <summary>
            A place holder inventory, useful, e.g., for when you want to render an itemstack and not have it spoil
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.InventoryDisplayed">
            <summary>
            A general purpose inventory which sends update packets to nearby players (used for rendering Display Case, Pulveriser, etc)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryDisplayed.OnItemSlotModified(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Called when one of the containing slots has been modified (the base version of this is empty)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ItemSlotOffhand">
            <summary>
            A slot that only accepts collectibles designated for the off-hand slot
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimCacheEntry.Animations">
            <summary>
            Animations of this cache.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimCacheEntry.RootElems">
            <summary>
            The root elements of this cache.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimCacheEntry.RootPoses">
            <summary>
            The poses of this cache
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationCache.ClearCache(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Clears the animation cache.
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationCache.InitManager(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.IAnimationManager,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.Shape,System.String[])">
            <summary>
            Initializes the cache to the Animation Manager then spits it back out.
            </summary>
            <param name="api"></param>
            <param name="manager"></param>
            <param name="entity"></param>
            <param name="entityShape"></param>
            <param name="requireJointsForElements"></param>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.EnumAnimationBlendMode.Add">
            <summary>
            Add the animation without taking other animations into considerations
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumAnimationBlendMode.Average">
            <summary>
            Add the pose and average it together with all other running animations with blendmode Average or AddAverage
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumAnimationBlendMode.AddAverage">
            <summary>
            Add the animation without taking other animations into consideration, but add it's weight for averaging 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationMetaData.Code">
            <summary>
            Unique identifier to be able to reference this AnimationMetaData instance
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationMetaData.Animation">
            <summary>
            The animations code identifier that we want to play
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationMetaData.EaseInSpeed">
            <summary>
            A multiplier applied to the weight value to "ease in" the animation. Choose a high value for looping animations or it will be glitchy
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationMetaData.EaseOutSpeed">
            <summary>
            A multiplier applied to the weight value to "ease out" the animation. Choose a high value for looping animations or it will be glitchy
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AnimationManager.AnimationsDirty">
            <summary>
            Are the animations dirty in this AnimationManager?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AnimationManager.Animator">
            <summary>
            The animator for the animation manager.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AnimationManager.HeadController">
            <summary>
            The entity head controller for this animator.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationManager.ActiveAnimationsByAnimCode">
            <summary>
            The list of currently active animations that should be playing
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationManager.entity">
            <summary>
            The entity attached to this Animation Manager.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.Init(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Initializes the Animation Manager.
            </summary>
            <param name="api">The Core API.</param>
            <param name="entity">The entity this manager is attached to.</param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.StartAnimation(Vintagestory.API.Common.AnimationMetaData)">
            <summary>
            Client: Starts given animation
            Server: Sends all active anims to all connected clients then purges the ActiveAnimationsByAnimCode list
            </summary>
            <param name="animdata"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.StartAnimation(System.String)">
            <summary>
            Start a new animation defined in the entity config file. If it's not defined, it won't play.
            Use StartAnimation(AnimationMetaData animdata) to circumvent the entity config anim data.
            </summary>
            <param name="configCode">Anim config code, not the animation code!</param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.StopAnimation(System.String)">
            <summary>
            Stops given animation
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.OnReceivedServerAnimations(System.Int32[],System.Int32,System.Single[])">
            <summary>
            The event fired when the manager recieves the server animations.
            </summary>
            <param name="activeAnimations"></param>
            <param name="activeAnimationsCount"></param>
            <param name="activeAnimationSpeeds"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.ToAttributes(Vintagestory.API.Datastructures.ITreeAttribute,System.Boolean)">
            <summary>
            Serializes the slots contents to be stored in the SaveGame
            </summary>
            <param name="tree"></param>
            <param name="forClient"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.FromAttributes(Vintagestory.API.Datastructures.ITreeAttribute,System.String)">
            <summary>
            Loads the entity from a stored byte array from the SaveGame
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.OnServerTick(System.Single)">
            <summary>
            The event fired at each server tick.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.OnClientFrame(System.Single)">
            <summary>
            The event fired each time the client ticks.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationManager.Dispose">
            <summary>
            Disposes of the animation manager.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityHeadController.OnFrame(System.Single)">
            <summary>
            The event fired when the game ticks.
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Vintagestory.API.Common.EntityHeadController.ApplyTransformToElement(System.Single[],System.Single[],System.Single[],Vintagestory.API.Common.ShapeElement)">
            <summary>
            Applies the transformation to the head element of the entity.
            </summary>
            <param name="matrix"></param>
            <param name="jointElement"></param>
        </member>
        <member name="T:Vintagestory.API.Common.ElementPose">
            <summary>
            The position of an element.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ElementPose.ForElement">
            <summary>
            The element this positioning is for.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ElementPose.AnimModelMatrix">
            <summary>
            The model matrix of this element.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ClientAnimator">
            <summary>
            Syncs every frame with entity.ActiveAnimationsByAnimCode, starts and stops animations when necessary 
            and does recursive interpolation on the rotation, position and scale value for each frame, for each element and for each active element
            this produces always correctly blended animations but is significantly more costly for the cpu when compared to the technique used by the <see cref="T:Vintagestory.API.Common.AnimatorBase"/>.
            You can use this class and dynamically switch between fast and pretty mode by setting the <see cref="!:FastMode"/> field.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPointAndPose.AnimModelMatrix">
            <summary>
            The current model matrix for this attachment point for this entity for the current animation frame.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPointAndPose.CachedPose">
            <summary>
            The pose shared across all entities using the same shape. Don't use. It's used internally for calculating the animation state. Once calculated, the value is copied over to AnimModelMatrix
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPointAndPose.AttachPoint">
            <summary>
            The attachment point
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAnimator.Matrices">
            <summary>
            The 30 pose transformation matrices that go to the shader
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAnimator.ActiveAnimationCount">
            <summary>
            Amount of currently active animations
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAnimator.RunningAnimations">
            <summary>
            Holds data over all animations. This list always contains all animations of the creature. You have to check yourself which of them are active
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAnimator.CalculateMatrices">
            <summary>
            Whether or not to calculate the animation matrices, required for GetAttachmentPointPose() to deliver correct values. Default on on the client, server side only on when the creature is dead
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimator.GetAttachmentPointPose(System.String)">
            <summary>
            Gets the attachment point pose.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimator.OnFrame(System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Common.AnimationMetaData},System.Single)">
            <summary>
            The event fired on each frame.
            </summary>
            <param name="activeAnimationsByAnimCode"></param>
            <param name="dt"></param>
        </member>
        <member name="T:Vintagestory.API.Common.IAnimationManager">
            <summary>
            Everything needed for allowing animations the <see cref="T:Vintagestory.API.Common.Entities.Entity"/> class holds a reference to an IAnimator. 
            Currently implemented by <see cref="T:Vintagestory.API.Common.ServerAnimator"/>
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAnimationManager.Animator">
            <summary>
            The animator for this animation manager
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAnimationManager.HeadController">
            <summary>
            The head controller for this manager.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimationManager.Init(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Initialization call for the animation manager.
            </summary>
            <param name="api">The core API</param>
            <param name="entity">The entity being animated.</param>
        </member>
        <member name="P:Vintagestory.API.Common.IAnimationManager.AnimationsDirty">
            <summary>
            Whether or not the animation is dirty.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimationManager.StartAnimation(Vintagestory.API.Common.AnimationMetaData)">
            <summary>
            Starts an animation based on the AnimationMetaData
            </summary>
            <param name="animdata"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimationManager.StartAnimation(System.String)">
            <summary>
            Starts an animation based on JSON code.
            </summary>
            <param name="configCode">The json code.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimationManager.StopAnimation(System.String)">
            <summary>
            Stops the animation.
            </summary>
            <param name="code">The code to stop the animation on</param>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimationManager.FromAttributes(Vintagestory.API.Datastructures.ITreeAttribute,System.String)">
            <summary>
            Additional attributes applied to the animation
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimationManager.ToAttributes(Vintagestory.API.Datastructures.ITreeAttribute,System.Boolean)">
            <summary>
            Additional attributes applied from the animation
            </summary>
            <param name="tree"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IAnimationManager.ActiveAnimationsByAnimCode">
            <summary>
            Gets the AnimationMetaData for the target action.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimationManager.OnReceivedServerAnimations(System.Int32[],System.Int32,System.Single[])">
            <summary>
            The event fired when the client recieves the server animations
            </summary>
            <param name="activeAnimations">all of active animations</param>
            <param name="activeAnimationsCount">the number of the animations</param>
            <param name="activeAnimationSpeeds">The speed of those animations.</param>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimationManager.Dispose">
            <summary>
            Safe dispose method for classes containing IAnimator
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAnimationManager.OnAnimationStopped(System.String)">
            <summary>
            The event fired when the animation is stopped.
            </summary>
            <param name="code">The code that the animation stopped with.</param>
        </member>
        <member name="T:Vintagestory.API.Common.NoAnimator">
            <summary>
            A NoAnimator built off of <see cref="T:Vintagestory.API.Common.IAnimator"/>
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.NoAnimator.Matrices">
            <summary>
            The matrices for this No-Animator
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.NoAnimator.ActiveAnimationCount">
            <summary>
            The active animation count for this no animator.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.NoAnimator.GetAttachmentPointPose(System.String)">
            <summary>
            Gets the attachment point for this pose.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.NoAnimator.OnFrame(System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Common.AnimationMetaData},System.Single)">
            <summary>
            The event fired when a specified frame has been hit.
            </summary>
            <param name="activeAnimationsByAnimCode"></param>
            <param name="dt"></param>
        </member>
        <member name="T:Vintagestory.API.Common.NoAnimationManager">
            <summary>
            A No-Animation Manager built off of <see cref="T:Vintagestory.API.Common.IAnimationManager"/>.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.AttachmentPoint">
            <summary>
            This is a spot on the shape that connects to another shape.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPoint.ParentElement">
            <summary>
            The parent element of this attachment point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPoint.Code">
            <summary>
            The json code of this attachment point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPoint.PosX">
            <summary>
            The X position of the attachment point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPoint.PosY">
            <summary>
            The Y position of the attachment point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPoint.PosZ">
            <summary>
            The Z position of the attachment point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPoint.RotationX">
            <summary>
            The forward vertical rotation of the attachment point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPoint.RotationY">
            <summary>
            The forward horizontal rotation of the attachment point
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AttachmentPoint.RotationZ">
            <summary>
            the left/right tilt of the attachment point
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IBulkBlockAccessor">
            <summary>
            Useful for setting many blocks at once efficiently
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBulkBlockAccessor.ReadFromStagedByDefault">
            <summary>
            If set to true, the methods GetBlock() and GetBlockId() will behave like GetStagedBlockId() until the next commit
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBulkBlockAccessor.GetStagedBlockId(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the block for a not yet commited block. If no block has been staged for this pos the original block is returned
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBulkBlockAccessor.GetStagedBlockId(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Gets the block for a not yet commited block. If no block has been staged for this pos the original block is returned
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.EventBusListenerDelegate">
            <summary>
            For handling events on the event bus
            </summary>
            <param name="eventName"></param>
            <param name="handling">Set to EnumHandling.Last to stop further propagation of the event</param>
            <param name="data"></param>
        </member>
        <member name="T:Vintagestory.API.Common.ChunkDirtyDelegate">
            <summary>
            For handling dirty chunks
            </summary>
            <param name="chunkCoord"></param>
            <param name="chunk"></param>
            <param name="reason"></param>
        </member>
        <member name="T:Vintagestory.API.Common.ChunkColumnLoadedDelegate">
            <summary>
            Triggered when the server loaded a chunk column from disk or generated a new one
            </summary>
            <param name="chunkCoord"></param>
            <param name="chunks"></param>
        </member>
        <member name="T:Vintagestory.API.Common.ChunkColumnUnloadDelegate">
            <summary>
            Triggered just before a chunk column gets unloaded
            </summary>
            <param name="chunkCoord">chunkX and chunkZ of the column (multiply with chunksize to get position). The Y component is zero</param>
        </member>
        <member name="T:Vintagestory.API.Common.IEventAPI">
            <summary>
            Events that are available on the server and the client
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.IEventAPI.OnEntitySpawn">
            <summary>
            Triggered when a new entity spawned
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.IEventAPI.OnEntityDespawn">
            <summary>
            Triggered when a new entity despawned
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.IEventAPI.ChunkDirty">
            <summary>
            Called whenever a chunk was marked dirty (as in, its blocks or light values have been modified or it got newly loaded or newly created)
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.IEventAPI.OnGetClimate">
            <summary>
            Called whenever any method calls world.BlockAccessor.GetClimateAt(). Used by the survival mod to modify the rainfall and temperature values to adjust for seasonal and day/night temperature variations. Be sure to also register to OnGetClimateForDate.
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.IEventAPI.OnGetWindSpeed">
            <summary>
            Called whenever any method calls world.BlockAccessor.GetWindSpeedAt(). Used by the survival mod to set the wind speed
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.IEventAPI.MatchesGridRecipe">
            <summary>
            Called when a player tries to gridcraft something 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.PushEvent(System.String,Vintagestory.API.Datastructures.IAttribute)">
            <summary>
            There's 2 global event busses, 1 on the client and 1 on the server. This pushes an event onto the bus.
            </summary>
            <param name="eventName"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterEventBusListener(Vintagestory.API.Common.EventBusListenerDelegate,System.Double,System.String)">
            <summary>
            Registers a listener on the event bus. This is intended for mods as the game engine itself does not push any events.
            </summary>
            <param name="OnEvent">The handler for the events</param>
            <param name="priority">Set this to a different value if you want to catch an event before/after another mod catches it</param>
            <param name="filterByEventName">If set, events only with given eventName are received</param>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterGameTickListener(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnGameTick"></param>
            <param name="millisecondInterval"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterGameTickListener(Vintagestory.API.Common.Action{Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single},Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
            Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnGameTick"></param>
            <param name="pos"></param>
            <param name="millisecondInterval"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterCallback(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnTimePassed"></param>
            <param name="millisecondDelay"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.RegisterCallback(Vintagestory.API.Common.Action{Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single},Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds, lets you supply a block position to be passed to the method. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnTimePassed"></param>
            <param name="pos"></param>
            <param name="millisecondDelay"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.UnregisterCallback(System.Int64)">
            <summary>
            Removes a delayed callback
            </summary>
            <param name="listenerId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.UnregisterGameTickListener(System.Int64)">
            <summary>
            Removes a game tick listener
            </summary>
            <param name="listenerId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IEventAPI.EnqueueMainThreadTask(Vintagestory.API.Common.Action,System.String)">
            <summary>
            Can be used to execute supplied method a frame later or can be called from a seperate thread to ensure some code is executed in the main thread
            </summary>
            <param name="action"></param>
            <param name="code">Task category identifier for the frame profiler</param>
        </member>
        <member name="T:Vintagestory.API.Common.IMapChunk">
            <summary>
            Holds 2 dimensional data for one chunk column
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapChunk.MapRegion">
            <summary>
            The map region this map chunk resides in
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapChunk.CurrentPass">
            <summary>
            The current world generation pass this chunk column is in
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IMapChunk.SetData(System.String,System.Byte[])">
            <summary>
            Can be used to store custom data along with the map chunk
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IMapChunk.GetData(System.String)">
            <summary>
            Can be used to retrieve custom data from the map chunk (as previously set by SetModdata)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IMapChunk.RainHeightMap">
            <summary>
            The position of the last block that is not rain permeable before the first airblock
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapChunk.WorldGenTerrainHeightMap">
            <summary>
            The position of the last block before the first airblock before world gen pass Vegetation
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapChunk.TopRockIdMap">
            <summary>
            The rock block id of the topmost rock layer
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapChunk.YMax">
            <summary>
            The highest position of any non-air block
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IMapChunk.MarkFresh">
            <summary>
            Causes the TTL counter to reset so that it the mapchunk does not unload. No effect when called client side.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IMapChunk.MarkDirty">
            <summary>
            Tells the server that it has to save the changes of this chunk to disk. No effect when called client side.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.MultiblockStructure">
            <summary>
            You can export one of these by making a selection with worldedit, looking at the center block (which should be your controller/master) then typing /we mgencode. Please note, air blocks are not exported
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.MultiblockStructure.InCompleteBlockCount(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.PositionMismatchDelegate)">
            <summary>
            Check if the multiblock structure is complete. Ignores air blocks
            </summary>
            <param name="world"></param>
            <param name="centerPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.JsonUtil.FromBytes``1(System.Byte[])">
            <summary>
            Reads a Json object, and converts it to the designated type.
            </summary>
            <typeparam name="T">The designated type</typeparam>
            <param name="data">The json object.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.JsonUtil.ToBytes``1(``0)">
            <summary>
            Converts the object to json.
            </summary>
            <typeparam name="T">The type to convert</typeparam>
            <param name="obj">The object to convert</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.JsonUtil.ToObject``1(System.String,System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Converts a Json object to a typed object.
            </summary>
            <typeparam name="T">The type to convert.</typeparam>
            <param name="text">The text to deserialize</param>
            <param name="domain">The domain of the text.</param>
            <param name="settings">The settings of the deserializer. (default: Null)</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.JsonUtil.ToObject``1(Newtonsoft.Json.Linq.JToken,System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Converts a Json token to a typed object.
            </summary>
            <typeparam name="T">The type to convert.</typeparam>
            <param name="token">The token to deserialize</param>
            <param name="domain">The domain of the text.</param>
            <param name="settings">The settings of the deserializer. (default: Null)</param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.Mod">
            <summary>
            Represents a mod in the mod manager. May contain zero to multiple
            <see cref="T:Vintagestory.API.Common.ModSystem"/> instances within it.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.SourceType">
            <summary> Gets the origin file type of the mod (.cs, .dll, .zip or folder). </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.SourcePath">
            <summary> Gets the full path to where this mod originated from, including file name. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.FileName">
            <summary> Gets the file name of this mod. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.Info">
            <summary>
            Gets the info of this mod. Found either as "modinfo.json" in the
            of the mod's folder or archive, or in the case of raw .cs and .dll
            files, using the <see cref="T:Vintagestory.API.Common.ModInfoAttribute"/>
            on the assembly.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.Icon">
            <summary>
            Holds the icon of this mod. Found as "modicon.png" in the root of
            the mod's folder or archive. May be null.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.Logger">
            <summary> Gets the logger associated with this mod. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Mod.Systems">
            <summary> Gets a collection of systems belonging to this mod. </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumModSourceType">
            <summary>
            Represents the origin file type of the mod.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumModSourceType.CS">
            <summary> A single .cs source file. (Code mod without assets.) </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumModSourceType.DLL">
            <summary> A single .dll source file. (Code mod without assets.) </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumModSourceType.ZIP">
            <summary> A .zip archive able to contain assets and code files. </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumModSourceType.Folder">
            <summary> A folder able to contain assets and code files. </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumReplaceMode.Replaceable">
            <summary>
            Replace if new block replaceable value > old block replaceable value
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumReplaceMode.ReplaceAll">
            <summary>
            Replace always, no matter what blocks were there previously
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumReplaceMode.ReplaceAllNoAir">
            <summary>
            Replace always, no matter what blocks were there previously, but skip air blocks in the schematic
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumReplaceMode.ReplaceOnlyAir">
            <summary>
            Replace only air blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSchematic.PathwayStarts">
            <summary>
            Distance positions from bottom left corner of the schematic. Only the first door block.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSchematic.PathwayOffsets">
            <summary>
            Distance from the bottom left door block, so the bottom left door block is always at 0,0,0
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.LoadMetaInformationAndValidate(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.IWorldAccessor,System.String)">
            <summary>
            Loads the meta information for each block in the schematic.
            </summary>
            <param name="blockAccessor"></param>
            <param name="worldForResolve"></param>
            <param name="fileNameForLogging"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.AddArea(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Adds an area to the schematic.
            </summary>
            <param name="world">The world the blocks are in</param>
            <param name="start">The start position of all the blocks.</param>
            <param name="end">The end position of all the blocks.</param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.Place(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Boolean)">
            <summary>
            Will place all blocks using the configured replace mode. Note: If you use a revertable or bulk block accessor you will have to call PlaceBlockEntities() after the Commit()
            </summary>
            <param name="blockAccessor"></param>
            <param name="worldForCollectibleResolve"></param>
            <param name="startPos"></param>
            <param name="replaceMetaBlocks"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.Place(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumReplaceMode,System.Boolean)">
            <summary>
            Will place all blocks using the supplied replace mode. Note: If you use a revertable or bulk block accessor you will have to call PlaceBlockEntities() after the Commit()
            </summary>
            <param name="blockAccessor"></param>
            <param name="worldForCollectibleResolve"></param>
            <param name="startPos"></param>
            <param name="mode"></param>
            <param name="replaceMetaBlocks"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.TransformWhilePacked(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.EnumOrigin,System.Int32,System.Nullable{Vintagestory.API.MathTools.EnumAxis})">
            <summary>
            Attempts to transform each block as they are placed in directions different from the schematic.
            </summary>
            <param name="worldForResolve"></param>
            <param name="aroundOrigin"></param>
            <param name="angle"></param>
            <param name="flipAxis"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.PlaceEntitiesAndBlockEntities(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Places all the entities and blocks in the schematic at the position.
            </summary>
            <param name="blockAccessor"></param>
            <param name="worldForCollectibleResolve"></param>
            <param name="startPos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.GetJustPositions(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Gets just the positions of the blocks.
            </summary>
            <param name="origin">The origin point to start from</param>
            <returns>An array containing the BlockPos of each block in the area.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.GetStartPos(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumOrigin)">
            <summary>
            Gets the starting position of the schematic.
            </summary>
            <param name="pos"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.AdjustStartPos(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumOrigin)">
            <summary>
            Adjusts the starting position of the schemtic.
            </summary>
            <param name="startpos"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.LoadFromFile(System.String,System.String@)">
            <summary>
            Loads the schematic from a file.
            </summary>
            <param name="infilepath"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.LoadFromString(System.String,System.String@)">
            <summary>
            Loads a schematic from a string.
            </summary>
            <param name="jsoncode"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.Save(System.String)">
            <summary>
            Saves a schematic to a file.
            </summary>
            <param name="outfilepath"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.EncodeBlockEntityData(Vintagestory.API.Common.BlockEntity)">
            <summary>
            Exports the block entity data to a string.
            </summary>
            <param name="be"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.StringEncodeTreeAttribute(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Exports the tree attribute data to a string.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.DecodeBlockEntityData(System.String)">
            <summary>
            Imports the tree data from a string.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSchematic.ClonePacked">
            <summary>
            Makes a deep copy of the packed schematic. Unpacked data and loaded meta information is not cloned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.INetworkAPI.RegisterChannel(System.String)">
            <summary>   
            Supplies you with your very own and personal network channel with which you can send packets to the server. Use the same channelName on the client and server to have them link up.
            </summary>
            <param name="channelName">Unique channel identifier</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.INetworkAPI.GetChannel(System.String)">
            <summary>
            Returns a previoulsy registered channeled, null otherwise
            </summary>
            <param name="channelName"></param>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationJoint.JointId">
            <summary>
            The ID of the joint.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationJoint.Element">
            <summary>
            The attached ShapeElement.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationJoint.ApplyInverseTransform(System.Single[])">
            <summary>
            Takes the transform and inverses it.
            </summary>
            <param name="frameModelTransform"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterColorMap(Vintagestory.API.Common.ColorMap)">
            <summary>
            Registers a new color map. Typically used to color in-game blocks with a texture - i.e. climate and seasonal coloring
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterEntity(System.String,System.Type)">
            <summary>
            Registers a non-block entity. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterEntityBehaviorClass(System.String,System.Type)">
            <summary>
            Registers a non-block entity behavior. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="entityBehavior"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterBlockClass(System.String,System.Type)">
            <summary>
            Register a new Blockclass. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            </summary>
            <param name = "className">Class to register</param>
            <param name = "blockType">Name of the class</param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterCropBehavior(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="type"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterBlockEntityClass(System.String,System.Type)">
            <summary>
            Register a new BlockEntity Class. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="blockentityType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterItemClass(System.String,System.Type)">
            <summary>
            Register a new Item Class. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="itemType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterBlockBehaviorClass(System.String,System.Type)">
            <summary>
            Register a new block behavior class. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="blockBehaviorType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterBlockEntityBehaviorClass(System.String,System.Type)">
            <summary>
            Register a new block entity behavior class. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            </summary>
            <param name="className"></param>
            <param name="blockEntityBehaviorType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.RegisterMountable(System.String,Vintagestory.API.Common.GetMountableDelegate)">
            <summary>
            Register a new block behavior class. Must happen before any blocks are loaded. Be sure to register it on the client and server side.
            Make your your delegate also set tree.SetString("className", "[your className]");
            </summary>
            <param name="className"></param>
            <param name="blockBehaviorType"></param>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPICommon.ObjectCache">
            <summary>
            Can be used to store non-persistent, game wide data. E.g. used for firewood piles to pregenerate all meshes only once during startup
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPICommon.DataBasePath">
            <summary>
            Returns the root path of the games data folder
            </summary>
            <value></value>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.GetOrCreateDataPath(System.String)">
            <summary>
            Returns the path to given foldername inside the games data folder. Ensures that the folder exists
            </summary>
            <param name="foldername"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.StoreModConfig``1(``0,System.String)">
            <summary>
            Milo kept asking for a standardized way to load and store mod configuration data, so here you go :P
            For T just make a class with all fields public - this is your configuration class. Be sure to set useful default values for your settings
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonSerializeableData"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPICommon.LoadModConfig``1(System.String)">
            <summary>
            Milo kept asking for a standardized way to load and store mod configuration data, so here you go :P
            Recommendation: Surround this call with a try/catch in case the user made a typo while changing the configuration
            Returns null if the file does not exist
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ICoreAPI">
            <summary>
            Common API Components that are available on the server and the client. Cast to ICoreServerAPI or ICoreClientAPI to access side specific features.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.Logger">
            <summary>
            The local Logger instance.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.CmdlArguments">
            <summary>
            The command line arguments that were used to start the client or server application
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.Side">
            <summary>
            Returns if you are currently on server or on client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.Event">
            <summary>
            Api component to register/trigger events
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.World">
            <summary>
            Second API Component for access/modify everything game world related
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.ClassRegistry">
            <summary>
            API Compoment for creating instances of certain classes, such as Itemstacks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.Network">
            <summary>
            API for sending/receiving network packets
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.Assets">
            <summary>
            API Component for loading and reloading one or multiple assets at once from the assets folder
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICoreAPI.ModLoader">
            <summary>
            API Component for checking for and interacting with other mods and mod systems
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ICoreAPI.RegisterEntityClass(System.String,Vintagestory.API.Common.Entities.EntityProperties)">
            <summary>
            Registers a new entity config for given entity class
            </summary>
            <param name="entityClassName"></param>
            <param name="config"></param>
        </member>
        <member name="F:Vintagestory.API.Common.GeneratedStructure.Location">
            <summary>
            Block position of the structure
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GeneratedStructure.Code">
            <summary>
            Code as defined in the WorldGenStructure object
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GeneratedStructure.Group">
            <summary>
            Group as defined in the WorldGenStructure object
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IMapRegion">
            <summary>
            2D Map data for a 16x16 area of chunk columns. Holds a few maps for the chunk generation.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.FlowerMap">
            <summary>
            Currently unuseds
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.ShrubMap">
            <summary>
            Holds a shrub density map
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.ForestMap">
            <summary>
            Holds a forest density map
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.BeachMap">
            <summary>
            Holds a beach strength map
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.LandformMap">
            <summary>
            Holds the landform indices
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.ClimateMap">
            <summary>
            Holds temperature and rain fall.
            16-23 bits = Red = temperature
            8-15 bits = Green = rain
            0-7 bits = Blue = unused 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.GeologicProvinceMap">
            <summary>
            Holds the geologic province indices
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.RockStrata">
            <summary>
            Holds the rock strata noise maps
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.ModData">
            <summary>
            Holds the raw mod data.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.ModMaps">
            <summary>
            Holds the mod mappings.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.OreMaps">
            <summary>
            Gets the ore map for the given item.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMapRegion.GeneratedStructures">
            <summary>
            List of structures that were generated in this region
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.AssetLocationAndSource">
            <summary>
            Defines a complete path to an assets, including it's domain. Includes an extra Source field for debugging.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AssetLocationAndSource.Source">
            <summary>
            The source of a given asset.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.AssetLocation">
            <summary>
            Defines a complete path to an assets, including it's domain
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.#ctor(System.String)">
            <summary>
            Create a new AssetLocation. If no domain is prefixed, the default 'game' domain is used.
            </summary>
            <param name="domainAndPath"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.ResolveToDomainAndPath(System.String,System.String@,System.String@)">
            <summary>
            Helper function to resolve path dependancies.
            </summary>
            <param name="domainAndPath">Full path</param>
            <param name="domain">The mod domain to get</param>
            <param name="path">The resulting path to get</param>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.#ctor(System.String,System.String)">
            <summary>
            Create a new AssetLocation with given domain
            </summary>
            <param name="domain"></param>
            <param name="path"></param>
        </member>
        <member name="P:Vintagestory.API.Common.AssetLocation.Valid">
            <summary>
            Returns true if this is a valid path. For an asset location to be valid it needs to 
            have any string as domain, any string as path, the domain may not contain slashes, and the path may not contain 2 consecutive slashes
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.FirstPathPart(System.Int32)">
            <summary>
            Returns the n-th path part
            </summary>
            <param name="posFromLeft"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.AssetLocation.Category">
            <summary>
            Gets the category of the asset.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.HasDomain">
            <summary>
            Whether or not the Asset has a domain.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.GetName">
            <summary>
            Gets the name of the asset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.RemoveEnding">
            <summary>
            Removes the file ending from the asset path.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.Clone">
            <summary>
            Clones this asset.
            </summary>
            <returns>the cloned asset.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.CopyWithPath(System.String)">
            <summary>
            Makes a copy of the asset with a modified path.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.WithPath(System.String)">
            <summary>
            Sets the path of the asset location
            </summary>
            <param name="path">the new path to set.</param>
            <returns>The modified AssetLocation</returns>
        </member>
        <member name="M:Vintagestory.API.Common.AssetLocation.toLocations(System.String[])">
            <summary>
            Converts a collection of paths to AssetLocations.
            </summary>
            <param name="names">The names of all of the locations</param>
            <returns>The AssetLocations for all the names given.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AssetCategory.Code">
            <summary>
            Path and name
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AssetCategory.SideType">
            <summary>
            Determines wether it will be used on server, client or both.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AssetCategory.AffectsGameplay">
            <summary>
            Temporary solution to not change block types. Will be changed
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AssetCategory.FromCode(System.String)">
            <summary>
            Gets the asset category by code name
            </summary>
            <param name="code">The code name for the asset category.</param>
            <returns>An asset category.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetOrigin.LoadAsset(Vintagestory.API.Common.IAsset)">
            <summary>
            Loads the asset into memeory.
            </summary>
            <param name="asset">The asset to be loaded</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetOrigin.TryLoadAsset(Vintagestory.API.Common.IAsset)">
            <summary>
            Attempts to load the asset.  Returns false if it fails.
            </summary>
            <param name="asset">The asset to be loaded.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetOrigin.GetAssets(Vintagestory.API.Common.AssetCategory,System.Boolean)">
            <summary>
            Returns all assets of the given category which can be found in this origin 
            </summary>
            <param name="Category"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetOrigin.GetAssets(Vintagestory.API.Common.AssetLocation,System.Boolean)">
            <summary>
            Returns all assets of the given base location path which can be found in this origin 
            </summary>
            <param name="baseLocation"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetOrigin.IsAllowedToAffectGameplay">
            <summary>
            Resource packs are not allowed to affect gameplay
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.BlockSelection">
            <summary>
            Contains all the information for a players block selection event
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.Position">
            <summary>
            The position the player wants to place/break something at
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.Face">
            <summary>
            The face the player aimed at
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.HitPosition">
            <summary>
            The coordinate of the exact aimed position, relative to the Block Position
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.SelectionBoxIndex">
            <summary>
            Which selection box was aimed at. The index corresponds to the array returned by Block.GetSelectionBoxes()
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSelection.DidOffset">
            <summary>
            Always false during block use. True during placement if the Position value was offseted. Example:
            - When trying to place planks while aiming at rock, the Position is the one in front of the Rock and DidOffset is True
            - When trying to place planks while aiming at tallgrass, the Position is where the tall grass is and DidOffset is false (because tallgrass is replacable)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSelection.Clone">
            <summary>
            Creates a deep copy 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CropBehavior.Initialize(Vintagestory.API.JsonObject)">
            <summary>
            Initializes the crop with additional properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CropBehavior.TryGrowCrop(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.IFarmlandBlockEntity,System.Double,System.Int32,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Attempts to grow the crop.
            </summary>
            <param name="api">The Core API</param>
            <param name="farmland">The farmland below the crop.</param>
            <param name="currentTotalHours"></param>
            <param name="newGrowthStage">The next growth stage.</param>
            <param name="handling">Whether or not this event was handled.</param>
            <returns>Whether or not the crop grew.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.CropBehavior.OnPlanted(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            The event fired when the crop is planted.
            </summary>
            <param name="api">The core API.</param>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.TotalHoursForNextStage">
            <summary>
            Total game hours from where on it can enter the next growth stage 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.TotalHoursFertilityCheck">
            <summary>
            The last time fertility increase was checked
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.Nutrients">
            <summary>
            Farmland has 3 nutrient levels N, P and K located in this array in that order. 
            Each nutrient level has a range of 0-100.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.MoistureLevel">
            <summary>
            The farmlands moisture level
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.OriginalFertility">
            <summary>
            The fertility the soil will recover to (the soil from which the farmland was made of)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.Pos">
            <summary>
            The position of the farmland
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IFarmlandBlockEntity.UpPos">
            <summary>
            The position directly above the farmland
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModelTransformKeyFrame">
            <summary>
            A keyframe for model transformation.  
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransformKeyFrame.FrameNumber">
            <summary>
            The frame number for the keyframe
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransformKeyFrame.Transform">
            <summary>
            The new transform set for the keyframe.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ClayFormingRecipe.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.KnappingRecipe.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.RecipeBase`1">
            <summary>
            Creates a new base recipe type.  
            </summary>
            <typeparam name="T">The resulting recipe type.</typeparam>
        </member>
        <member name="F:Vintagestory.API.Common.RecipeBase`1.Ingredients">
            <summary>
            ...or alternatively for recipes with multiple ingredients
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.SmithingRecipe.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IXPlatformInterface">
            <summary>
            The platform interface for various controls.  Used by the game to handle various properties.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.JsonAttributesConverter">
            <summary>
            Implementation of JsonConverter that converts objects to an instance of a JsonObject
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.RegistryObject.Code">
            <summary>
            A unique domain + code of the object. Must be globally unique for all items / all blocks / all entities.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.RegistryObject.VariantStrict">
            <summary>
            Variant values as resolved from blocktype/itemtype or entitytype
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.RegistryObject.Variant">
            <summary>
            Variant values as resolved from blocktype/itemtype or entitytype. Will not throw an null pointer exception when the key does not exist, but return null instead.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.RegistryObject.Class">
            <summary>
            The class handeling the object
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.CodeWithPath(System.String)">
            <summary>
            Returns a new assetlocation with an equal domain and the given path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.CodeWithoutParts(System.Int32)">
            <summary>
            Removes componentsToRemove parts from the blocks code end by splitting it up at every occurence of a dash ('-'). Right to left.
            </summary>
            <param name="componentsToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.CodeEndWithoutParts(System.Int32)">
            <summary>
            Removes componentsToRemove parts from the blocks code beginning by splitting it up at every occurence of a dash ('-'). Left to Right
            </summary>
            <param name="componentsToRemove"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.CodeWithParts(System.String[])">
            <summary>
            Replaces the last parts from the blocks code and replaces it with components by splitting it up at every occurence of a dash ('-')
            </summary>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.CodeWithPart(System.String,System.Int32)">
            <summary>
            Replaces one part from the blocks code and replaces it with components by splitting it up at every occurence of a dash ('-')
            </summary>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.LastCodePart(System.Int32)">
            <summary>
            Returns the n-th code part in inverse order. If the code contains no dash ('-') the whole code is returned. Returns null if posFromRight is too high.
            </summary>
            <param name="posFromRight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.FirstCodePart(System.Int32)">
            <summary>
            Returns the n-th code part. If the code contains no dash ('-') the whole code is returned. Returns null if posFromLeft is too high.
            </summary>
            <param name="posFromLeft"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.WildCardMatch(Vintagestory.API.Common.AssetLocation[])">
            <summary>
            Returns true if any given wildcard matches the blocks/items code. E.g. water-* will match all water blocks
            </summary>
            <param name="wildcards"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.WildCardMatch(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Returns true if given wildcard matches the blocks/items code. E.g. water-* will match all water blocks
            </summary>
            <param name="wildCard"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.FillPlaceHolder(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Datastructures.OrderedDictionary{System.String,System.String})">
            <summary>
            Used by the block loader to replace wildcards with their final values
            </summary>
            <param name="input"></param>
            <param name="searchReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.FillPlaceHolder(System.String,Vintagestory.API.Datastructures.OrderedDictionary{System.String,System.String})">
            <summary>
            Used by the block loader to replace wildcards with their final values
            </summary>
            <param name="input"></param>
            <param name="searchReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.RegistryObject.FillPlaceHolder(System.String,System.String,System.String)">
            <summary>
            Used by the block loader to replace wildcards with their final values
            </summary>
            <param name="input"></param>
            <param name="search"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.VtmlUtil.TagConverters">
            <summary>
            You can register your own tag converters here
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.VtmlTagToken.Name">
            <summary>
            Name of this tag
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.VtmlTagToken.Attributes">
            <summary>
            Collection of attribute names and values for this tag
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityBehaviorPassivePhysics.waterDragValue">
            <summary>
            The amount of drag while travelling through water.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityBehaviorPassivePhysics.airDragValue">
            <summary>
            The amount of drag while travelling through the air.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityBehaviorPassivePhysics.groundDragFactor">
            <summary>
            The amount of drag while travelling on the ground.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityBehaviorPassivePhysics.gravityPerSecond">
            <summary>
            The amount of gravity applied per tick to this entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityBehaviorPassivePhysics.OnPhysicsTickCallback">
            <summary>
            If set, will test for entity collision every tick (expensive)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityBehaviorPassivePhysics.DoPhysics(System.Single,Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Performs the physics on the specified entity.
            </summary>
            <param name="dt"></param>
            <param name="pos"></param>
        </member>
        <member name="T:Vintagestory.API.Common.EntityAgent">
            <summary>
            An autonomous, goal-directed entity which observes and acts upon an environment
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityAgent.HeadYaw">
            <summary>
            The yaw of the agents head
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityAgent.HeadPitch">
            <summary>
            The pitch of the agents head
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityAgent.BodyYaw">
            <summary>
            The yaw of the agents body
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityAgent.DeadNotify">
            <summary>
            True if all clients have to be informed about this entities death. Set to false once all clients have been notified
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityAgent.HerdId">
            <summary>
            Unique identifier for a herd
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityAgent.LeftHandItemSlot">
            <summary>
            Item in the left hand slot of the entity agent.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityAgent.RightHandItemSlot">
            <summary>
            Item in the right hand slot of the entity agent.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityAgent.GearInventory">
            <summary>
            The inventory of the entity agent.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityAgent.ShouldDespawn">
            <summary>
            Whether or not the entity should despawn.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityAgent.AllowDespawn">
            <summary>
            Whether or not the entity is allowed to despawn (Default: true)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityAgent.Controls">
            <summary>
            The controls for this entity.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityAgent.ServerControls">
            <summary>
            The server controls for this entity
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.IsEyesSubmerged">
            <summary>
            Are the eyes of this entity submerged in liquid?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.GetEyesBlockId">
            <summary>
            Gets the ID of the block the eyes are submerged in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.TryMount(Vintagestory.API.Common.IMountable)">
            <summary>
            Attempts to mount the player on a target.
            </summary>
            <param name="onmount">The mount to mount</param>
            <returns>Whether it was mounted or not.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.TryUnmount">
            <summary>
            Attempts to un-mount the player.
            </summary>
            <returns>Whether or not unmounting was successful</returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.ReceiveSaturation(System.Single,Vintagestory.API.Common.EnumFoodCategory,System.Single,System.Single)">
            <summary>
            Recieves the saturation from a food source.
            </summary>
            <param name="saturation">The amount of saturation recieved.</param>
            <param name="foodCat">The cat of food... err Category of food.</param>
            <param name="saturationLossDelay">The delay before the loss of saturation</param>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.ShouldReceiveSaturation(System.Single,Vintagestory.API.Common.EnumFoodCategory,System.Single,System.Single)">
            <summary>
            Whether or not the target should recieve saturation.
            </summary>
            <param name="saturation">The amount of saturation recieved.</param>
            <param name="foodCat">The cat of food... err Category of food.</param>
            <param name="saturationLossDelay">The delay before the loss of saturation</param>
        </member>
        <member name="F:Vintagestory.API.Common.EntityAgent.insideBlock">
            <summary>
            updated by GetWalkSpeedMultiplier()
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.GetWalkSpeedMultiplier(System.Double)">
            <summary>
            Gets the walk speed multiplier.
            </summary>
            <param name="groundDragFactor">The amount of drag provided by the current ground. (Default: 0.3)</param>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.ToBytes(System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Serializes the slots contents to be stored in the SaveGame
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.FromBytes(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Loads the entity from a stored byte array from the SaveGame
            </summary>
            <param name="reader"></param>
            <param name="forClient"></param>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.TryStopHandAction(System.Boolean,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            Attempts to stop the hand  action.
            </summary>
            <param name="isCancel">Whether or not the action is cancelled or stopped.</param>
            <param name="cancelReason">The reason for stopping the action.</param>
            <returns>Whether the stop was cancelled or not.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.WalkInventory(Vintagestory.API.Common.OnInventorySlot)">
            <summary>
            This walks the inventory for the entity agent.
            </summary>
            <param name="handler">the event to fire while walking the inventory.</param>
        </member>
        <member name="M:Vintagestory.API.Common.EntityAgent.addGearToShape(System.String,Vintagestory.API.Common.CompositeShape,Vintagestory.API.Common.Shape,System.String,System.String[],System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Common.AssetLocation})">
            <summary>
            
            </summary>
            <param name="code">Any unique Identifier</param>
            <param name="cshape"></param>
            <param name="entityShape"></param>
            <param name="shapePathForLogging"></param>
            <param name="disableElements"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.EnumEntityAction">
            <summary>
            A players in-world action
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Forward">
            <summary>
            Walk forwards
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Backward">
            <summary>
            Walk backwards
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Left">
            <summary>
            Walk sideways left
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Right">
            <summary>
            Walk sideways right
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Jump">
            <summary>
            Jump
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Sneak">
            <summary>
            Sneak
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Sprint">
            <summary>
            Sprint mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Sit">
            <summary>
            Sit (unused)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.FloorSit">
            <summary>
            Sit on the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.LeftMouseDown">
            <summary>
            Left mouse down
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.RightMouseDown">
            <summary>
            Right mouse down
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Up">
            <summary>
            Fly or swim up
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumEntityAction.Down">
            <summary>
            Fly or swim down
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EntityControls">
            <summary>
            The available controls to move around a character in a game world
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.OnAction">
            <summary>
            To execute a call handler registered by the engine. Don't use this one, use api.Input.InWorldAction instead.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.FlyMode">
            <summary>
            If true, the entity is either flying or swimming.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.NoClip">
            <summary>
            If true, the entity has NoClip active.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.FlyPlaneLock">
            <summary>
            the axis lock for the fly plane.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.WalkVector">
            <summary>
            Current walking direction.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.FlyVector">
            <summary>
            Current flying direction
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.TriesToMove">
            <summary>
            Checks to see if the entity is attempting to move in any direction (excluding jumping)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.IsFlying">
            <summary>
            Whether or not the entity is flying.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.IsClimbing">
            <summary>
            Whether or not the entity is climbing
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.IsAiming">
            <summary>
            Whether or not the entity is aiming
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.IsStepping">
            <summary>
            Whether or not the entity is currently stepping up a block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.HandUse">
            <summary>
            If the player is currently using the currently held item in a special way (e.g. attacking with smithing hammer or eating an edible item)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.HandUsingBlockSel">
            <summary>
            The block pos the player started using
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.MovespeedMultiplier">
            <summary>
            The movement speed multiplier.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityControls.Dirty">
            <summary>
            Whether or not this entity is dirty.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Forward">
            <summary>
            A check for if the entity is moving in the direction it's facing.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Backward">
            <summary>
            A check for if the entity is moving the opposite direction it's facing.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Left">
            <summary>
            A check to see if the entity is moving left the direction it's facing.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Right">
            <summary>
            A check to see if the entity is moving right the direction it's facing.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Jump">
            <summary>
            A check whether to see if the entity is jumping.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Sneak">
            <summary>
            A check whether to see if the entity is sneaking.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Sitting">
            <summary>
            A check to see whether the entity is sitting.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.FloorSitting">
            <summary>
            A check to see whether the entity is sitting on the floor.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Sprint">
            <summary>
            A check to see whether the entity is sprinting.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Up">
            <summary>
            A check to see whether the entity is moving up.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.Down">
            <summary>
            A check to see whether the entity is moving down.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.LeftMouseDown">
            <summary>
            A check to see if the entity is holding the in-world rleft mouse button down.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityControls.RightMouseDown">
            <summary>
            A check to see if the entity is holding the in-world right mouse button down.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityControls.CalcMovementVectors(Vintagestory.API.Common.Entities.EntityPos,System.Single)">
            <summary>
            Calculates the movement vectors for the player.
            </summary>
            <param name="pos">The position of the player.</param>
            <param name="dt">The change in time.</param>
        </member>
        <member name="M:Vintagestory.API.Common.EntityControls.SetFrom(Vintagestory.API.Common.EntityControls)">
            <summary>
            Copies the controls from the provided controls to this set of controls.
            </summary>
            <param name="controls">The controls to copy over.</param>
        </member>
        <member name="M:Vintagestory.API.Common.EntityControls.UpdateFromPacket(System.Boolean,System.Int32)">
            <summary>
            Updates the data from the packet.
            </summary>
            <param name="pressed">Whether or not the key was pressed.</param>
            <param name="action">the id of the key that was pressed.</param>
        </member>
        <member name="M:Vintagestory.API.Common.EntityControls.StopAllMovement">
            <summary>
            Forces the entity to stop all movements.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityControls.ToInt">
            <summary>
            Converts the values to a single int flag.
            </summary>
            <returns>the compressed integer.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.EntityControls.FromInt(System.Int32)">
            <summary>
            Converts the int flags to movement controls.
            </summary>
            <param name="flagsInt">The compressed integer.</param>
        </member>
        <member name="P:Vintagestory.API.Common.EntityItem.Itemstack">
            <summary>
            The itemstack attached to this Item Entity.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityItem.ByPlayerUid">
            <summary>
            The UID of the player that dropped this itemstack.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityItem.MaterialDensity">
            <summary>
            Returns the material density of the item.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityItem.IsInteractable">
            <summary>
            Whether or not the EntityItem is interactable.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityItem.LightHsv">
            <summary>
            Get the HSV colors for the lighting.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityItem.FromItemstack(Vintagestory.API.Common.ItemStack,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Builds and spawns an EntityItem from a provided ItemStack.
            </summary>
            <param name="itemstack">The contents of the EntityItem</param>
            <param name="position">The position of the EntityItem</param>
            <param name="velocity">The velocity of the EntityItem</param>
            <param name="world">The world the EntityItems preside in.</param>
            <returns>A freshly baked EntityItem to introduce to the world.</returns>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.PreviousBlockSelection">
            <summary>
            The block position previously selected by the player
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.BlockSelection">
            <summary>
            The block or blocks currently selected by the player
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.EntitySelection">
            <summary>
            The entity or entities selected by the player
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.DeathReason">
            <summary>
            The reason the player died (if the player did die). Set only by the game server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.CameraPos">
            <summary>
            The camera position of the player's view. Set only by the game client.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.WalkYaw">
            <summary>
            The yaw the player currently wants to walk towards to. Value set by the PlayerPhysics system. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.WalkPitch">
            <summary>
            The pitch the player currently wants to move to. Only relevant while swimming. Value set by the PlayerPhysics system. Set by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.OnFootStep">
            <summary>
            Set this to hook into the foot step sound creator thingy. Currently used by the armor system to create armor step sounds. Called by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.OnImpact">
            <summary>
            Called when the player falls onto the ground. Called by the game client and server.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntityPlayer.OnCanSpawnNearby">
            <summary>
            Called whenever the game wants to spawn new creatures around the player. Called only by the game server.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityPlayer.PlayerUID">
            <summary>
            The player's internal Universal ID. Available on the client and the server.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityPlayer.RightHandItemSlot">
            <summary>
            The players right hand contents. Available on the client and the server.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityPlayer.LeftHandItemSlot">
            <summary>
            The playres left hand contents. Available on the client and the server.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityPlayer.GearInventory">
            <summary>
            The players wearables. Available on the client and the server.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.EntityPlayer.Player">
            <summary>
            The base player attached to this EntityPlayer.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EntityPlayer.SetCurrentlyControlledPlayer">
            <summary>
            Sets the current player.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntitySelection.Entity">
            <summary>
            The selected Entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntitySelection.Position">
            <summary>
            The position of the selected entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntitySelection.Face">
            <summary>
            the facing of the entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EntitySelection.HitPosition">
            <summary>
            The hit position of the entity.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumHandHandling">
            <summary>
            How the engine should handle attacking with an item in hands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandHandling.NotHandled">
            <summary>
            Uses the engine default behavior which is to play an attack animation and do block breaking/damage entities if in range. Will not call the *Step and *Stop methods.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandHandling.Handled">
            <summary>
            Uses the engine default behavior which is to play an attack or build animation and do block breaking/damage entities if in range,
            but also notify the server that the Use/Attack method has to be called serverside as well. Will call the *Step and *Stop methods.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandHandling.PreventDefaultAnimation">
            <summary>
            Do not play any default first person attack animation, but do block breaking/damage entities if in range. Notifies that the server that the Use/Attack method has to be called serverside as well. Will call the *Step and *Stop methods.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandHandling.PreventDefaultAction">
            <summary>
            Do play first person attack animation, don't break blocks/damage entities in range. Notifies that the server that the Use/Attack method has to be called serverside as well. Will call the *Step and *Stop methods.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandHandling.PreventDefault">
            <summary>
            Do not play any first person attack animation, don't break blocks in range or damage entities in range. Notifies that the server that the Use/Attack method has to be called serverside as well. Will call the *Step and *Stop methods.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IMountable.Controls">
            <summary>
            Return non-null controls if the player can control the mountable
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IMountable.MountableToTreeAttributes(Vintagestory.API.Datastructures.TreeAttribute)">
            <summary>
            When the entity unloads you should write whatever you need in here to reconstruct the IMountable after it's loaded again
            Reconstruct it by registering a mountable instancer through api.RegisterMountable(string className, GetMountableDelegate mountableInstancer)
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IMountable.DidUnmount(Vintagestory.API.Common.EntityAgent)">
            <summary>
            Called when the entity unmounted himself
            </summary>
            <param name="entityAgent"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IMountable.DidMount(Vintagestory.API.Common.EntityAgent)">
            <summary>
            Called when the entity mounted himself
            </summary>
            <param name="entityAgent"></param>
        </member>
        <member name="T:Vintagestory.API.Common.DummySlot">
            <summary>
            A single slot not attached to a given inventory.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventoryNetworkUtil.Api">
            <summary>
            The core API
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IInventoryNetworkUtil.GetActivateSlotPacket(System.Int32,Vintagestory.API.Common.ItemStackMoveOperation)">
            <summary>
            Gets the active slot packet.  
            </summary>
            <param name="slotId">The slot ID</param>
            <param name="op">The operation of the slot.</param>
        </member>
        <member name="M:Vintagestory.API.Common.IInventoryNetworkUtil.GetFlipSlotsPacket(Vintagestory.API.Common.IInventory,System.Int32,System.Int32)">
            <summary>
            Flips the items between the source slot and target slot.
            </summary>
            <param name="sourceInv">The inventory.</param>
            <param name="sourceSlotId">The source slot ID</param>
            <param name="targetSlotId">The target slot ID</param>
        </member>
        <member name="M:Vintagestory.API.Common.IInventoryNetworkUtil.HandleClientPacket(Vintagestory.API.Common.IPlayer,System.Int32,System.Byte[])">
            <summary>
            Handles the client packet.
            </summary>
            <param name="byPlayer">The player the packet came from</param>
            <param name="packetId">the ID of the packet.</param>
            <param name="data">the contents of the packet.</param>
        </member>
        <member name="M:Vintagestory.API.Common.IInventoryNetworkUtil.DidOpen(Vintagestory.API.Common.IPlayer)">
            <summary>
            Opens a target inventory, passing it to the player.
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IInventoryNetworkUtil.DidClose(Vintagestory.API.Common.IPlayer)">
            <summary>
            Closes the target inventory attached to a player.
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.CustomGetTransitionSpeedMulDelegate">
            <summary>
            Custom transition speed handler
            </summary>
            <param name="transType"></param>
            <param name="stack"></param>
            <param name="mulByConfig">Multiplier set by other configuration, if any, otherwise 1</param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.InventoryBase">
            <summary>
            Basic class representing an item inventory
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.Api">
            <summary>
            The world in which the inventory is operating in. Gives inventories access to block types, item types and the ability to drop items on the ground.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.Pos">
            <summary>
            Optional field that can be used to define in-world position of the inventory. Is set by most container block entities. Might be null!
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.baseWeight">
            <summary>
            Is this inventory generally better suited to hold items? (e.g. set to 3 for armor in armor inventory, 2 for any item in hotbar inventory, 1 for any item in normal inventory)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.className">
            <summary>
            The name of the class for the invnentory.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.instanceID">
            <summary>
            the ID of the instance for the inventory.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.lastChangedSinceServerStart">
            <summary>
            The time it was last changed since the server was started.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.openedByPlayerGUIds">
            <summary>
            The players that had opened the inventory.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.InvNetworkUtil">
            <summary>
            The network utility for the inventory
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.dirtySlots">
            <summary>
            Slots that have been recently modified. This list is used on the server to update the clients (then cleared) and on the client to redraw itemstacks in guis (then cleared)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.InventoryID">
            <summary>
            The internal name of the inventory instance.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.ClassName">
            <summary>
            The class name of the inventory.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.LastChanged">
            <summary>
            Milliseconds since server startup when the inventory was last changed (not used currently)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.Count">
            <summary>
            Returns the number of slots in this inventory.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.Item(System.Int32)">
            <summary>
            Gets or sets the slot at the given slot number.
            Returns null for invalid slot number (below 0 or above Count-1).
            The setter allows for replacing slots with custom ones, though caution is advised.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.IsDirty">
            <summary>
            True if this inventory has to be resent to the client or when the client has to redraw them
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.DirtySlots">
            <summary>
            The slots that have been modified server side and need to be resent to the client or need to be redrawn on the client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.TakeLocked">
            <summary>
            Called by item slot, if true, player cannot take items from this inventory
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.PutLocked">
            <summary>
            Called by item slot, if true, player cannot put items into this inventory
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.RemoveOnClose">
            <summary>
            If true, the inventory will be removed from the list of available inventories once closed (i.e. is not a personal inventory that the player carries with him)
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.InventoryBase.SlotModified">
            <summary>
            Called whenever a slot has been modified
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.InventoryBase.SlotNotified">
            <summary>
            Called whenever a slot notification event has been fired. Is used by the slot grid gui element to visually wiggle the slot contents
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.InventoryBase.OnInventoryOpened">
            <summary>
            Called whenever this inventory was opened
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.InventoryBase.OnInventoryClosed">
            <summary>
            Called whenever this inventory was closed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBase.OnAcquireTransitionSpeed">
            <summary>
            If set, the value is returned when GetTransitionSpeedMul() is called instead of the default value.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBase.Empty">
            <summary>
            Convenience method to check if this inventory contains anything
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.#ctor(System.String,System.String,Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Create a new instance of an inventory. You may choose any value for className and instanceID, but if more than one of these inventories can be opened at the same time, make sure for both of them to have a different id
            </summary>
            <param name="className"></param>
            <param name="instanceID"></param>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.#ctor(System.String,Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Create a new instance of an inventory. InvetoryID must have the format [className]-[instanceId]. You may choose any value for className and instanceID, but if more than one of these inventories can be opened at the same time, make sure for both of them to have a different id
            </summary>
            <param name="inventoryID"></param>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.LateInitialize(System.String,Vintagestory.API.Common.ICoreAPI)">
            <summary>
            You can initialize an InventoryBase with null as parameters and use LateInitialize to set these values later. This is sometimes required during chunk loading.
            </summary>
            <param name="inventoryID"></param>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.AfterBlocksLoaded(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            The event fired after all the blocks have loaded.
            </summary>
            <param name="world"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.ResolveBlocksOrItems">
            <summary>
            Tells the invnetory to update blocks and items within the invnetory.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GetSlotId(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Will return -1 if the slot is not found in this inventory
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GetBestSuitedSlot(Vintagestory.API.Common.ItemSlot,System.Collections.Generic.List{Vintagestory.API.Common.ItemSlot})">
            <summary>
            Gets the best sorted slot for the given item.
            </summary>
            <param name="sourceSlot">The source item slot.</param>
            <param name="skipSlots">The slots to skip.</param>
            <returns>A weighted slot set.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GetSuitability(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemSlot,System.Boolean)">
            <summary>
            How well a stack fits into this inventory. By default 1 for new itemstacks and 3 for an itemstack merge. Chests and other stationary container also add a +1 to the suitability if the source slot is from the players inventory.
            </summary>
            <param name="sourceSlot"></param>
            <param name="targetSlot"></param>
            <param name="isMerge"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.TryFlipItems(System.Int32,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Attempts to flip the contents of both slots
            </summary>
            <param name="targetSlotId"></param>
            <param name="itemSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.CanPlayerAccess(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Determines whether or not the player can access the invnetory.
            </summary>
            <param name="player">The player attempting access.</param>
            <param name="position">The postion of the entity.</param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.CanPlayerModify(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Determines whether or not the player can modify the invnetory.
            </summary>
            <param name="player">The player attempting access.</param>
            <param name="position">The postion of the entity.</param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.OnSearchTerm(System.String)">
            <summary>
            The event fired when the search is applied to the item.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.ActivateSlot(System.Int32,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Call when a player has clicked on this slot. The source slot is the mouse cursor slot. This handles the logic of either taking, putting or exchanging items.
            </summary>
            <param name="slotId"></param>
            <param name="sourceSlot"></param>
            <param name="op"></param>
            <returns>The appropriate packet needed to reflect the changes on the opposing side</returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.OnItemSlotModified(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Called when one of the containing slots has been modified
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.DidModifyItemSlot(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStack)">
            <summary>
            Called when one of the containing slots has been modified
            </summary>
            <param name="slot"></param>
            <param name="extractedStack">If non null the itemstack that was taken out</param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.PerformNotifySlot(System.Int32)">
            <summary>
            Called when one of the containing slot was notified via NotifySlot
            </summary>
            <param name="slotId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.FromTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Called when the game is loaded or loaded from server
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.ToTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Called when the game is saved or sent to client
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.TryFlipItemStack(Vintagestory.API.Common.IPlayer,System.String[],System.Int32[],System.Int64[])">
            <summary>
            Attempts to flip the inventory slots.
            </summary>
            <param name="owningPlayer">The player owner of the invnetory slots.</param>
            <param name="invIds">The IDs of the player inventory.</param>
            <param name="slotIds">The IDs of the target inventory.</param>
            <param name="lastChanged">The times these ids were last changed.</param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.TryMoveItemStack(Vintagestory.API.Common.IPlayer,System.String[],System.Int32[],Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Attempts to move the item stack from the inventory to another slot.
            </summary>
            <param name="player">The player moving the items</param>
            <param name="invIds">The player inventory IDs</param>
            <param name="slotIds">The target Ids</param>
            <param name="op">The operation type.</param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GetSlotsIfExists(Vintagestory.API.Common.IPlayer,System.String[],System.Int32[])">
            <summary>
            Attempts to get specified slots if the slots exists.
            </summary>
            <param name="player">The player owning the slots</param>
            <param name="invIds">The inventory IDs</param>
            <param name="slotIds">The slot ids</param>
            <returns>The slots obtained.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.SlotsFromTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute,Vintagestory.API.Common.ItemSlot[],System.Collections.Generic.List{Vintagestory.API.Common.ItemSlot})">
            <summary>
            Creates a collection of slots from a tree.
            </summary>
            <param name="tree">The tree to build slots from</param>
            <param name="slots">pre-existing slots. (default: null)</param>
            <param name="modifiedSlots">Pre-modified slots. (default: null)</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.SlotsToTreeAttributes(Vintagestory.API.Common.ItemSlot[],Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Sets the tree attribute using the slots.
            </summary>
            <param name="slots"></param>
            <param name="tree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GenEmptySlots(System.Int32)">
            <summary>
            Gets a specified number of empty slots.
            </summary>
            <param name="quantity">the number of empty slots to get.</param>
            <returns>The pre-specified slots.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.NewSlot(System.Int32)">
            <summary>
            A command to build a new empty slot.
            </summary>
            <param name="i">the index of the slot.</param>
            <returns>An empty slot bound to this inventory.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.MarkSlotDirty(System.Int32)">
            <summary>
            Server Side: Will resent the slot contents to the client and mark them dirty there as well
            Client Side: Will refresh stack size, model and stuff if this stack is currently being rendered
            </summary>
            <param name="slotId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.DiscardAll">
            <summary>
            Discards everything in the item slots.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.DropSlots(Vintagestory.API.MathTools.Vec3d,System.Int32[])">
            <summary>
            Drops the contents of the specified slots in the world.
            </summary>
            <param name="pos">The position of the inventory attached to the slots.</param>
            <param name="slotsIds">The slots to have their inventory drop.</param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.DropAll(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Drops the contents of all the slots into the world.
            </summary>
            <param name="pos">Where to drop all this stuff.</param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GetTransitionSpeedMul(Vintagestory.API.Common.EnumTransitionType,Vintagestory.API.Common.ItemStack)">
            <summary>
            Does this inventory speed up or slow down a transition for given itemstack? (Default: 1 for perish and 0 otherwise)
            </summary>
            <param name="transType"></param>
            <param name="stack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.Open(Vintagestory.API.Common.IPlayer)">
            <summary>
            Marks the inventory available for interaction for this player. Returns a open inventory packet that can be sent to the server for synchronization.
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.Close(Vintagestory.API.Common.IPlayer)">
            <summary>
            Removes ability to interact with this inventory for this player. Returns a close inventory packet that can be sent to the server for synchronization.
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.HasOpened(Vintagestory.API.Common.IPlayer)">
            <summary>
            Checks if given player has this inventory currently opened
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GetEnumerator">
            <summary>
            Gets the enumerator for the inventory.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GetAutoPushIntoSlot(Vintagestory.API.MathTools.BlockFacing,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Return the slot where a chute may push items into. Return null if it shouldn't move items into this inventory.
            </summary>
            <param name="atBlockFace"></param>
            <param name="fromSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryBase.GetAutoPullFromSlot(Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Return the slot where a chute may pull items from. Return null if it is now allowed to pull any items from this inventory
            </summary>
            <param name="atBlockFace"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.InventoryBasePlayer">
            <summary>
            Abstract class used for all inventories that are "on" the player. Any inventory not inheriting from this class will not be stored to the savegame as part of the players inventory.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.InventoryBasePlayer.playerUID">
            <summary>
            The player ID for the inventory.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryBasePlayer.Player">
            <summary>
            The owning player of this inventory
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.InventoryGeneric">
            <summary>
            A general purpose inventory
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryGeneric.#ctor(System.Int32,System.String,System.String,Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.NewSlotDelegate)">
            <summary>
            Create a new general purpose inventory
            </summary>
            <param name="quantitySlots"></param>
            <param name="className"></param>
            <param name="instanceId"></param>
            <param name="api"></param>
            <param name="onNewSlot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryGeneric.#ctor(System.Int32,System.String,Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.NewSlotDelegate)">
            <summary>
            Create a new general purpose inventory
            </summary>
            <param name="quantitySlots"></param>
            <param name="invId"></param>
            <param name="api"></param>
            <param name="onNewSlot"></param>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryGeneric.Count">
            <summary>
            Amount of available slots
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryGeneric.Item(System.Int32)">
            <summary>
            Get slot for given slot index
            </summary>
            <param name="slotId"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.InventoryGeneric.IsEmpty">
            <summary>
            True if all slots are empty
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryGeneric.FromTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Loads the slot contents from given treeAttribute
            </summary>
            <param name="treeAttribute"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryGeneric.ToTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Stores the slot contents to invtree
            </summary>
            <param name="invtree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.InventoryGeneric.NewSlot(System.Int32)">
            <summary>
            Called when initializing the inventory or when loading the contents
            </summary>
            <param name="slotId"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ItemSlot">
            <summary>
            The default item slot to item stacks
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.ItemSlot.MarkedDirty">
            <summary>
            Can be used to interecept marked dirty calls. 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemSlot.MaxSlotStackSize">
            <summary>
            The upper holding limit of the slot itself. Standard slots are only limited by the item stacks maxstack size.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemSlot.Inventory">
            <summary>
            Gets the inventory attached to this ItemSlot.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemSlot.RemainingSlotSpace">
            <summary>
            Amount of space left, independent of item MaxStacksize 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemSlot.BackgroundIcon">
            <summary>
            Icon name to be drawn in the slot background
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemSlot.HexBackgroundColor">
            <summary>
            If set will be used as the background color
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemSlot.Itemstack">
            <summary>
            The ItemStack contained within the slot.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemSlot.StackSize">
            <summary>
            The number of items in the stack.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemSlot.Empty">
            <summary>
            Whether or not the stack is empty.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemSlot.StorageType">
            <summary>
            The storage type of this slot.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.#ctor(Vintagestory.API.Common.InventoryBase)">
            <summary>
            Create a new instance of an item slot
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.CanTakeFrom(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EnumMergePriority)">
            <summary>
            Whether or not this slot can take the item from the source slot.
            </summary>
            <param name="sourceSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.CanHold(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Whether or not this slot can hold the item from the source slot.
            </summary>
            <param name="sourceSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.CanTake">
            <summary>
            Whether or not this slots item can be retrieved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.TakeOutWhole">
            <summary>
            Gets the entire contents of the stack, setting the base stack to null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.TakeOut(System.Int32)">
            <summary>
            Gets some of the contents of the stack.
            </summary>
            <param name="quantity">The amount to get from the stack.</param>
            <returns>The stack with the quantity take out (or as much as was available)</returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.TryPutInto(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemSlot,System.Int32)">
            <summary>
            Attempts to place item in this slot into the target slot.
            </summary>
            <param name="world"></param>
            <param name="sinkSlot"></param>
            <param name="quantity"></param>
            <returns>Amount of moved items</returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.TryPutInto(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Returns the quantity of items that were not merged (left over in the source slot)
            </summary>
            <param name="sinkSlot"></param>
            <param name="op"></param>
            <returns>Amount of moved items</returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.TryFlipWith(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Attempts to flip the ItemSlots.
            </summary>
            <param name="itemSlot"></param>
            <returns>Whether or no the flip was successful.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.FlipWith(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Forces a flip with the given ItemSlot
            </summary>
            <param name="withSlot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.ActivateSlot(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Called when a player has clicked on this slot.  The source slot is the mouse cursor slot.  This handles the logic of either taking, putting or exchanging items.
            </summary>
            <param name="sourceSlot"></param>
            <param name="op"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.ActivateSlotLeftClick(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Activates the left click functions of the given slot.
            </summary>
            <param name="sourceSlot"></param>
            <param name="op"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.ActivateSlotMiddleClick(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Activates the middle click functions of the given slot.
            </summary>
            <param name="sinkSlot"></param>
            <param name="op"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.ActivateSlotRightClick(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Activates the right click functions of the given slot.
            </summary>
            <param name="sourceSlot"></param>
            <param name="op"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.OnItemSlotModified(Vintagestory.API.Common.ItemStack)">
            <summary>
            The event fired when the slot is modified.
            </summary>
            <param name="sinkStack"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.MarkDirty">
            <summary>
            Marks the slot as dirty which  queues it up for saving and resends it to the clients. Does not sync from client to server.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.GetStackName">
            <summary>
            Gets the name of the itemstack- if it exists.
            </summary>
            <returns>The name of the itemStack or null.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlot.GetStackDescription(Vintagestory.API.Client.IClientWorldAccessor,System.Boolean)">
            <summary>
            Gets the StackDescription for the item.
            </summary>
            <param name="world">The world the item resides in.</param>
            <param name="extendedDebugInfo">Whether or not we have Extended Debug Info enabled.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemSlotCharacter.IsDressType(Vintagestory.API.Common.IItemStack,Vintagestory.API.Common.EnumCharacterDressType)">
            <summary>
            Checks to see what dress type the given item is.
            </summary>
            <param name="itemstack"></param>
            <param name="dressType"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ItemSlotOutput">
            <summary>
            A slot from which the player can only take stuff out of, but not place anything in it
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ItemSlotSurvival">
            <summary>
            Standard survival mode slot that can hold everything except full backpacks
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ItemSlotUniversal">
            <summary>
            A universal item slot type that can hold anything.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMergePriority.AutoMerge">
            <summary>
            Automatic merge operation, when a player did not specifically request a merge, e.g. with shift + left click, or when collected from the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMergePriority.DirectMerge">
            <summary>
            When using mouse to manually merge item stacks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMergePriority.ConfirmedMerge">
            <summary>
            Confirmed merge via dialog. Not implemented as of v1.14
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.World">
            <summary>
            The world that the move operation is being performed.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.ActingPlayer">
            <summary>
            The acting player within the world.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.MouseButton">
            <summary>
            The mouse button the ActingPlayer has pressed.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.Modifiers">
            <summary>
            Any modifiers that the ActingPlayer is using for the operation (Ctrl, shift, alt)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.CurrentPriority">
            <summary>
            The current Priority for merging slots.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.RequiredPriority">
            <summary>
            The required Priority (can be null)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.ConfirmationMessageCode">
            <summary>
            The confirmation message code for this operation.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.RequestedQuantity">
            <summary>
            The amount requested.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.MovableQuantity">
            <summary>
            The amount moveable.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMoveOperation.MovedQuantity">
            <summary>
            The amount moved.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStackMoveOperation.NotMovedQuantity">
            <summary>
            The amount not moved.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStackMoveOperation.ShiftDown">
            <summary>
            Checks if the Shift Key is held down.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStackMoveOperation.CtrlDown">
            <summary>
            Checks if the Ctrl key is held down.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStackMoveOperation.AltDown">
            <summary>
            Checks if the Alt key is held down.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStackMoveOperation.ToMergeOperation(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Converts this MoveOperation to a Merge Operation.
            </summary>
            <param name="SinkSlot">The slot to put items.</param>
            <param name="SourceSlot">The slot to take items.</param>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMergeOperation.SinkSlot">
            <summary>
            The slot that the item is attempting transfer to.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStackMergeOperation.SourceSlot">
            <summary>
            The slot that the item is being transferred from
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCubeParticles.particlePos">
            <summary>
            The position of the particle
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCubeParticles.quantity">
            <summary>
            The amount of particles.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCubeParticles.radius">
            <summary>
            The radius of the particle emission.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCubeParticles.scale">
            <summary>
            The scale of the particles.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.StackCubeParticles.collisionPos">
            <summary>
            The position of the collision to create these particles.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.StackCubeParticles.stack">
            <summary>
            The contents that the particles are built off of.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.StackCubeParticles.quantity">
            <summary>
            The amount of particles to be released.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.StackCubeParticles.radius">
            <summary>
            The radius to release the particles.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.StackCubeParticles.scale">
            <summary>
            The scale of the particles.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.CollectibleParticleProperties">
            <summary>
            Abstract class used for BlockVoxelParticles and ItemVoxelParticles
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ParticlesProviderBase">
            <summary>
            A base class for all particle providers.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.DieInLiquid">
            <summary>
            Determines whether or not the particle dies in liquid
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.DieInAir">
            <summary>
            Whether or not the particle dies in air.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.Quantity">
            <summary>
            Gets the quantity of particles.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.Pos">
            <summary>
            Gets the position of particles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ParticlesProviderBase.GetVelocity(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Gets the velocity of the particles.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ParticlesProviderBase.GetRgbaColor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Gets the color of the particle.
            </summary>
            <param name="capi"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.OpacityEvolve">
            <summary>
            Gets the evolving opacity value of the particle.
            </summary>
            <returns>An evolving value based on opacity.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.RedEvolve">
            <summary>
            Gets the evolving red value of the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.GreenEvolve">
            <summary>
            Gets the evolving green value of the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.BlueEvolve">
            <summary>
            Gets the evolving blue value of the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.ParticleModel">
            <summary>
            Gets the model type of the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.Size">
            <summary>
            gets the size of the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.SizeEvolve">
            <summary>
            gets the dynamic size of the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.VelocityEvolve">
            <summary>
            Get the dynamic speeds of the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.GravityEffect">
            <summary>
            Gets the gravity effect on the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.LifeLength">
            <summary>
            gets the life length of the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.VertexFlags">
            <summary>
            gets the glow level of the particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.SelfPropelled">
            <summary>
            Whether or not the particle is self-propelled.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.TerrainCollision">
            <summary>
            Whether or not the particle collides with the terrain or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ParticlesProviderBase.ToBytes(System.IO.BinaryWriter)">
            <summary>
            How the particle is written to the save. (if it is)
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ParticlesProviderBase.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            How the particle is read from the save.
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.SecondarySpawnInterval">
            <summary>
            Gets the secondary particle spawn interval.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.SecondaryParticles">
            <summary>
            Gets the secondary particle type for this particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ParticlesProviderBase.DeathParticles">
            <summary>
            Gets the death particle for this type of particle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BitmapExternal.GetPixel(System.Int32,System.Int32)">
            <summary>
            Retrives the ARGB value from given coordinate
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BitmapExternal.GetPixelRel(System.Single,System.Single)">
            <summary>
            Retrives the ARGB value from given coordinate using normalized coordinates (0..1)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ExplosionParticles">
            <summary>
            A subclass of ExplosionSmokeParticles.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ExplosionSmokeParticles">
            <summary>
            Handles the smoke particles of where the explosion was.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ParticleBase">
            <summary>
            Represents a particle that has been spawned
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ParticleBase.Position">
            <summary>
            Returns the current position of the particle
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.ParticleBase.Velocity">
            <summary>
            Returns the current velocity of the particle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ParticleBase.TickFixedStep(System.Single,Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Client.ParticlePhysics)">
            <summary>
            Dt will never be above PhysicsTickTime
            </summary>
            <param name="dt"></param>
            <param name="api"></param>
            <param name="physicsSim"></param>
        </member>
        <member name="T:Vintagestory.API.Common.IClassRegistryAPI">
            <summary>
            Interface for creating instances
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateBlock(System.String)">
            <summary>
            Creates a block instance from given block class 
            </summary>
            <param name="blockclass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetBlockClass(System.String)">
            <summary>
            Returns the type of the registered block class or null otherwise
            </summary>
            <param name="blockclass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateBlockEntity(System.String)">
            <summary>
            Creates a block entity instance from given block entity class 
            </summary>
            <param name="blockEntityClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateEntity(System.String)">
            <summary>
            Creates a entity instance from given entity class 
            </summary>
            <param name="entityClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateEntity(Vintagestory.API.Common.Entities.EntityProperties)">
            <summary>
            Creates a entity instance from given entity type 
            </summary>
            <param name="entityClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateMountable(Vintagestory.API.Datastructures.TreeAttribute)">
            <summary>
            Creates an instance of a mountable that has been registered with api.RegisterMountable
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateBlockBehavior(Vintagestory.API.Common.Block,System.String)">
            <summary>
            Creates a block behavior instance from given block class 
            </summary>
            <param name="forBlock"></param>
            <param name="blockBehaviorName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetBlockEntityBehaviorClass(System.String)">
            <summary>
            Returns the block entity behavior type if such is registered under supplied name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateBlockEntityBehavior(Vintagestory.API.Common.BlockEntity,System.String)">
            <summary>
            Creates a block entity behavior instance for given block entity
            </summary>
            <param name="blockEntity"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetBlockBehaviorClass(System.String)">
            <summary>
            Returns the block behavior type registered for given name or null
            </summary>
            <param name="blockclass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateEntityBehavior(Vintagestory.API.Common.Entities.Entity,System.String)">
            <summary>
            Creates a block behavior instance from given block class 
            </summary>
            <param name="forEntity"></param>
            <param name="entityBehaviorName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateItem(System.String)">
            <summary>
            Creates an item instance from given item class 
            </summary>
            <param name="itemclass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetItemClass(System.String)">
            <summary>
            Gets the registered item type or null if not registered
            </summary>
            <param name="itemClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateJsonTreeAttributeFromDict(System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Datastructures.JsonTreeAttribute})">
            <summary>
            Creates a json serializable version of an ITreeAttribute
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetBlockEntity(System.String)">
            <summary>
            Returns the type for given BlockEntity class name as register in the ClassRegistry
            </summary>
            <param name="bockEntityClass"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetBlockEntityClass(System.Type)">
            <summary>
            Returns the block entity class code if give Type is a registered block entity class
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.GetEntityClassName(System.Type)">
            <summary>
            Returns the entity class code if give Type is a registered entity class
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IClassRegistryAPI.CreateCropBehavior(Vintagestory.API.Common.Block,System.String)">
            <summary>
            Creates a crop behavior instance from given block class 
            </summary>
            <param name="forBlock"></param>
            <param name="cropBehaviorName"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.CmdArgs">
            <summary>
            The arguments from a client or sever command
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.#ctor">
            <summary>
            Creates a new instance of the CmdArgs util with no arguments
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of the CmdArgs util
            </summary>
            <param name="joinedargs"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.#ctor(System.String[])">
            <summary>
            Creates a new instance of the CmdArgs util
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Vintagestory.API.Common.CmdArgs.Item(System.Int32)">
            <summary>
            Returns the n-th arugment
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.CmdArgs.Length">
            <summary>
            Amount of arguments passed
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopAll">
            <summary>
            Returns all remaining arguments as single merged string, concatenated with spaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PeekChar(System.Nullable{System.Char})">
            <summary>
            Returns the first char of the first argument
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopChar(System.Nullable{System.Char})">
            <summary>
            Remove the first character from the first argument and returns it
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopWord(System.String)">
            <summary>
            Removes the first argument and returns it
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PeekWord(System.String)">
            <summary>
            Removes the first argument and returns it
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PushSingle(System.String)">
            <summary>
            Adds an arg to the beginning
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.AppendSingle(System.String)">
            <summary>
            Adds an arg to the end
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopEnum``1(``0)">
            <summary>
            Tries to retrieve arg at given index as enum value or default if not enough arguments or not part of the enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopInt(System.Nullable{System.Int32})">
            <summary>
            Tries to retrieve arg at given index as int, or null if not enough arguments or not an integer
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopLong(System.Nullable{System.Int64})">
            <summary>
            Tries to retrieve arg at given index as long, or null if not enough arguments or not a long
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopBool(System.Nullable{System.Boolean})">
            <summary>
            Tries to retrieve arg at given index as boolean, or null if not enough arguments or not an integer
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopDouble(System.Nullable{System.Double})">
            <summary>
            Tries to retrieve arg at given index as int, or null if not enough arguments or not an integer
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopFloat(System.Nullable{System.Single})">
            <summary>
            Tries to retrieve arg at given index as float, or null if not enough arguments or not a float
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopVec3i(Vintagestory.API.MathTools.Vec3i)">
            <summary>
            Tries to retrieve 3 int coordinates from the next 3 arguments
            </summary>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CmdArgs.PopFlexiblePos(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Retrieves a player position with following syntax:
            [coord] [coord] [coord]
            whereas 
            [coord] may be ~[decimal]  or =[decimal] or [decimal]
            ~ denotes a position relative to the player
            = denotes an absolute position
            no prefix denots a position relative to the map middle
            </summary>
            <param name="playerPos"></param>
            <param name="mapMiddle"></param>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStack.Class">
            <summary>
            Wether its a block Block or Item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ItemStack.Id">
            <summary>
            The id of the block or item
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.Collectible">
            <summary>
            The item/block base class this stack is holding
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.Item">
            <summary>
            If this is a stack of items, this is the type of items it's holding, otherwise null
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.Block">
            <summary>
            If this is a stack of blocks, this is the type of block it's holding, otherwise null
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.StackSize">
            <summary>
            The amount of items/blocks in this stack
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.Vintagestory#API#Common#IItemStack#Id">
            <summary>
            The id of the block or item
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.Attributes">
            <summary>
            Attributes assigned to this particular itemstack which are saved and synchronized. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.TempAttributes">
            <summary>
            Temporary Attributes assigned to this particular itemstack, not synchronized, not saved! Modifiable.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.ItemAttributes">
            <summary>
            The Attributes assigned to the underlying block/item. Should not be modified, as it applies to globally.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ItemStack.Vintagestory#API#Common#IItemStack#Class">
            <summary>
            Is it a Block or an Item?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.#ctor">
            <summary>
            Create a new empty itemstack
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.#ctor(System.Int32,Vintagestory.API.Common.EnumItemClass,System.Int32,Vintagestory.API.Datastructures.TreeAttribute,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Create a new itemstack with given collectible id, itemclass, stacksize, attributes and a resolver to turn the collectibe + itemclass into an Item/Block
            </summary>
            <param name="id"></param>
            <param name="itemClass"></param>
            <param name="stacksize"></param>
            <param name="stackAttributes"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.#ctor(System.IO.BinaryReader)">
            <summary>
            Create a new itemstack from a byte serialized stream (without resolving the block/item)
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.#ctor(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Create a new itemstack from a byte serialized stream (with resolving the block/item)
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.#ctor(Vintagestory.API.Common.CollectibleObject,System.Int32)">
            <summary>
            Create a new itemstack from given block/item and given stack size
            </summary>
            <param name="collectible"></param>
            <param name="stacksize"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.#ctor(Vintagestory.API.Common.Item,System.Int32)">
            <summary>
            Create a new itemstack from given item and given stack size
            </summary>
            <param name="item"></param>
            <param name="stacksize"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.#ctor(Vintagestory.API.Common.Block,System.Int32)">
            <summary>
            Create a new itemstack from given block and given stack size
            </summary>
            <param name="block"></param>
            <param name="stacksize"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.Equals(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack,System.String[])">
            <summary>
            Returns true if both stacks exactly match
            </summary>
            <param name="worldForResolve"></param>
            <param name="sourceStack"></param>
            <param name="ignoreAttributeSubTrees"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.Satisfies(Vintagestory.API.Common.ItemStack)">
            <summary>
            Returns true if this item stack is a satisfactory replacement for given itemstack. It's basically an Equals() test, but ignores additional attributes of the sourceStack
            </summary>
            <param name="sourceStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.SetFrom(Vintagestory.API.Common.ItemStack)">
            <summary>
            Replace all the attributes from this item stack by given stack
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.ToString">
            <summary>
            Turn the itemstack into a simple string representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serializes the itemstack into a series of bytes, including its stack attributes
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.FromBytes(System.IO.BinaryReader)">
            <summary>
            Reads all the itemstacks properties from a series of bytes, including its stack attributes
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.ResolveBlockOrItem(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Sets the item/block based on the currently set itemclass + id
            </summary>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.MatchesSearchText(Vintagestory.API.Common.IWorldAccessor,System.String)">
            <summary>
            Returns true if searchText is found in the item/block name as supplied from GetName()
            </summary>
            <param name="world"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.GetName">
            <summary>
            Returns a human readable name of the item/block
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.GetDescription(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemSlot,System.Boolean)">
            <summary>
            Returns a human readable description of the item/block
            </summary>
            <param name="world"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.Clone">
            <summary>
            Creates a full copy of the item stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.GetEmptyClone">
            <summary>
            Creates a full copy of the item stack, except for its stack size.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ItemStack.FixMapping(System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            This method should always be called when an itemstack got loaded from the savegame or when it got imported.
            When this method return false, you should discard the itemstack because it could not get resolved and a warning will be logged.
            </summary>
            <param name="oldBlockMapping"></param>
            <param name="oldItemMapping"></param>
            <param name="worldForNewMapping"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockEntityContainer.Inventory">
            <summary>
            The inventory attached to this block entity container
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockEntityContainer.InventoryClassName">
            <summary>
            The class name for the inventory.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumHandling">
            <summary>
            Tells the engine how to handle default or subsequent similar behaviors
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandling.PassThrough">
            <summary>
            Do run default and subsequent behaviors/event listeneres
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandling.PreventDefault">
            <summary>
            Do not execute the default behavior, but let subsequent behaviors/event listeneres still execute
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumHandling.PreventSubsequent">
            <summary>
            Do not execute default behavior and do not let subsequent behaviors/event listeneres execute
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumItemStorageFlags">
            <summary>
            Determines the kinds of storage types the item can be put into
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.General">
            <summary>
            Of no particular type
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Backpack">
            <summary>
            The item can be placed into a backpack slot
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Metallurgy">
            <summary>
            The item can be placed in a slot related to mining or smithing
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Jewellery">
            <summary>
            The item can be placed in a slot related to jewelcrafting
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Alchemy">
            <summary>
            The item can be placed in a slot related to alchemy
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Agriculture">
            <summary>
            The item can be placed in a slot related to farming
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Currency">
            <summary>
            Moneys
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Outfit">
            <summary>
            Clothes, Armor and Accessories
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Offhand">
            <summary>
            Off hand slot
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Arrow">
            <summary>
            Arrows
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Reserved2">
            <summary>
            Reserved for vanilla
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom1">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom2">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom3">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom4">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom5">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom6">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom7">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom8">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom9">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemStorageFlags.Custom10">
            <summary>
            Custom storage flag for mods
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IAssetManager">
            <summary>
            Takes care loading, reloading and managing all files inside the assets folder. All asset names and paths are always converted to lower case.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAssetManager.AllAssets">
            <summary>
            All assets found in the assets folder
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Exists(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Returns true if given asset exists in the list of loaded assets
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Get(System.String)">
            <summary>
            Retrieves an asset from given path within the assets folder. Throws an exception when the asset does not exist. Remember to use lower case paths.
            </summary>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Get(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieves an asset from given path within the assets folder. Throws an exception when the asset does not exist. Remember to use lower case paths.
            </summary>
            <param name="Location"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.TryGet(System.String,System.Boolean)">
            <summary>
            Retrieves an asset from given path within the assets folder. Returns null when the asset does not exist. Remember to use lower case paths.
            </summary>
            <param name="Category"></param>
            <param name="Path"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.TryGet(Vintagestory.API.Common.AssetLocation,System.Boolean)">
            <summary>
            Retrieves an asset from given path within the assets folder. Returns null when the asset does not exist. Remember to use lower case paths.
            </summary>
            <param name="Location"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.GetMany(System.String,System.String,System.Boolean)">
            <summary>
            Returns all assets inside given category with the given path. If no domain is specified, all domains will be searched. The returned list is considered unsorted.
            </summary>
            <param name="pathBegins"></param>
            <param name="domain"></param>
            <param name="loadAsset">Whether it should load the contents of this asset</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.GetMany``1(Vintagestory.API.Common.ILogger,System.String,System.String)">
            <summary>
            Searches for all assets in given basepath and uses JSON.NET to automatically turn them into objects. Will log an error to given ILogger if it can't parse the json file and continue with the next asset. Remember to use lower case paths. If no domain is specified, all domains will be searched.
            The returned list is considered unsorted.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="logger"></param>
            <param name="pathBegins"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.GetLocations(System.String,System.String)">
            <summary>
            Returns all asset locations that begins with given path and domain. If no domain is specified, all domains will be searched. The returned list is considered unsorted.
            </summary>
            <param name="pathBegins"></param>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Get``1(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieves an asset from given path within the assets folder and uses JSON.NET to automatically turn them into objects. Throws an exception when the asset does not exist or the conversion failed. Remember to use lower case paths.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Reload(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Reloads all assets in given base location path. It returns the amount of the found locations.
            </summary>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAssetManager.Reload(Vintagestory.API.Common.AssetCategory)">
            <summary>
            Reloads all assets in given base location path. It returns the amount of the found locations.
            </summary>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IAssetManager.Origins">
            <summary>
            Returns all origins in the priority order. Highest (First) to Lowest (Last)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IBlockShapeSupplier">
            <summary>
            Adds a tesselator to your block
            WARNING: please make sure whatever functions and fields you use with the OnTesselation event are THREAD SAFE!
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IClientGameCalendar.SunPositionNormalized">
            <summary>
            Returns a normalized vector of the sun position at the players current location
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IClientGameCalendar.SunPosition">
            <summary>
            Returns a vector of the sun position at the players current location
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IClientGameCalendar.MoonPosition">
            <summary>
            Returns a vector of the moon position at the players current location
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IClientGameCalendar.SunColor">
            <summary>
            Returns a normalized color of the sun at the players current location
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IClientGameCalendar.SunsetMod">
            <summary>
            A horizontal offset that is applied when reading the sky glow color at the players current location. Creates a greater variety of sunsets. Changes to a different value once per day (during midnight)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IClientGameCalendar.DayLightStrength">
            <summary>
            Returns a value between 0 (no sunlight) and 1 (full sunlight) at the players current location
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IClientGameCalendar.MoonLightStrength">
            <summary>
            Returns a value between 0 (no sunlight) and 1 (full sunlight) at the players current location
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IClientGameCalendar.Dusk">
            <summary>
            If true, its currently dusk at the players current location
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.SolarAltitudeDelegate">
            <summary>
            Should return the suns vertical position in the sky from 0..1
            </summary>
            <param name="posX">World x coordinate</param>
            <param name="posZ">World z coordinate</param>
            <param name="yearRel">Current year progress, from 0..1</param>
            <param name="dayRel">Current day progress, from 0..1</param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IGameCalendar">
            <summary>
            Main API for retrieving anything calender or astronomy related
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.OnGetHemisphere">
            <summary>
            Assigned by the survival mod. Must return the hemisphere at give location
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.OnGetSolarAltitude">
            <summary>
            Assigned by the survival mod. The calendar uses this method to determine the solar altitude at given location and time. If set to null, the calendar uses a default value of about 0.9
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.GetDayLightStrength(System.Double,System.Double)">
            <summary>
            Retrieve the current daylight strength at given coordinates
            </summary>
            <param name="x"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.GetDayLightStrength(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Retrieve the current daylight strength at given coordinates. The Y-Component is ignored
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.PrettyDate">
            <summary>
            The worlds current date, nicely formatted
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.SpeedOfTime">
            <summary>
            This acts as a multiplier on how much faster an ingame second passes by compared to a real life second. Affects physics, like the motion speed of waving grass. The default is 60, hence per default a day lasts 24 minutes, but it's also multiplied by CalendarSpeedMul which is 0.5 by default so the end result is 48 minutes per day
            This is the sum of all modifiers
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.SetTimeSpeedModifier(System.String,System.Single)">
            <summary>
            If you want to modify the time speed, set a value here
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.RemoveTimeSpeedModifier(System.String)">
            <summary>
            To remove a previously added time speed modifier
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.CalendarSpeedMul">
            <summary>
            A multiplier thats applied to the progression of the calendar. Set this to 0.1 and a day will last 10 times longer, does not affect physics.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.HoursPerDay">
            <summary>
            Amount of hours per day
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.DaysPerYear">
            <summary>
            Amount of days per year
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.DaysPerMonth">
            <summary>
            Amount of days per month
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.FullHourOfDay">
            <summary>
            The current hour of the day as integer
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.HourOfDay">
            <summary>
            The current hour of the day as decimal 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.TotalHours">
            <summary>
            Total passed hours since the game has started
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.TotalDays">
            <summary>
            Total passed days since the game has started
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.DayOfYear">
            <summary>
            The current day of the year (goes from 0 to DaysPerYear)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.Year">
            <summary>
            Returns the year. Every game begins with 1386
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.GetSeason(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the season at given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.GetSeasonRel(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the season at given position between 0..1
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.GetHemisphere(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the hemisphere at given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.YearRel">
            <summary>
            Returns the current season in a value of 0 to 1
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.Add(System.Single)">
            <summary>
            Adds given time to the calendar
            </summary>
            <param name="hours"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.MoonPhase">
            <summary>
            The current moonphase
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.MoonPhaseExact">
            <summary>
            The current moonphase represented by number from 0..8
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.MoonPhaseBrightness">
            <summary>
            The moons current brightness (higher during full moon)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IGameCalendar.MoonSize">
            <summary>
            The moons current size (larger during full moon)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IGameCalendar.SetSeasonOverride(System.Nullable{System.Single})">
            <summary>
            If non-null, will override the value retrieved by GetSeason(). Set to null to have seasons progress normally again.
            </summary>
            <param name="seasonRel"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IModLoader.Mods">
            <summary>
            Gets a collection of all enabled mods.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IModLoader.Systems">
            <summary>
            Gets a collection of all loaded and enabled mod systems.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.GetMod(System.String)">
            <summary>
            Gets the enabled mod with the specified mod ID (domain).
            Returns null if no mod with that mod ID was found.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.IsModEnabled(System.String)">
            <summary>
            Returns if the mod with the specified mod ID (domain) is enabled.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.GetModSystem(System.String)">
            <summary>
            Gets a loaded mod system with the specified full name, that is the namespace and
            class name, for example "Vintagestory.ServerMods.Core" for the survival mod.
            Returns null if no mod with that name was found.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.GetModSystem``1">
            <summary>
            Gets a loaded mod system with the specified type.
            Returns null if no mod of that type was found.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IModLoader.IsModSystemEnabled(System.String)">
            <summary>
            Returns if the mod system with the specified full name is loaded and enabled.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IPlayer">
            <summary>
            Represents a player
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayer.GetGroups">
            <summary>
            Load the players group that he is a member of
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayer.GetGroup(System.Int32)">
            <summary>
            Returns the membership data if player is part of this group, otherwise null
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.Entitlements">
            <summary>
            List of the users entitlements, vanilla servers will list VIV and/or VS Team member entitlements
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.CurrentBlockSelection">
            <summary>
            The block the player is currently aiming at
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.CurrentEntitySelection">
            <summary>
            The entity the player is currently aiming at
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.PlayerName">
            <summary>
            Get the players character name. The character name can be changed every 60 days in the account manager, so don't consider the players name as a unique identifier for a player. Use PlayerUID instead
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.PlayerUID">
            <summary>
            Returns the players identifier that is unique across all registered players and will never change. Use this to uniquely identify a player for all eternity. Shorthand for WorldData.PlayerUID
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.ClientId">
            <summary>
            The players current client id, 0 if not connected. This is the number thats assigned by the server for any connecting player. You probably don't need this number.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.Entity">
            <summary>
            The entity the player currently controls
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.WorldData">
            <summary>
            Some world-specific information about the player. This object is stored with the save game.
            If you modify it server side, be sure to call player.BroadcastPlayerData() to send it to affected clients.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.InventoryManager">
            <summary>
            Returns the given players inventory manager that let's you do various interesting things with the players inventory.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayer.Privileges">
            <summary>
            The list of privileges the player currently has access to (by role or direct assignment)
            This list is available for the playing player on the client, but not for other players.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayer.HasPrivilege(System.String)">
            <summary>
            Check if a player has the given privilege
            </summary>
            <param name = "privilegeCode">The privilege to check</param>
            <returns>true if the player has the given privilege, false otherwise</returns>
        </member>
        <member name="T:Vintagestory.API.Common.CollectibleObject">
            <summary>
            Contains all properties shared by Blocks and Items
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.MatterState">
            <summary>
            Liquids are handled and rendered differently than solid blocks.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.CollectibleObject.IsMissing">
            <summary>
            This value is set the the BlockId or ItemId-Remapper if it encounters a block/item in the savegame, 
            but no longer exists as a loaded block/item
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.CollectibleObject.Id">
            <summary>
            The block or item id
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.CollectibleObject.ItemClass">
            <summary>
            Block or Item?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.MaxStackSize">
            <summary>
            Max amount of collectible that one default inventory slot can hold
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.Durability">
            <summary>
            How many uses does this collectible has when being used. Item disappears at durability 0
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.LiquidSelectable">
            <summary>
            When true, liquids become selectable to the player when being held in hands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.AttackPower">
            <summary>
            How much damage this collectible deals when used as a weapon
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.AttackRange">
            <summary>
            Until how for away can you attack entities using this collectibe
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.DamagedBy">
            <summary>
            From which damage sources does the item takes durability damage
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.MiningSpeed">
            <summary>
            Modifies how fast the player can break a block when holding this item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.ToolTier">
            <summary>
            What tier this block can mine when held in hands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.CreativeInventoryTabs">
            <summary>
            List of creative tabs in which this collectible should appear in
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.CreativeInventoryStacks">
            <summary>
            If you want to add itemstacks with custom attributes to the creative inventory, add them to this list
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.RenderAlphaTest">
            <summary>
            Alpha test value for rendering in gui, fp hand, tp hand or on the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.GuiTransform">
            <summary>
            Used for scaling, rotation or offseting the block when rendered in guis
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.FpHandTransform">
            <summary>
            Used for scaling, rotation or offseting the block when rendered in the first person mode hand
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.TpHandTransform">
            <summary>
            Used for scaling, rotation or offseting the block when rendered in the third person mode hand
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.GroundTransform">
            <summary>
            Used for scaling, rotation or offseting the rendered as a dropped item on the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.Attributes">
            <summary>
            Custom Attributes that's always assiociated with this item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.CombustibleProps">
            <summary>
            Information about the burnable states
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.NutritionProps">
            <summary>
            Information about the nutrition states
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.TransitionableProps">
            <summary>
            Information about the transitionable states
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.GrindingProps">
            <summary>
            If set, the collectible can be ground into something else
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.CrushingProps">
            <summary>
            If set, the collectible can be crushed into something else
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.ParticleProperties">
            <summary>
            Particles that should spawn in regular intervals from this block or item when held in hands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.TopMiddlePos">
            <summary>
            The origin point from which particles are being spawned
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.Tool">
            <summary>
            If set, this item will be classified as given tool
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.StorageFlags">
            <summary>
            Determines in which kind of bags the item can be stored in
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.MaterialDensity">
            <summary>
            Determines on whether an object floats on liquids or not. Water has a density of 1000
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.HeldTpHitAnimation">
            <summary>
            The animation to play in 3rd person mod when hitting with this collectible
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.HeldRightTpIdleAnimation">
            <summary>
            The animation to play in 3rd person mod when holding this collectible in the right hand
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.HeldLeftTpIdleAnimation">
            <summary>
            The animation to play in 3rd person mod when holding this collectible in the left hand
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.HeldTpUseAnimation">
            <summary>
            The animation to play in 3rd person mod when using this collectible
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CollectibleObject.api">
            <summary>
            The api object, assigned during OnLoaded
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Server Side: Called one the collectible has been registered
            Client Side: Called once the collectible has been loaded from server packet
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnUnloaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called when the client/server is shutting down
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetNutritionProperties(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Should return the nutrition properties of the item/block
            </summary>
            <param name="world"></param>
            <param name="itemstack"></param>
            <param name="forEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetTransitionableProperties(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Should return the transition properties of the item/block when in itemstack form
            </summary>
            <param name="world"></param>
            <param name="itemstack"></param>
            <param name="forEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetStorageFlags(Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return in which storage containers this item can be placed in
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetItemDamageColor(Vintagestory.API.Common.ItemStack)">
            <summary>
            Returns a hardcoded rgb color (green->yellow->red) that is representative for its remaining durability vs total durability
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.ShouldDisplayItemDamage(Vintagestory.API.Common.IItemStack)">
            <summary>
            Return true if remaining durability != total durability
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnBeforeRender(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.ItemStack,Vintagestory.API.Client.EnumItemRenderTarget,Vintagestory.API.Client.ItemRenderInfo@)">
            <summary>
            This method is called before rendering the item stack into GUI, first person hand, third person hand and/or on the ground
            The renderinfo object is pre-filled with default values. 
            </summary>
            <param name="capi"></param>
            <param name="itemstack"></param>
            <param name="target"></param>
            <param name="renderinfo"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetDurability(Vintagestory.API.Common.IItemStack)">
            <summary>
            Returns the items total durability
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetAttackPower(Vintagestory.API.Common.IItemStack)">
            <summary>
            The amount of damage dealt when used as a weapon
            </summary>
            <param name="withItemStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetAttackRange(Vintagestory.API.Common.IItemStack)">
            <summary>
            The the attack range when used as a weapon
            </summary>
            <param name="withItemStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnBlockBreaking(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.ItemSlot,System.Single,System.Single,System.Int32)">
            <summary>
            Player is holding this collectible and breaks the targeted block
            </summary>
            <param name="player"></param>
            <param name="blockSel"></param>
            <param name="itemslot"></param>
            <param name="remainingResistance"></param>
            <param name="dt"></param>
            <param name="counter"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnModifiedInInventorySlot(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStack)">
            <summary>
            Whenever the collectible was modified while inside a slot, usually when it was moved, split or merged.  
            </summary>
            <param name="world"></param>
            <param name="slot">The slot the item is or was in</param>
            <param name="extractedStack">Non null if the itemstack was removed from this slot</param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnBlockBrokenWith(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.BlockSelection,System.Single)">
            <summary>
            Player has broken a block while holding this collectible. Return false if you want to cancel the block break event.
            </summary>
            <param name="world"></param>
            <param name="byEntity"></param>
            <param name="itemslot"></param>
            <param name="blockSel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetMiningSpeed(Vintagestory.API.Common.IItemStack,Vintagestory.API.Common.Block,Vintagestory.API.Common.IPlayer)">
            <summary>
            Called every game tick when the player breaks a block with this item in his hands. Returns the mining speed for given block.
            </summary>
            <param name="itemstack"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GeldHeldFpHitAnimation(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Not implemented yet
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHeldTpHitAnimation(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Called when an entity uses this item to hit something in 3rd person mode
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHeldTpIdleAnimation(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.EnumHand)">
            <summary>
            Called when an entity holds this item in hands in 3rd person mode
            </summary>
            <param name="activeHotbarSlot"></param>
            <param name="forEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHeldTpUseAnimation(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Called when an entity holds this item in hands in 3rd person mode
            </summary>
            <param name="activeHotbarSlot"></param>
            <param name="forEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnAttackingWith(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.ItemSlot)">
            <summary>
            An entity used this collectibe to attack something
            </summary>
            <param name="world"></param>
            <param name="attackedEntity"></param>
            <param name="itemslot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.MatchesForCrafting(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.GridRecipe,Vintagestory.API.Common.CraftingRecipeIngredient)">
            <summary>
            Called when this collectible is attempted to being used as part of a crafting recipe and should get consumed now. Return false if it doesn't match the ingredient
            </summary>
            <param name="inputStack"></param>
            <param name="gridRecipe"></param>
            <param name="ingredient"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnConsumedByCrafting(Vintagestory.API.Common.ItemSlot[],Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.GridRecipe,Vintagestory.API.Common.CraftingRecipeIngredient,Vintagestory.API.Common.IPlayer,System.Int32)">
            <summary>
            Called when this collectible is being used as part of a crafting recipe and should get consumed now
            </summary>
            <param name="allInputSlots"></param>
            <param name="stackInSlot"></param>
            <param name="gridRecipe"></param>
            <param name="fromIngredient"></param>
            <param name="byPlayer"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnCreatedByCrafting(Vintagestory.API.Common.ItemSlot[],Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.GridRecipe)">
            <summary>
            Called when a matching grid recipe has been found and an item is placed into the crafting output slot (which is still before the player clicks on the output slot to actually craft the item and consume the ingredients)
            </summary>
            <param name="allInputslots"></param>
            <param name="outputSlot"></param>
            <param name="byRecipe"></param>
            <param name="byPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.DamageItem(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.ItemSlot,System.Int32)">
            <summary>
            Causes the item to be damaged. Will play a breaking sound and removes the itemstack if no more durability is left
            </summary>
            <param name="world"></param>
            <param name="byEntity"></param>
            <param name="itemslot"></param>
            <param name="amount">Amount of damage</param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetToolMode(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection)">
            <summary>
            Should return the current items tool mode.
            </summary>
            <param name="slot"></param>
            <param name="byPlayer"></param>
            <param name="blockSelection"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.SetToolMode(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,System.Int32)">
            <summary>
            Should set given toolmode
            </summary>
            <param name="slot"></param>
            <param name="byPlayer"></param>
            <param name="blockSelection"></param>
            <param name="toolMode"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldRenderOpaque(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Client.IClientPlayer)">
            <summary>
            This method is called during the opaque render pass when this item or block is being held in hands
            </summary>
            <param name="inSlot"></param>
            <param name="byPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldRenderOit(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Client.IClientPlayer)">
            <summary>
            This method is called during the order independent transparency render pass when this item or block is being held in hands
            </summary>
            <param name="inSlot"></param>
            <param name="byPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldRenderOrtho(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Client.IClientPlayer)">
            <summary>
            This method is called during the ortho (for 2D GUIs) render pass when this item or block is being held in hands
            </summary>
            <param name="inSlot"></param>
            <param name="byPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldIdle(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent)">
            <summary>
            Called every frame when the player is holding this collectible in his hands. Is not called during OnUsing() or OnAttacking()
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnGroundIdle(Vintagestory.API.Common.EntityItem)">
            <summary>
            Called every game tick when this collectible is in dropped form in the world (i.e. as EntityItem)
            </summary>
            <param name="entityItem"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.InGuiIdle(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack)">
            <summary>
            Called every frame when this item is being displayed in the gui
            </summary>
            <param name="world"></param>
            <param name="stack"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldUseStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandInteract,System.Boolean,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            General begin use access. Override OnHeldAttackStart or OnHeldInteractStart to alter the behavior.
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="useType"></param>
            <param name="handling">Whether or not to do any subsequent actions. If not set or set to NotHandled, the action will not called on the server.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldUseCancel(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            General cancel use access. Override OnHeldAttackCancel or OnHeldInteractCancel to alter the behavior.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="cancelReason"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldUseStep(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            General using access. Override OnHeldAttackStep or OnHeldInteractStep to alter the behavior.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldUseStop(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandInteract)">
            <summary>
            General use over access. Override OnHeldAttackStop or OnHeldInteractStop to alter the behavior.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="useType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldAttackStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            When the player has begun using this item for attacking (left mouse click). Return true to play a custom action.
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handling">Whether or not to do any subsequent actions. If not set or set to NotHandled, the action will not called on the server.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldAttackCancel(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            When the player has canceled a custom attack action. Return false to deny action cancellation.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSelection"></param>
            <param name="entitySel"></param>
            <param name="cancelReason"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldAttackStep(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called continously when a custom attack action is playing. Return false to stop the action.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSelection"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldAttackStop(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called when a custom attack action is finished
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSelection"></param>
            <param name="entitySel"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldInteractStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,System.Boolean,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            Called when the player right clicks while holding this block/item in his hands
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="firstEvent">True when the player pressed the right mouse button on this block. Every subsequent call, while the player holds right mouse down will be false, it gets called every second while right mouse is down</param>
            <param name="handling">Whether or not to do any subsequent actions. If not set or set to NotHandled, the action will not called on the server.</param>
            <returns>True if an interaction should happen (makes it sync to the server), false if no sync to server is required</returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldInteractStep(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called every frame while the player is using this collectible. Return false to stop the interaction.
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns>False if the interaction should be stopped. True if the interaction should continue</returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldInteractStop(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Called when the player successfully completed the using action, always called once an interaction is over
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldInteractCancel(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            When the player released the right mouse button. Return false to deny the cancellation (= will keep using the item until OnHeldInteractStep returns false).
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="cancelReason"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnHeldDropped(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemSlot,System.Int32,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Callback when the player dropped this item from his inventory. You can set handling to PreventDefault to prevent dropping this item.
            You can also check if the entityplayer of this player is dead to check if dropping of this item was due the players death
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="slot"></param>
            <param name="quantity">Amount of items the player wants to drop</param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHeldItemName(Vintagestory.API.Common.ItemStack)">
            <summary>
            Called by the inventory system when you hover over an item stack. This is the item stack name that is getting displayed.
            </summary>
            <param name="itemStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHeldItemInfo(Vintagestory.API.Common.ItemSlot,System.Text.StringBuilder,Vintagestory.API.Common.IWorldAccessor,System.Boolean)">
            <summary>
            Called by the inventory system when you hover over an item stack. This is the text that is getting displayed.
            </summary>
            <param name="inSlot"></param>
            <param name="dsc"></param>
            <param name="world"></param>
            <param name="withDebugInfo"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetHandbookInfo(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.ItemStack[],Vintagestory.API.Common.ActionConsumable{System.String})">
            <summary>
            Detailed information on this block/item to be displayed in the handbook
            </summary>
            <param name="inSlot"></param>
            <param name="capi"></param>
            <param name="allStacks">An itemstack for every block and item that should be considered during information display</param>
            <param name="openDetailPageFor">Callback when someone clicks a displayed itemstack</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CanBePlacedInto(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Should return true if the stack can be placed into given slot
            </summary>
            <param name="stack"></param>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetMergableQuantity(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.EnumMergePriority)">
            <summary>
            Should return the max. number of items that can be placed from sourceStack into the sinkStack
            </summary>
            <param name="sinkStack"></param>
            <param name="sourceStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.TryMergeStacks(Vintagestory.API.Common.ItemStackMergeOperation)">
            <summary>
            Is always called on the sink slots item
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetMeltingDuration(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ISlotProvider,Vintagestory.API.Common.ItemSlot)">
            <summary>
            If the item is smeltable, this is the time it takes to smelt at smelting point
            </summary>
            <param name="world"></param>
            <param name="cookingSlotsProvider"></param>
            <param name="inputSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetMeltingPoint(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ISlotProvider,Vintagestory.API.Common.ItemSlot)">
            <summary>
            If the item is smeltable, this is its melting point
            </summary>
            <param name="world"></param>
            <param name="cookingSlotsProvider"></param>
            <param name="inputSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CanSmelt(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ISlotProvider,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return true if this collectible is smeltable
            </summary>
            <param name="world"></param>
            <param name="cookingSlotsProvider"></param>
            <param name="inputStack"></param>
            <param name="outputStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.DoSmelt(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ISlotProvider,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Transform the item to it's smelted variant
            </summary>
            <param name="world"></param>
            <param name="cookingSlotsProvider"></param>
            <param name="inputSlot"></param>
            <param name="outputSlot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.CanSpoil(Vintagestory.API.Common.ItemStack)">
            <summary>
            Returns true if the stack can spoil
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.UpdateAndGetTransitionState(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EnumTransitionType)">
            <summary>
            Returns the transition state of given transition type
            </summary>
            <param name="world"></param>
            <param name="inslot"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.UpdateAndGetTransitionStates(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Returns a list of the current transition states of this item
            </summary>
            <param name="world"></param>
            <param name="inslot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnTransitionNow(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.TransitionableProperties)">
            <summary>
            Called when any of its TransitionableProperties causes the stack to transition to another stack. Default behavior is to return props.TransitionedStack.ResolvedItemstack and set the stack size according to the transition rtio
            </summary>
            <param name="slot"></param>
            <param name="props"></param>
            <returns>The stack it should transition into</returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.IsReasonablyFresh(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack)">
            <summary>
            Test is failed for Perish-able items which have less than 50% of their fresh state remaining (or are already starting to spoil)
            </summary>
            <param name="world"></param>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.HasTemperature(Vintagestory.API.Common.IItemStack)">
            <summary>
            Returns true if the stack has a temperature attribute
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetTemperature(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack)">
            <summary>
            Returns the stacks item temperature in degree celsius
            </summary>
            <param name="world"></param>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.SetTemperature(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack,System.Single,System.Boolean)">
            <summary>
            Sets the stacks item temperature in degree celsius
            </summary>
            <param name="world"></param>
            <param name="itemstack"></param>
            <param name="temperature"></param>
            <param name="delayCooldown"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.IsEmptyBackPack(Vintagestory.API.Common.IItemStack)">
            <summary>
            Returns true if this stack is an empty backpack
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.IsBackPack(Vintagestory.API.Common.IItemStack)">
            <summary>
            Returns true if this stack is a backpack that can hold other items/blocks
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.QuantityBackPackSlots(Vintagestory.API.Common.IItemStack)">
            <summary>
            If the stack is a backpack, this returns the amount of slots it has
            </summary>
            <param name="itemstack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.Equals(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.ItemStack,System.String[])">
            <summary>
            Should return true if given stacks are equal, ignoring their stack size.
            </summary>
            <param name="thisStack"></param>
            <param name="otherStack"></param>
            <param name="ignoreAttributeSubTrees"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.Satisfies(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return true if thisStack is a satisfactory replacement of otherStack. It's bascially an Equals() test, but it ignores any additional attributes that exist in otherStack
            </summary>
            <param name="thisStack"></param>
            <param name="otherStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnStoreCollectibleMappings(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemSlot,System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation})">
            <summary>
            This method is for example called by chests when they are being exported as part of a block schematic. Has to store all the currents block/item id mappings so it can be correctly imported again. By default it puts itself into the mapping and searches the itemstack attributes for attributes of type ItemStackAttribute and adds those to the mapping as well.
            </summary>
            <param name="world"></param>
            <param name="inSlot"></param>
            <param name="blockIdMapping"></param>
            <param name="itemIdMapping"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.OnLoadCollectibleMappings(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemSlot,System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation})">
            <summary>
            This method is called after a block/item like this has been imported as part of a block schematic. Has to restore fix the block/item id mappings as they are probably different compared to the world from where they were exported. By default iterates over all the itemstacks attributes and searches for attribute sof type ItenStackAttribute and calls .FixMapping() on them.
            </summary>
            <param name="worldForResolve"></param>
            <param name="inSlot"></param>
            <param name="oldBlockIdMapping"></param>
            <param name="oldItemIdMapping"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.HasBehavior(System.Type,System.Boolean)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <param name="type"></param>
            <param name="withInheritance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.HasBehavior(System.Type)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.HasBehavior(System.String,Vintagestory.API.Common.IClassRegistryAPI)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <param name="type"></param>
            <param name="classRegistry"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.GetRandomColor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return a random pixel within the items/blocks texture
            </summary>
            <param name="capi"></param>
            <param name="stack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CollectibleObject.IsLiquid">
            <summary>
            Returns true if this blocks matterstate is liquid.
            NOTE: Liquid blocks should also implement IBlockFlowing
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.AnimatorBase">
            <summary>
            Syncs every frame with entity.ActiveAnimationsByAnimCode, starts, progresses and stops animations when necessary 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimatorBase.TransformationMatricesDefaultPose">
            <summary>
            The entities default pose. Meaning for most elements this is the identity matrix, with exception of individually controlled elements such as the head.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AirBubbleParticles.BasePos">
            <summary>
            The base position of the bubble particle.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AirBubbleParticles.AddVelocity">
            <summary>
            The velocity to add to the bubble particle.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AirBubbleParticles.Init(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Initializes the bubble particle.
            </summary>
            <param name="api">The core API.</param>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.SecondaryParticles">
            <summary>
            Gets the secondary particles
            </summary>
            <returns>null, the bubble particles don't have secondary particles.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.DeathParticles">
            <summary>
            Gets the death particles.
            </summary>
            <returns>There are no death particles for bubbles.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.DieInAir">
            <summary>
            Whether or not the bubbles die in air.
            </summary>
            <returns>Yes they die in air.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.DieInLiquid">
            <summary>
            Whether or not the bubbles die in liquid.
            </summary>
            <returns>They don't.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.SwimOnLiquid">
            <summary>
            Whether or not the bubbles die in liquid.
            </summary>
            <returns>They don't.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.VertexFlags">
            <summary>
            Gets the glow level of the bubbles.
            </summary>
            <returns>No glow.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.GravityEffect">
            <summary>
            Gets the gravity applied to the particle.
            </summary>
            <returns>None.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.TerrainCollision">
            <summary>
            Whether or not the bubble collides with the terrain.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.LifeLength">
            <summary>
            Gets the length of life for the particle.
            </summary>
            <returns>0.25f</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.ParticleModel">
            <summary>
            The base model of the particle.
            </summary>
            <returns>It's a cube.</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AirBubbleParticles.SelfPropelled">
            <summary>
            This particle is not self propelled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.AirBubbleParticles.ToBytes(System.IO.BinaryWriter)">
            <summary>
            This particle does not save to file.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AirBubbleParticles.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            This particle does not load from file.
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="T:Vintagestory.API.Common.SimpleParticleProperties">
            <summary>
            A configurable implementation of IParticlePropertiesProvider
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.SimpleParticleProperties.ClimateColorMap">
            <summary>
            The color map for climate color mapping. Leave null for no coloring by climate
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.SimpleParticleProperties.SeasonColorMap">
            <summary>
            The color map for season color mapping. Leave null for no coloring by season
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.Animation">
            <summary>
            Represents a shape animation and can calculate the transformation matrices for each frame to be sent to the shader
            Process
            1. For each frame, for each root element, calculate the transformation matrix. Curent model matrix is identy mat.
            1.1. Get previous and next key frame. Apply translation, rotation and scale to model matrix.
            1.2. Store this matrix as animationmatrix in list
            1.3. For each child element
            1.3.1. Multiply local transformation matrix with the animation matrix. This matrix is now the curent model matrix. Go to 1 with child elements as root elems
            
            2. For each frame, for each joint
            2.1. Calculate the inverse model matrix 
            2.2. Multiply stored animationmatrix with the inverse model matrix
            
            3. done
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Animation.GenerateAllFrames(Vintagestory.API.Common.ShapeElement[],System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AnimationJoint},System.Boolean)">
            <summary>
            Compiles the animation into a bunch of matrices, 31 matrices per frame.
            </summary>
            <param name="rootElements"></param>
            <param name="jointsById"></param>
            <param name="recursive">When false, will only do root elements</param>
        </member>
        <member name="F:Vintagestory.API.Common.BlockBehavior.block">
            <summary>
            The block for this behavior instance.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockBehavior.propertiesAtString">
            <summary>
            The properties of this block behavior.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.BlockBehavior.ClientSideOptional">
            <summary>
            If true, this behavior is not required on the client. This is here because copygirl doesn't stop asking for it. Probably breaks things. If it breaks things, complain to copygirl please :p
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.Initialize(Vintagestory.API.JsonObject)">
            <summary>
            Called right after the block behavior was created, must call base method
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldAttackStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandHandling@,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            When the player has begun using this item for attacking (left mouse click). Return true to play a custom action.
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handHandling"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldAttackCancel(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumItemUseCancelReason,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            When the player has canceled a custom attack action. Return false to deny action cancellation.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSelection"></param>
            <param name="entitySel"></param>
            <param name="cancelReason"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldAttackStep(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            Called continously when a custom attack action is playing. Return false to stop the action.
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSelection"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldAttackStop(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            Called when a custom attack action is finished
            </summary>
            <param name="secondsPassed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSelection"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldInteractStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,System.Boolean,Vintagestory.API.Common.EnumHandHandling@,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when the player right clicks while holding this block/item in his hands
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handHandling"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldInteractStep(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called every frame while the player is using this collectible
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnHeldInteractStop(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when the player successfully completed the using action, not called when successfully cancelled
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot"></param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnBlockBroken(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when a survival player has broken the block. The default behavior removes the block and spawns the block drops.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnPickBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            When the player has presed the middle mouse click on the block. The default behavior returns an itemstack with the block itself
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.GetDrops(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,System.Single@,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Is called before a block is broken, should return what items this block should drop. Return null or empty array for no drops. The default behavior drops whatever block.Drops is set to.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <param name="dropChanceMultiplier"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnNeighbourBlockChange(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called when any of it's 6 neighbour blocks has been changed
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="neibpos"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.CanAttachBlockAt(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.Block,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,Vintagestory.API.Common.EnumHandling@,Vintagestory.API.MathTools.Cuboidi)">
            <summary>
            Used by torches and other blocks to check if it can attach itself to that block. The default behavior tests for SideSolid[blockFace.Index]
            </summary>
            <param name="world"></param>
            <param name="block"></param>
            <param name="pos"></param>
            <param name="blockFace"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.CanCreatureSpawnOn(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Entities.EntityProperties,Vintagestory.API.Common.Entities.BaseSpawnConditions,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Should return if supplied entitytype is allowed to spawn on this block
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos"></param>
            <param name="type"></param>
            <param name="sc"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.GetRotatedBlockCode(System.Int32,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            For any block that can be rotated, this method should be implemented to return the correct rotated block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="angle"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.GetVerticallyFlippedBlockCode(Vintagestory.API.Common.EnumHandling@)">
            <summary>
            For any block that can be flipped upside down, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.GetHorizontallyFlippedBlockCode(Vintagestory.API.MathTools.EnumAxis,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            For any block that can be flipped vertically, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="axis"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.IsReplacableBy(Vintagestory.API.Common.Block,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Used to determine if a block should be treated like air when placing blocks. (e.g. used for tallgrass)
            </summary>
            <param name="block"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.ShouldReceiveClientGameTicks(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Everytime the player moves by 8 blocks (or rather leaves the current 8-grid), a scan of all blocks 32x32x32 blocks around the player is initiated
            and this method is called. If the method returns true, the block is registered to a client side game ticking for spawning particles and such.
            This method will be called everytime the player left his current 8-grid area. 
            
            The default behavior is to return true if block.ParticleProperties are set
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="pos"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnBlockRemoved(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Always called when a block has been removed through whatever method, except during worldgen or via ExchangeBlock()
            For Worldgen you might be able to use TryPlaceBlockForWorldGen() to attach custom behaviors during placement/removal
            
            The default behavior is to delete the block entity, if this block has any
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnBlockInteractStart(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            When a player does a right click while targeting this placed block. Should return true if the event is handled, so that other events can occur, e.g. eating a held item if the block is not interactable with.
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.GetPlacedBlockInfo(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer)">
            <summary>
            Called by the block info HUD for displaying additional information
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="forPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Server Side: Called once the collectible has been registered
            Client Side: Called once the collectible has been loaded from server packet
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.TryPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EnumHandling@,System.String@)">
            <summary>
            Step 1: Called when the player attempts to place this block. The default behavior calls Block.DoPlaceBlock().
            If returned true and default behavior has not been prevented, the game will next call CanPlaceBlock(). If that method also returns true and default behavior has not been overriden, DoPlaceBlock() will get called.
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="itemstack"></param>
            <param name="blockSel"></param>
            <param name="handling"></param>
            <param name="failureCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.CanPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EnumHandling@,System.String@)">
            <summary>
            Step 2: Test if the block can be placed
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <param name="handling"></param>
            <param name="failureCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.DoPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Step 3: Place the block. Return false if it cannot be placed (but you should rather return false in CanPlaceBlock).
            </summary>
            <param name="world"></param>
            <param name="blockSel"></param>
            <param name="byItemStack"></param>
            <param name="handling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockBehavior.OnBlockPlaced(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Step 4: Block was placed. Always called when a block has been placed through whatever method, except during worldgen or via ExchangeBlock()
            Be aware that the vanilla OnBlockPlaced block behavior is to spawn the block entity if any is associated with this block, so this code will not get executed if you set handled to PreventDefault or Last
            </summary>
            <param name="world"></param>
            <param name="blockPos"></param>
            <param name="handling"></param>
        </member>
        <member name="T:Vintagestory.API.Common.IBlockAccessorRevertable">
            <summary>
            Provides read/write access to the blocks of a world. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessorRevertable.Relight">
            <summary>
            Whether or not to do relighting on the chunk
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessorRevertable.CurrentyHistoryState">
            <summary>
            0 = working on latest version, 1 = undo used one time, 2 = undo used 2 times, etc.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessorRevertable.ChangeHistoryState(System.Int32)">
            <summary>
            1 = perform 1 undo 
            -1 = perform 1 redo
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessorRevertable.QuantityHistoryStates">
            <summary>
            Maximum Amount of undos you can perform. More states means more memory usage.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessorRevertable.AvailableHistoryStates">
            <summary>
            Amount of currently stored history states
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessorRevertable.SetHistoryStateBlock(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Manually set the history state of a block for the to-be-comitted history state
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <param name="oldBlockId"></param>
            <param name="newBlockId"></param>
        </member>
        <member name="T:Vintagestory.API.Common.EnumBlockMaterial">
            <summary>
            Material of which a block my be made of
            Currently only used for mining speed for tools
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockMaterialUtil.MaterialBlastResistance(Vintagestory.API.Common.EnumBlastType,Vintagestory.API.Common.EnumBlockMaterial)">
            <summary>
            Calculates the blast resistance of a given material.
            </summary>
            <param name="blastType">The blast type the material is being it with.</param>
            <param name="material">The material of the block.</param>
            <returns>the resulting blast resistance.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockMaterialUtil.MaterialBlastDropChances(Vintagestory.API.Common.EnumBlastType,Vintagestory.API.Common.EnumBlockMaterial)">
            <summary>
            Calculates the blast drop chance of a given material.
            </summary>
            <param name="blastType">The blast type the material is being it with.</param>
            <param name="material">The material of the block.</param>
            <returns>the resulting drop chance.</returns>
        </member>
        <member name="T:Vintagestory.API.Common.EnumChatType">
            <summary>
            A definition for the types of chat that could occur.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumChatType.CommandSuccess">
            <summary>
            A command was successful.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumChatType.CommandError">
            <summary>
            A command failed.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumChatType.OwnMessage">
            <summary>
            The message was sent to the player only.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumChatType.OthersMessage">
            <summary>
            The message was sent from another player.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumChatType.Notification">
            <summary>
            The message was a notification (The world ends in 3 days, You cannot do this, ect)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumChatType.AllGroups">
            <summary>
            The message was sent to all the groups involved.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumChatType.GroupInvite">
            <summary>
            The group has invited the player.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumChatType.JoinLeave">
            <summary>
            The player has joined or left the group.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumChatType.Macro">
            <summary>
            There was a macro involved.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDespawnReason.Death">
            <summary>
            Despawned because it died.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDespawnReason.Combusted">
            <summary>
            Completely burned up
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDespawnReason.OutOfRange">
            <summary>
            Despawned because the player (or players) moved out of ranged.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDespawnReason.PickedUp">
            <summary>
            A player picked up this item and is removed from the world. (ItemEntity -> Item)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDespawnReason.Unload">
            <summary>
            The region was unloaded.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDespawnReason.Disconnect">
            <summary>
            The last player disconnected from the game.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDespawnReason.Expire">
            <summary>
            The entity expired.  
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDespawnReason.Removed">
            <summary>
            The entity was removed.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemDamageSource.BlockBreaking">
            <summary>
            The item was breaking a block.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemDamageSource.Attacking">
            <summary>
            The item was attacking a creature.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumItemDamageSource.Fire">
            <summary>
            the item was thrown into a fire.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumPlayerGroupMemberShip.Member">
            <summary>
            Member
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumPlayerGroupMemberShip.Op">
            <summary>
            Operator of this channel
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumPlayerGroupMemberShip.Owner">
            <summary>
            Owner of this channel
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ILogger">
            <summary>
            Interface to the clients and servers event/debug/error logging utilty
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ILogger.TraceLog">
            <summary>
            If true, will also print to Diagnostics.Debug
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.ILogger.EntryAdded">
            <summary>
            Fired every time a log entry has been added
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.ClearWatchers">
            <summary>
            Removes any handler that registered to the EntryAdded event. This method is called when the client leaves a world or server shuts down.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Log(Vintagestory.API.Common.EnumLogType,System.String,System.Object[])">
            <summary>
            Add a log entry
            </summary>
            <param name="logType"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Build(System.String,System.Object[])">
            <summary>
            Adds a build log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Chat(System.String,System.Object[])">
            <summary>
            Adds a chat log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.VerboseDebug(System.String,System.Object[])">
            <summary>
            Adds a verbose debug log entry (these are only logged to file and not sent to console)
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Adds a debug log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Notification(System.String,System.Object[])">
            <summary>
            Adds a notification log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Adds a warning log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Error(System.String,System.Object[])">
            <summary>
            Adds a error log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Adds a fatal error log entry
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Event(System.String,System.Object[])">
            <summary>
            Adds an event log entry. These are showing to the player when he's starting a singpleplayer server
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.Audit(System.String,System.Object[])">
            <summary>
            Adds an audit log entry. 
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ILogger.StoryEvent(System.String,System.Object[])">
            <summary>
            Adds an story event log entry. These are showing to the player when he's starting a singpleplayer server
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="T:Vintagestory.API.Common.IParticlePropertiesProvider">
            <summary>
            Represents a provider of particle properties to be used when generating a particle
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.Init(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called before the particle provider is used for particle creation
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.BeginParticle">
            <summary>
            Called just before a new particle is being created. You can use this to produce e.g. alternating kinds of particles
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.DieInLiquid">
            <summary>
            Whether the particle should despawn when in contact with liquids
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.DieInAir">
            <summary>
            Whether the particle should despawn when in contact with air (e.g. for water bubbles)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.DieOnRainHeightmap">
            <summary>
            If true, particle dies if it falls below the rain height at its given location
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.Quantity">
            <summary>
            How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.Pos">
            <summary>
            Position in the world where the particle should spawn
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetVelocity(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            In what direction should the particle fly/fall
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.GetRgbaColor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            The particles Rgba Color
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.OpacityEvolve">
            <summary>
            Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.RedEvolve">
            <summary>
            Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.GreenEvolve">
            <summary>
            Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.BlueEvolve">
            <summary>
            Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.ParticleModel">
            <summary>
            Cube or Quad?
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.Size">
            <summary>
            Size of the particle
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.SizeEvolve">
            <summary>
            Size change over time
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.VelocityEvolve">
            <summary>
            Velocity change over time (acts as a multiplier to the velocity)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.GravityEffect">
            <summary>
            How strongly the particle is affected by gravity (0 = no gravity applied)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.LifeLength">
            <summary>
            How long the particle should live (default = 1)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.VertexFlags">
            <summary>
            Value between 0 and 255 to determine glowiness of the particle
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.SelfPropelled">
            <summary>
            If true, a particle will restore it's initial velocity once it's obstruction has been cleared
            e.g. Smokes will start flying upwards again if is currently stuck under a block and the block is removed
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.TerrainCollision">
            <summary>
            If true, the particle will collide with the terrain
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.ToBytes(System.IO.BinaryWriter)">
            <summary>
            For sending over the network
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            For reading from the network
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.SecondarySpawnInterval">
            <summary>
            Determines the interval of time that must elapse during it's parent particle's lifetime before this one will spawn.
            This is only honored if this particle is defined as a secondary particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.SecondaryParticles">
            <summary>
            The secondary particle properties. Secondary particles are particles that are emitted from an in-flight particle.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IParticlePropertiesProvider.DeathParticles">
            <summary>
            The particle to spawn upon the particle death.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IParticlePropertiesProvider.PrepareForSecondarySpawn(Vintagestory.API.Common.ParticleBase)">
            <summary>
            Updates instance related state for secondary particles based on the given parent particle instance
            </summary>
            <param name="particleInstance">The parent IParticleInstance from which this secondary particle is being spawned</param>
        </member>
        <member name="T:Vintagestory.API.Common.ClimateCondition">
            A climate condition at a given position
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.Temperature">
            <summary>
            Between -20 and +40 degrees
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.WorldgenRainfall">
            <summary>
            If you read the now values, you can still get the world gen rain fall from this value
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.WorldGenTemperature">
            <summary>
            If you read the now values, you can still get the world gen temp from this value
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.Rainfall">
            <summary>
            Nomalized value between 0..1. When loading the now values, this is set to the current precipitation value, otherwise to "yearly averages" or the values generated during worldgen
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.Fertility">
            <summary>
            Nomalized value between 0..1
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.ForestDensity">
            <summary>
            Nomalized value between 0..1
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ClimateCondition.ShrubDensity">
            <summary>
            Nomalized value between 0..1
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumLightLevelType">
            <summary>
            Used in blockAccessor.GetLightLevel() to determine what kind of light level you want
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumLightLevelType.OnlyBlockLight">
            <summary>
            Will get you just the block light
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumLightLevelType.OnlySunLight">
            <summary>
            Will get you just the sun light unaffected by the day/night cycle
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumLightLevelType.MaxLight">
            <summary>
            Will get you max(onlysunlight, onlyblocklight)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumLightLevelType.MaxTimeOfDayLight">
            <summary>
            Will get you max(sunlight * sunbrightness, blocklight)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumLightLevelType.TimeOfDaySunLight">
            <summary>
            Will get you sunlight * sunbrightness
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ICachingBlockAccessor.LastChunkLoaded">
            <summary>
            True if the most recent GetBlock or SetBlock had a laoded chunk 
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IBlockAccessor">
            <summary>
            Provides read/write access to the blocks of a world
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.ChunkSize">
            <summary>
            Width, Length and Height of a chunk
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.RegionSize">
            <summary>
            Width and Length of a region in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.MapSizeX">
            <summary>
            X Size of the world in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.MapSizeY">
            <summary>
            Y Size of the world in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.MapSizeZ">
            <summary>
            Z Size of the world in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.UpdateSnowAccumMap">
            <summary>
            Whether to update the snow accum map on a SetBlock()
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IBlockAccessor.MapSize">
            <summary>
            Size of the world in blocks
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetChunk(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieve chunk at given chunk position (= divide block position by chunk size)
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetChunk(System.Int64)">
            <summary>
            Retrieve chunk at given chunk position
            </summary>
            <param name="chunkIndex3D"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetMapRegion(System.Int32,System.Int32)">
            <summary>
            Retrieves a map region at given region position
            </summary>
            <param name="regionX"></param>
            <param name="regionZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetChunkAtBlockPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieve chunk at given block position
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetChunkAtBlockPos(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Retrieve chunk at given block position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlockId(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the block id of the block at the given world coordinate
            </summary>
            <param name = "x">x coordinate</param>
            <param name = "y">y coordinate</param>
            <param name = "z">z coordinate</param>
            <returns>ID of the block at the given position. Returns 0 for Airblocks or invalid/unloaded coordinates</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlockId(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Get the block id of the block at the given world coordinate
            </summary>
            <param name="pos"></param>
            <returns>ID of the block at the given position. Returns 0 for Airblocks or invalid/unloaded coordinates</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlock(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the block type of the block at the given world coordinate. Will never return null. For airblocks or invalid coordinates you'll get a block instance with block code "air" and id 0
            </summary>
            <param name = "x">x coordinate</param>
            <param name = "y">y coordinate</param>
            <param name = "z">z coordinate</param>
            <returns>ID of the block at the given position</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlockOrNull(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get the block type of the block at the given world coordinate. For invalid or unloaded coordinates this method returns null.
            </summary>
            <param name = "x">x coordinate</param>
            <param name = "y">y coordinate</param>
            <param name = "z">z coordinate</param>
            <returns>ID of the block at the given position</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlock(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Get block type at given world coordinate. Will never return null. For airblocks or invalid coordinates you'll get a block instance with block code "air" and id 0
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.WalkBlocks(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Action{Vintagestory.API.Common.Block,Vintagestory.API.MathTools.BlockPos},System.Boolean)">
            <summary>
            A method to iterate over blocks in an area. Less overhead than when calling GetBlock(pos) many times. Currently used for more efficient collision testing.
            </summary>
            <param name="minPos"></param>
            <param name="maxPos"></param>
            <param name="onBlock">The method in which you want to check for the block, whatever it may be.</param>
            <param name="centerOrder">If true, the blocks will be ordered by the distance to the center position</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.SearchBlocks(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Common.Block,Vintagestory.API.MathTools.BlockPos},Vintagestory.API.Common.Action{System.Int32,System.Int32,System.Int32})">
            <summary>
            A method to search for a given block in an area
            </summary>
            <param name="minPos"></param>
            <param name="maxPos"></param>
            <param name="onBlock">Return false to stop the search</param>
            <param name="onChunkMissing">Called when a missing/unloaded chunk was encountered</param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.WalkStructures(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Action{Vintagestory.API.Common.GeneratedStructure})">
            <summary>
            Calls given handler if it encounters one or more generated structure at given position (read from mapregions, assuming a max structure size of 256x256x256)
            </summary>
            <param name="pos"></param>
            <param name="onStructure"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.WalkStructures(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Action{Vintagestory.API.Common.GeneratedStructure})">
            <summary>
            Calls given handler if it encounters one or more generated structure that intersect any position inside minpos->maxpos (read from mapregions, assuming a max structure size of 256x256x256)
            </summary>
            <param name="minpos"></param>
            <param name="maxpos"></param>
            <param name="onStructure"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.SetBlock(System.Int32,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Set a block at the given position. Use blockid 0 to clear that position from any blocks. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave.
            </summary>
            <param name="blockId"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.SetBlock(System.Int32,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ItemStack)">
            <summary>
            Set a block at the given position. Use blockid 0 to clear that position from any blocks. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave.
            </summary>
            <param name="blockId"></param>
            <param name="pos"></param>
            <param name="byItemstack">If set then it will be passed onto the block.OnBlockPlaced method</param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.ExchangeBlock(System.Int32,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Set a block at the given position without calling OnBlockRemoved or OnBlockPlaced, which prevents any block entity from being removed or placed. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.BreakBlock(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,System.Single)">
            <summary>
            Removes the block at given position and calls Block.GetDrops(), Block.OnBreakBlock() and Block.OnNeighbourBlockChange() for all neighbours. Drops the items that are return from Block.GetDrops()
            </summary>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <param name="dropQuantityMultiplier"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.DamageBlock(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,System.Single)">
            <summary>
            Client Side: Will render the block breaking decal on that block. If the remaining block resistance reaches 0, will call break block
            Server Side: Broadcasts a package to all nearby clients to update the block damage of this block for rendering the decal (note: there is currently no server side list of current block damages, these are client side only at the moemnt)
            </summary>
            <param name="pos"></param>
            <param name="facing"></param>
            <param name="damage"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlock(System.Int32)">
            <summary>
            Get the Block object of a certain block ID. Returns null when not found.
            </summary>
            <param name = "blockId">The block ID to search for</param>
            <returns>BlockType object</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlock(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Get the Block object of for given block code. Returns null when not found.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.SpawnBlockEntity(System.String,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ItemStack)">
            <summary>
            Spawn block entity at this position. Does not place it's corresponding block, you have to this yourself.
            </summary>
            <param name="classname"></param>
            <param name="position"></param>
            <param name="byItemStack"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.RemoveBlockEntity(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Permanently removes any block entity at this postion. Does not remove it's corresponding block, you have to do this yourself. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetBlockEntity(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Retrieve the block entity at given position. Returns null if there is no block entity at this position
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.IsValidPos(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the position is inside the maps boundaries
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.IsValidPos(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Checks if the position is inside the maps boundaries
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.IsNotTraversable(System.Double,System.Double,System.Double)">
            <summary>
            Checks if this position can be traversed by a normal player (returns false for outside map or not yet loaded chunks)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.IsNotTraversable(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Checks if this position can be traversed by a normal player (returns false for outside map or not yet loaded chunks)
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.Commit">
            <summary>
            Calling this method has no effect in normal block acessors except for:
            - Bulk update block accessor: Sets all blocks, relight all affected one chunks in one go and send blockupdates to clients in a packed format.
            - World gen block accessor: To Recalculate the heightmap in of all updated blocks in one go 
            - Revertable block accessor: Same as bulk update block accessor plus stores a new history state.
            </summary>
            <returns>List of changed blocks</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.Rollback">
            <summary>
            For the bulk update block accessor reverts all the SetBlocks currently called since the last Commit()
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.MarkBlockEntityDirty(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Server side call: Resends the block entity data (if present) to all clients. Triggers a block changed event on the client once received , but will not redraw the chunk. Marks also the chunk dirty so that it gets saved to disk during shutdown or next autosave.
            Client side call: No effect
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.TriggerNeighbourBlockUpdate(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Triggers the method OnNeighbourBlockChange() to all neighbour blocks at given position
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.MarkBlockDirty(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Server side: Triggers a OnNeighbourBlockChange on that position and sends that block to the client (via bulk packet), through that packet the client will do a SetBlock on that position (which triggers a redraw if oldblockid != newblockid).
            Client side: Triggers a block changed event and redraws the chunk
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.MarkBlockDirty(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Action)">
            <summary>
            Server Side: Same as MarkBlockDirty()
            Client Side: Same as MarkBlockDirty(), but also calls supplied delegate after the chunk has been re-retesselated. This can be used i.e. for block entities to dynamically switch between static models and dynamic models at exactly the right timing
            </summary>
            <param name="pos"></param>
            <param name="OnRetesselated"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetLightLevel(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumLightLevelType)">
            <summary>
            Returns the light level (0..32) at given position. If the chunk at that position is not loaded this method will return the default sunlight value
            </summary>
            <param name="pos"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetLightLevel(System.Int32,System.Int32,System.Int32,Vintagestory.API.Common.EnumLightLevelType)">
            <summary>
            Returns the light level (0..32) at given position. If the chunk at that position is not loaded this method will return the default sunlight value
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetLightRGBs(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the light values at given position. XYZ component = block light rgb, W component = sun light brightness
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetLightRGBs(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the light values at given position. XYZ component = block light rgb, W component = sun light brightness
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetLightRGBsAsInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the light values at given position. bit 0-23: block rgb light, bit 24-31: sun light brightness
            </summary>
            <param name="posX"></param>
            <param name="posY"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetTerrainMapheightAt(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the topmost solid surface position at given x/z coordinate as it was during world generation. This map is not updated after placing/removing blocks
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetRainMapHeightAt(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the topmost non-rain-permeable position at given x/z coordinate. This map is always updated after placing/removing blocks
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetDistanceToRainFall(Vintagestory.API.MathTools.BlockPos,System.Int32,System.Int32)">
            <summary>
            Returns a number of how many blocks away there is rain fall. Does a cheap 2D bfs up to 4 blocks away. Returns 99 if none was found within 4 blocks
            </summary>
            <param name="pos"></param>
            <param name="horziontalSearchWidth">Horizontal search distance, 4 default</param>
            <param name="verticalSearchWidth">Vertical search distance, 1 default</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetRainMapHeightAt(System.Int32,System.Int32)">
            <summary>
            Returns the topmost non-rain-permeable position at given x/z coordinate. This map is always updated after placing/removing blocks
            </summary>
            <param name="posX"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetMapChunk(Vintagestory.API.MathTools.Vec2i)">
            <summary>
            Returns the map chunk at given chunk position
            </summary>
            <param name="chunkPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetMapChunk(System.Int32,System.Int32)">
            <summary>
            Returns the map chunk at given chunk position
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetMapChunkAtBlockPos(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the map chunk at given block position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetClimateAt(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumGetClimateMode,System.Double)">
            <summary>
            Returns the positions current climate conditions
            </summary>
            <param name="pos"></param>
            <param name="mode">WorldGenValues = values as determined by the worldgenerator, NowValues = additionally modified to take season, day/night and hemisphere into account</param>
            <param name="totalDays">When mode == ForSuppliedDateValues then supply here the date. Not used param otherwise</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetClimateAt(Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
            Fast shortcut method for the clound renderer
            </summary>
            <param name="pos"></param>
            <param name="climate"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetWindSpeedAt(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Retrieves the wind speed for given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.GetWindSpeedAt(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Retrieves the wind speed for given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.MarkAbsorptionChanged(System.Int32,System.Int32,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Used by the chisel block when enough chiseled have been removed and the blocks light absorption changes as a result of that
            </summary>
            <param name="oldAbsorption"></param>
            <param name="newAbsorption"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IBlockAccessor.RemoveBlockLight(System.Byte[],Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Call this on OnBlockBroken() when your block entity modifies the blocks light range. That way the lighting task can still retrieve the block entity before its gone.
            </summary>
            <param name="oldLightHsV"></param>
            <param name="pos"></param>
        </member>
        <member name="T:Vintagestory.API.Common.EnumGetClimateMode">
            <summary>
            The type of climate values you wish to receive
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGetClimateMode.WorldGenValues">
            <summary>
            The values generate during world generation, these are loosely considered as yearly averages
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGetClimateMode.NowValues">
            <summary>
            The values at the current calendar time
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGetClimateMode.ForSuppliedDateValues">
            <summary>
            The values at the supplied calendar time, supplied as additional arg
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IWorldPlayerData">
            <summary>
            Some world-specific information about a connected player. If you want modify any value, also broadcast the playerdata to all connected clients.
            This is the object that stored and loaded with the save game
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.PlayerUID">
            <summary>
            The players unique identifier
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.EntityPlayer">
            <summary>
            The player entity this player is currently controlling
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.EntityControls">
            <summary>
            The controls that moves around the EntityPlayer
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.LastApprovedViewDistance">
            <summary>
            The players viewing distance in blocks that is allowed by the server
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.DesiredViewDistance">
            <summary>
            The players desired viewing distance in blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.CurrentGameMode">
            <summary>
            The players current game mode. Will return Spectator mode while the player is connecting.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.FreeMove">
            <summary>
            Whether the player can freely fly around
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.FreeMovePlaneLock">
            <summary>
            Whether the player is forcefully kept on vertical or horizontal plane during freemove
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.NoClip">
            <summary>
            Affected by collision boxes or not
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.MoveSpeedMultiplier">
            <summary>
            The players movement speed
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.PickingRange">
            <summary>
            Range of selectable blox
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldPlayerData.AreaSelectionMode">
            <summary>
            Block selection mode
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldPlayerData.SetModdata(System.String,System.Byte[])">
            <summary>
            Allows setting of arbitrary, permanantly stored moddata attached to this player. Not synced to client.
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldPlayerData.RemoveModdata(System.String)">
            <summary>
            Removes the permanently stored mod data
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldPlayerData.GetModdata(System.String)">
            <summary>
            Retrieve arbitrary, permantly stored mod data
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IPlayerInventoryManager">
            <summary>
            Let's you do various interesting things with the players inventory.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.ActiveTool">
            <summary>
            If the player currently holds a tool in his hands, this value will be set
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.ActiveHotbarSlotNumber">
            <summary>
            The players currently active hot bar slot
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.ActiveHotbarSlot">
            <summary>
            Returns the currently selected hotbar slot. Might return null if there is no hotbar!
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.Inventories">
            <summary>
            List of inventories currently available to the player (may however not be opened)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.OpenedInventories">
            <summary>
            List of inventories currently opened by the player
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.MouseItemSlot">
            <summary>
            Returns the slot that holds the currently dragged itemstack
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.IPlayerInventoryManager.CurrentHoveredSlot">
            <summary>
            The slot the player currently hovers over with his mouse cursor
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.DropMouseSlotItems(System.Boolean)">
            <summary>
            Drops the current contents of the mouse slot onto the ground
            </summary>
            <param name="dropAll">If false, will only drop 1</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.DropItem(Vintagestory.API.Common.ItemSlot,System.Boolean)">
            <summary>
            Drops the current contents of given slot onto the ground
            </summary>
            <param name="slot"></param>
            <param name="fullStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.NotifySlot(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Produces a visual cue on given slot, if it's currently part of an inventory and visible to the player
            If called on server side, the server will send a network packet to notify the client.
            </summary>
            <param name="player"></param>
            <param name="slot"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetInventoryName(System.String)">
            <summary>
            Returns the full inventory id for given inventory class name, e.g. GlobalConstants.creativeInvClassName
            </summary>
            <param name="inventoryClassName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetOwnInventory(System.String)">
            <summary>
            Same as GetInventory() with playeruid appended to the inventoryClassName. Returns null if not found. You can use GlobalConstants.*ClassName to get the vanilla player inventories.
            </summary>
            <param name="inventoryClassName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetInventory(System.String)">
            <summary>
            Retrieve a players inventory. Returns null if not found.
            </summary>
            <param name="inventoryId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetHotbarItemstack(System.Int32)">
            <summary>
            Gets the itemstack that in the given slot number of the players hotbar
            </summary>
            <param name="slotId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetBestSuitedHotbarSlot(Vintagestory.API.Common.IInventory,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Returns a slot that would best fit the contents of the source slot. Only tries to place the itemstack into the hotbar.
            </summary>
            <param name="sourceInventory"></param>
            <param name="sourceSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetHotbarInventory">
            <summary>
            Returns the hotbar inventory object. Obvious comment is being obvious.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.GetBestSuitedSlot(Vintagestory.API.Common.ItemSlot,System.Boolean,System.Collections.Generic.List{Vintagestory.API.Common.ItemSlot})">
            <summary>
            Returns a slot that would best fit the contents of the source slot. This checks all inventories currently opened by the player.
            </summary>
            <param name="sourceSlot"></param>
            <param name="onlyPlayerInventory"></param>
            <param name="skipSlots"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.TryTransferAway(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@,System.Boolean,System.Boolean)">
            <summary>
            Tries to move away items from the source slot into any other slot of another inventory
            </summary>
            <param name="sourceSlot"></param>
            <param name="op"></param>
            <param name="onlyPlayerInventory">Forces to place the item only into the players personal inventory</param>
            <param name="slotNotifyEffect"></param>
            <returns>One or more client packets that may be sent to the server for synchronisation</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.TryTransferTo(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            Tries to move items from source slot to target slot (useful for client side inventory utilities)
            </summary>
            <param name="sourceSlot"></param>
            <param name="targetSlot"></param>
            <param name="op">If successfull, a client packet that may be sent to the server for synchronisation</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.TryGiveItemstack(Vintagestory.API.Common.ItemStack,System.Boolean)">
            <summary>
            Tries to add given itemstack to the players inventory
            </summary>
            <param name="itemstack"></param>
            <param name="slotNotifyEffect"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.OpenInventory(Vintagestory.API.Common.IInventory)">
            <summary>
            Notifies the inventory manager that the player has opened an inventory. Should always be called on both sides (client and server).
            Only then interaction with other inventories becomes possible
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.CloseInventory(Vintagestory.API.Common.IInventory)">
            <summary>
            Notifies the inventory manager that the player has closed an inventory. Should always be called on both sides (client and server). After closing interaction with given inventory becomes no longer possible until reopened
            </summary>
            <param name="inventory"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.Find(System.Func{Vintagestory.API.Common.ItemSlot,System.Boolean})">
            <summary>
            Iterates over all inventory slots, returns true if your matcher returns true
            </summary>
            <param name="matcher"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.HasInventory(Vintagestory.API.Common.IInventory)">
            <summary>
            Shorthand for Inventories.ContainsValue(inventory)
            </summary>
            <param name="inventory"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.DiscardAll">
            <summary>
            Will discard all of the players inventory contents
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.OnDeath">
            <summary>
            Will drop all of the players inventory contents
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.DropAllInventoryItems(Vintagestory.API.Common.IInventory)">
            <summary>
            Drops the contents of given inventory
            </summary>
            <param name="inv"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IPlayerInventoryManager.BroadcastHotbarSlot">
            <summary>
            Server Side: Resends the hotbar slot contents to all other clients to make sure they render the correct held item
            Client side: No effect
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.MapChunk">
            <summary>
            Holds a reference to the current map data of this chunk column
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.Blocks">
            <summary>
            Holds all the blockids for each coordinate, access via index: (y * chunksize + z) * chunksize + x
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.MaybeBlocks">
            <summary>
            Non blocking access to blocks at the cost of sometimes returning 0 instead of the real block. Use <see cref="P:Vintagestory.API.Common.IWorldChunk.Blocks"/> if you need reliable block access. Also should only be used for reading.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.Light">
            <summary>
            Lowest 5 bits: Sun brightness, Next 5 bits: Block brightness, Highest 6 bits: Block hue 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.Light_Buffered">
            <summary>
            Used to access light which may be buffered, in ChunkIlluminator 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.Light_SecondBuffer">
            <summary>
            Second Light buffer used for double-buffering in ChunkIlluminator 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.LightSat">
            <summary>
            Holds 3 saturation bits, the other upper 5 bits are unused. 
            Useful applications for the unused bits: 
            - 3 bits for water level for water permissible blocks, like fences: http://www.minecraftforum.net/forums/minecraft-discussion/suggestions/67465-water-should-flow-through-fences
            - 1-2 bits Damage value? 
            - 1 bit if the player placed this block or whether it was part of worldgen
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.Entities">
            <summary>
            An array holding all Entities currently residing in this chunk. This array may be larger than the amount of entities in the chunk. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.EntitiesCount">
            <summary>
            Actual count of entities in this chunk
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.BlockEntities">
            <summary>
            An array holding block Entities currently residing in this chunk. This array may be larger than the amount of block entities in the chunk. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.Unpack">
            <summary>
            Blockdata and Light might be compressed, always call this method if you want to access these
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.MarkModified">
            <summary>
            Marks this chunk as modified. If called on server side it will be stored to disk on the next autosave or during shutdown, if called on client not much happens (but it will be preserved from packing for next ~8 seconds)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.MarkFresh">
            <summary>
            Marks this chunk as recently accessed. This will prevent the chunk from getting compressed by the in-memory chunk compression algorithm
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.LightPositions">
            <summary>
            Returns a list of a in-chunk indexed positions of all light sources in this chunk
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldChunk.Disposed">
            <summary>
            Whether this chunk got unloaded
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.AddEntity(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Adds an entity to the chunk.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.RemoveEntity(System.Int64)">
            <summary>
            Removes an entity from the chunk.
            </summary>
            <param name="entityId">the ID for the entity</param>
            <returns>Whether or not the entity was removed.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.SetModdata(System.String,System.Byte[])">
            <summary>
            Allows setting of arbitrary, permanantly stored moddata of this chunk. When set on the server before the chunk is sent to the client, the data will also be sent to the client.
            When set on the client the data is discarded once the chunk gets unloaded
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.RemoveModdata(System.String)">
            <summary>
            Removes the permanently stored data. 
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.GetModdata(System.String)">
            <summary>
            Retrieve arbitrary, permantly stored mod data
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.GetLocalBlockAtBlockPos(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Retrieve a block from this chunk, performs Unpack() and a modulo operation on the position arg to get a local position in the 0..chunksize range (its your job to pick out the right chunk before calling this method)
            </summary>
            <param name="world"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.GetLocalBlockEntityAtBlockPos(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Retrieve a block entity from this chunk
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldChunk.FinishLightDoubleBuffering">
            <summary>
            Only to be implemented client side
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IWorldAccessor">
            <summary>
            Important interface to access the game world.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Config">
            <summary>
            The current world config
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.DefaultSpawnPosition">
            <summary>
            The default spawn position as sent by the server (usually the map middle). Does not take player specific spawn point into account
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.FrameProfiler">
            <summary>
            Gets the frame profiler utility.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Api">
            <summary>
            The api interface
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Claims">
            <summary>
            The land claiming api interface
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.LoadedChunkIndices">
            <summary>
            Returns a list all loaded chunk positions in the form of a long index. Code to turn that into x/y/z coords:
            Vec3i coords = new Vec3i(
               (int)(chunkIndex3d % ChunkMapSizeX),
               (int)(chunkIndex3d / (ChunkMapSizeX * ChunkMapSizeZ)),
               (int)((chunkIndex3d / ChunkMapSizeX) % ChunkMapSizeZ)
            );
            Retrieving the list is not a very fast process, not suggested to be called every frame
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.LoadedMapChunkIndices">
            <summary>
            Returns a list all loaded chunk positions in the form of a long index
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.BlockLightLevels">
            <summary>
            The currently configured block light brightness levels
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.SunLightLevels">
            <summary>
            The currently configured sun light brightness levels
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.SeaLevel">
            <summary>
            The currently configured sea level (y-coordinate)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Seed">
            <summary>
            The world seed. Accessible on the server and the client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.SavegameIdentifier">
            <summary>
            A globally unique identifier for this savegame
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.SunBrightness">
            <summary>
            The currently configured max sun light level
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.EntityDebugMode">
            <summary>
            Whether the current side (client/server) is in entity debug mode
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.AssetManager">
            <summary>
            Loaded game assets
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Logger">
            <summary>
            Logging Utility
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Side">
            <summary>
            The current side (client/server)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.BlockAccessor">
            <summary>
            Access blocks and other world data from loaded chunks, fault tolerant
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.BulkBlockAccessor">
            <summary>
            Fault tolerant bulk block access to the worlds block data. Since this is a single bulk block access instance the cached data is shared for everything accessing this method, hence should only be accessed from the main thread and any changed comitted within the same game tick. You can however use the WorldManager api to get your own instance of a bulk block accessor
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.ClassRegistry">
            <summary>
            Interface to create instance of certain classes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Calendar">
            <summary>
            Interface to access the game calendar. On the server side only available after run stage 'LoadGamePre' (before that it is null)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.CollisionTester">
            <summary>
            For collision testing in the main thread
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Rand">
            <summary>
            Just a random number generator. Makes use of ThreadLocal for thread safety.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.ElapsedMilliseconds">
            <summary>
            Amount of milliseconds ellapsed since startup
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Collectibles">
            <summary>
            List of all loaded blocks and items without placeholders
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Blocks">
            <summary>
            List of all loaded blocks. The array index is the block id. Some may be null or placeholders (then block.code is null).
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Items">
            <summary>
            List of all loaded items. The array index is the item id. Some may be null or placeholders (then item.code is null)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.EntityTypes">
            <summary>
            List of all loaded entity types. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.GridRecipes">
            <summary>
            List of all loaded crafting recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.Alloys">
            <summary>
            List of all loaded metal alloys
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.CookingRecipes">
            <summary>
            List of all loaded cooking recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.SmithingRecipes">
            <summary>
            List of all loaded smithing recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.KnappingRecipes">
            <summary>
            List of all loaded knapping recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.ClayFormingRecipes">
            <summary>
            List of all loaded clay forming recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.BarrelRecipes">
            <summary>
            List of all loaded barrel recipes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.DefaultEntityTrackingRange">
            <summary>
            The range in blocks within a client will receive regular updates for an entity
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetItem(System.Int32)">
            <summary>
            Retrieve the item class from given item id
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetBlock(System.Int32)">
            <summary>
            Retrieve the block class from given block id
            </summary>
            <param name="blockId"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SearchBlocks(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Returns all blocktypes matching given wildcard
            </summary>
            <param name="wildcard"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetItem(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieve the item class from given item code. Will return null if the item does not exist.
            </summary>
            <param name="itemCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetBlock(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieve the block class from given block code. Will return null if the block does not exist. Logs a warning if block does not exist
            </summary>
            <param name="blockCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetEntityType(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Retrieve the entity class from given entity code. Will return null if the entity does not exist.
            </summary>
            <param name="entityCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnItemEntity(Vintagestory.API.Common.ItemStack,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Spawns a dropped itemstack at given position. Will immediately disappear if stacksize==0
            Returns the entity spawned (may be null!)
            </summary>
            <param name="itemstack"></param>
            <param name="position"></param>
            <param name="velocity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnEntity(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Creates a new entity. It's the responsibility of the given Entity to call set it's EntityType.
            This should be done inside it's Initialize method before base.Initialize is called.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetEntitiesAround(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Common.Entities.Entity})">
            <summary>
            Retrieve all entities within given range and given matcher method. If now matcher method is supplied, all entities are returned.
            </summary>
            <param name="position"></param>
            <param name="horRange"></param>
            <param name="vertRange"></param>
            <param name="matches"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetEntitiesInsideCuboid(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Common.Entities.Entity})">
            <summary>
            Retrieve all entities within a cuboid bound by startPos and endPos. If now matcher method is supplied, all entities are returned.
            </summary>
            <param name="startPos"></param>
            <param name="endPos"></param>
            <param name="matches"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetPlayersAround(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Common.IPlayer})">
            <summary>
            Retrieve all players within given range and given matcher method. This method is faster than when using GetEntitiesAround with a matcher for players
            </summary>
            <param name="position"></param>
            <param name="horRange"></param>
            <param name="vertRange"></param>
            <param name="matches"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetNearestEntity(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single,Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Common.Entities.Entity})">
            <summary>
            Retrieve the nearest entity within given range and given matcher method
            </summary>
            <param name="position"></param>
            <param name="horRange"></param>
            <param name="vertRange"></param>
            <param name="matches"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetIntersectingEntities(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.Cuboidf[],Vintagestory.API.Common.ActionConsumable{Vintagestory.API.Common.Entities.Entity})">
            <summary>
            Retrieves the first found entity that intersects any of the supplied collisionboxes offseted by basePos. This is a helper method for you to determine if you can place a block at given position. You can also implement it yourself with intersection testing and GetEntitiesAround()
            </summary>
            <param name="collisionBoxes"></param>
            <param name="basePos"></param>
            <param name="matches"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.NearestPlayer(System.Double,System.Double,System.Double)">
            <summary>
            Find the nearest player to the given position
            </summary>
            <param name = "x">x coordinate</param>
            <param name = "y">y coordinate</param>
            <param name = "z">z coordinate</param>
            <returns>ID of the nearest player</returns>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.AllOnlinePlayers">
            <summary>
            Gets a list of all online players. 
            </summary>
            <returns>Array containing the IDs of online players</returns>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.AllPlayers">
            <summary>
            Gets a list of all players that connected to this server at least once. When called client side you will receive the same as AllOnlinePlayers
            </summary>
            <returns>Array containing the IDs of online players</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlayerByUid(System.String)">
            <summary>
            Retrieves the worldplayer data object of given player. When called server side the player does not need to be connected.
            </summary>
            <param name="playerUid"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlaySoundAt(Vintagestory.API.Common.AssetLocation,System.Double,System.Double,System.Double,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single,System.Single)">
            <summary>
            Plays given sound at given position.
            </summary>
            <param name="location">The sound path, without sounds/ prefix or the .ogg ending</param>
            <param name="posx"></param>
            <param name="posy"></param>
            <param name="posz"></param>
            <param name="dualCallByPlayer">If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client</param>
            <param name="randomizePitch"></param>
            <param name="range">The range at which the gain will be attenuated to 1% of the supplied volume</param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlaySoundAt(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single,System.Single)">
            <summary>
            Plays given sound at given position.
            </summary>
            <param name="location">The sound path, without sounds/ prefix or the .ogg ending</param>
            <param name="atEntity"></param>
            <param name="dualCallByPlayer">If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client</param>
            <param name="randomizePitch"></param>
            <param name="range">The range at which the gain will be attenuated to 1% of the supplied volume</param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlaySoundAt(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.IPlayer,System.Single,System.Single,System.Single)">
            <summary>
            Plays given sound at given position.
            </summary>
            <param name="location"></param>
            <param name="atEntity"></param>
            <param name="dualCallByPlayer"></param>
            <param name="pitch"></param>
            <param name="range"></param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlaySoundAt(Vintagestory.API.Common.AssetLocation,System.Double,System.Double,System.Double,Vintagestory.API.Common.IPlayer,System.Single,System.Single,System.Single)">
            <summary>
            Plays given sound at given position.
            </summary>
            <param name="location"></param>
            <param name="posx"></param>
            <param name="posy"></param>
            <param name="posz"></param>
            <param name="dualCallByPlayer"></param>
            <param name="pitch"></param>
            <param name="range"></param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlaySoundAt(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single,System.Single)">
            <summary>
            Plays given sound at given player position.
            </summary>
            <param name="location">The sound path, without sounds/ prefix or the .ogg ending</param>
            <param name="atPlayer"></param>
            <param name="dualCallByPlayer">If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client</param>
            <param name="randomizePitch"></param>
            <param name="range">The range at which the gain will be attenuated to 1% of the supplied volume</param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlaySoundFor(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.IPlayer,System.Boolean,System.Single,System.Single)">
            <summary>
            Plays given sound only for given player. Useful when called server side, for the client side there is no difference over using PlaySoundAt or PlaySoundFor
            </summary>
            <param name="location">The sound path, without sounds/ prefix or the .ogg ending</param>
            <param name="forPlayer"></param>
            <param name="randomizePitch"></param>
            <param name="range">The range at which the gain will be attenuated to 1% of the supplied volume</param>
            <param name="volume"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnParticles(System.Single,System.Int32,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec3f,System.Single,System.Single,System.Single,Vintagestory.API.Common.EnumParticleModel,Vintagestory.API.Common.IPlayer)">
            <summary>
            Spawn a bunch of particles
            </summary>
            <param name="quantity"></param>
            <param name="color"></param>
            <param name="minPos"></param>
            <param name="maxPos"></param>
            <param name="minVelocity"></param>
            <param name="maxVelocity"></param>
            <param name="lifeLength"></param>
            <param name="gravityEffect"></param>
            <param name="scale"></param>
            <param name="model"></param>
            <param name="dualCallByPlayer">If this call is made on client and on server, set this the causing playerUID to prevent double spawning. Essentially dualCall will spawn the particles on the client, and send it to all other players except source client</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnParticles(Vintagestory.API.Common.IParticlePropertiesProvider,Vintagestory.API.Common.IPlayer)">
            <summary>
            Spawn a bunch of particles
            </summary>
            <param name="particlePropertiesProvider"></param>
            <param name="dualCallByPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnCubeParticles(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.Vec3d,System.Single,System.Int32,System.Single,Vintagestory.API.Common.IPlayer)">
            <summary>
            Spawn a bunch of particles colored by the block at given position
            </summary>
            <param name="blockPos">The position of the block to take the color from</param>
            <param name="pos">The position where the particles should spawn</param>
            <param name="item"></param>
            <param name="radius"></param>
            <param name="quantity"></param>
            <param name="scale"></param>
            <param name="dualCallByPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.SpawnCubeParticles(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.ItemStack,System.Single,System.Int32,System.Single,Vintagestory.API.Common.IPlayer)">
            <summary>
            Spawn a bunch of particles colored by given itemstack
            </summary>
            <param name="pos">The position where the particles should spawn</param>
            <param name="item"></param>
            <param name="radius"></param>
            <param name="quantity"></param>
            <param name="scale"></param>
            <param name="dualCallByPlayer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RayTraceForSelection(Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.BlockSelection@,Vintagestory.API.Common.EntitySelection@,Vintagestory.API.MathTools.BlockFilter,Vintagestory.API.MathTools.EntityFilter)">
            <summary>
            Shoots out a virtual ray at between given positions and stops when the ray hits a block or entity selection box. The block/entity it struck first is then returned by reference.
            </summary>
            <param name="fromPos"></param>
            <param name="toPos"></param>
            <param name="blockSelection"></param>
            <param name="entitySelection"></param>
            <param name="bfilter">Can be used to ignore certain blocks. Return false to ignore</param>
            <param name="efilter">Can be used to ignore certain entities. Return false to ignore</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RayTraceForSelection(Vintagestory.API.MathTools.IWorldIntersectionSupplier,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.Common.BlockSelection@,Vintagestory.API.Common.EntitySelection@,Vintagestory.API.MathTools.BlockFilter,Vintagestory.API.MathTools.EntityFilter)">
            <summary>
            Shoots out a virtual ray at between given positions and stops when the ray hits a block or entity intersection box supplied by given supplier. The block/entity it struck first is then returned by reference.
            </summary>
            <param name="supplier"></param>
            <param name="fromPos"></param>
            <param name="toPos"></param>
            <param name="blockSelection"></param>
            <param name="entitySelection"></param>
            <param name="bfilter">Can be used to ignore certain blocks. Return false to ignore</param>
            <param name="efilter">Can be used to ignore certain entities. Return false to ignore</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RayTraceForSelection(Vintagestory.API.MathTools.Vec3d,System.Single,System.Single,System.Single,Vintagestory.API.Common.BlockSelection@,Vintagestory.API.Common.EntitySelection@,Vintagestory.API.MathTools.BlockFilter,Vintagestory.API.MathTools.EntityFilter)">
            <summary>
            Shoots out a virtual ray at given position and angle and stops when the ray hits a block or entity selection box. The block/entity it struck first is then returned by reference.
            </summary>
            <param name="fromPos"></param>
            <param name="pitch"></param>
            <param name="yaw"></param>
            <param name="range"></param>
            <param name="blockSelection"></param>
            <param name="entitySelection"></param>
            <param name="bfilter">Can be used to ignore certain blocks. Return false to ignore</param>
            <param name="efilter">Can be used to ignore certain entities. Return false to ignore</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RayTraceForSelection(Vintagestory.API.MathTools.Ray,Vintagestory.API.Common.BlockSelection@,Vintagestory.API.Common.EntitySelection@,Vintagestory.API.MathTools.BlockFilter,Vintagestory.API.MathTools.EntityFilter)">
            <summary>
            Shoots out a given ray and stops when the ray hits a block or entity selection box. The block/entity it struck first is then returned by reference.
            </summary>
            <param name="ray"></param>
            <param name="blockSelection"></param>
            <param name="entitySelection"></param>
            <param name="bfilter">Can be used to ignore certain blocks. Return false to ignore</param>
            <param name="efilter">Can be used to ignore certain entities. Return false to ignore</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RegisterGameTickListener(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnGameTick"></param>
            <param name="millisecondInterval"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.UnregisterGameTickListener(System.Int64)">
            <summary>
            Removes a game tick listener
            </summary>
            <param name="listenerId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RegisterCallback(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnTimePassed"></param>
            <param name="millisecondDelay"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RegisterCallbackUnique(Vintagestory.API.Common.Action{Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single},Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            Ignores any subsequent registers for the same blockpos while a callback is still in the queue. Used e.g. for liquid physics to prevent unnecessary multiple updates
            </summary>
            <param name="OnGameTick"></param>
            <param name="pos"></param>
            <param name="millisecondInterval"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.RegisterCallback(Vintagestory.API.Common.Action{Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Single},Vintagestory.API.MathTools.BlockPos,System.Int32)">
            <summary>
            Calls given method after supplied amount of milliseconds, lets you supply a block position to be passed to the method. The engine may call your method slightly later since these event are handled only during fixed interval game ticks.
            </summary>
            <param name="OnTimePassed"></param>
            <param name="pos"></param>
            <param name="millisecondDelay"></param>
            <returns>listenerId</returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.PlayerHasPrivilege(System.Int32,System.String)">
            <summary>
            Returns true if given client has a privilege. Always returns true on the client.
            </summary>
            <param name="clientid"></param>
            <param name="privilege"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.UnregisterCallback(System.Int64)">
            <summary>
            Removes a delayed callback
            </summary>
            <param name="listenerId"></param>
        </member>
        <member name="P:Vintagestory.API.Common.IWorldAccessor.InteresectionTester">
            <summary>
            Utility for testing intersections. Only access from main thread.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.HighlightBlocks(Vintagestory.API.Common.IPlayer,System.Int32,System.Collections.Generic.List{Vintagestory.API.MathTools.BlockPos},System.Collections.Generic.List{System.Int32},Vintagestory.API.Client.EnumHighlightBlocksMode,Vintagestory.API.Common.EnumHighlightShape)">
            <summary>
            Sends given player a list of block positions that should be highlighted
            </summary>
            <param name="player"></param>
            <param name="highlightSlotId">for multiple highlights use a different number</param>
            <param name="blocks"></param>
            <param name="mode"></param>
            <param name="shape">When arbitrary, the blocks list represents the blocks to be highlighted. When Cube the blocks list should contain 2 positions for start and end</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.HighlightBlocks(Vintagestory.API.Common.IPlayer,System.Int32,System.Collections.Generic.List{Vintagestory.API.MathTools.BlockPos},Vintagestory.API.Client.EnumHighlightBlocksMode,Vintagestory.API.Common.EnumHighlightShape)">
            <summary>
            Sends given player a list of block positions that should be highlighted (using a default color)
            </summary>
            <param name="player"></param>
            <param name="highlightSlotId">for multiple highlights use a different number</param>
            <param name="blocks"></param>
            <param name="mode"></param>
            <param name="shape">When arbitrary, the blocks list represents the blocks to be highlighted. When Cube the blocks list should contain 2 positions for start and end</param>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetBlockAccessor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieve a customized interface to access blocks in the loaded game world.
            </summary>
            <param name="synchronize">Whether or not a call to Setblock should send the update also to all connected clients</param>
            <param name="relight">Whether or not to relight the chunk after a call to SetBlock and the light values changed by that</param>
            <param name="strict">Log an error message if GetBlock/SetBlock was called to an unloaded chunk</param>
            <param name="debug">If strict, crashes the server if a unloaded chunk was crashed, prints an exception and exports a png image of the current loaded chunks</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetBlockAccessorBulkUpdate(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieve a customized interface to access blocks in the loaded game world. Does not to relight/sync on a SetBlock until Commit() is called. On commit all touched blocks are relit/synced at once. This method should be used when setting many blocks (e.g. tree generation, explosion, etc.).
            </summary>
            <param name="synchronize">Whether or not a call to Setblock should send the update also to all connected clients</param>
            <param name="relight">Whether or not to relight the chunk after the a call to SetBlock and the light values changed by that</param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetBlockAccessorBulkMinimalUpdate(System.Boolean,System.Boolean)">
            <summary>
            Retrieve a customized interface to access blocks in the loaded game world. Does not relight, does not not sync, does not call OnBlockPlaced and OnBlockRemoved. On commit all touched blocks are updated at once. This method is currently used for the snow accumulation system
            </summary>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetBlockAccessorRevertable(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Same as GetBlockAccessorBulkUpdate, additionally, each Commit() stores the previous state and you can perform undo/redo operations on these. 
            </summary>
            <param name="synchronize">Whether or not a call to Setblock should send the update also to all connected clients</param>
            <param name="relight">Whether or not to relight the chunk after a call to SetBlock and the light values changed by that</param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetBlockAccessorPrefetch(System.Boolean,System.Boolean)">
            <summary>
            Same as GetBlockAccessor but you have to call PrefetchBlocks() before using GetBlock(). It pre-loads all blocks in given area resulting in faster GetBlock() access
            </summary>
            <param name="synchronize">Whether or not a call to Setblock should send the update also to all connected clients</param>
            <param name="relight">Whether or not to relight the chunk after a call to SetBlock and the light values changed by that</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IWorldAccessor.GetCachingBlockAccessor(System.Boolean,System.Boolean)">
            <summary>
            Same as the normal block accessor but remembers the previous chunk that was accessed. This can give you a 10-50% performance boosts when you scan many blocks in tight loops
            DONT FORGET: Call .Begin() before getting/setting in a tight loop. Not calling it can cause the game to crash
            </summary>
            <param name="synchronize"></param>
            <param name="relight"></param>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.BlockCropProperties.Behaviors">
            <summary>
            Allows customization of crop growth behavior. BlockEntityFarmland calls methods on all behaviors to allow greater control.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.BlockEntity">
            <summary>
            Basic class for block entities - a data structures to hold custom information for blocks, e.g. for chests to hold it's contents
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockEntity.Api">
            <summary>
            The core API added to the block.  Accessable after initialization.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockEntity.Pos">
            <summary>
            Position of the block for this block entity
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.BlockEntity.Block">
            <summary>
            The block type at the position of the block entity. This poperty is updated by the engine if ExchangeBlock is called
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockEntity.Behaviors">
            <summary>
            List of block entity behaviors associated with this block entity
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.#ctor">
            <summary>
            Creats an empty instance. Use initialize to initialize it with the api.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.Initialize(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            This method is called right after the block entity was spawned or right after it was loaded from a newly loaded chunk. You do have access to the world and its blocks at this point.
            However if this block entity already existed then FromTreeAttributes is called first!
            You should still call the base method to sets the this.api field
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.RegisterGameTickListener(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Registers a game tick listener that does the disposing for you when the Block is removed
            </summary>
            <param name="OnGameTick"></param>
            <param name="millisecondInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.UnregisterGameTickListener(System.Int64)">
            <summary>
            Removes a registered game tick listener from the game.
            </summary>
            <param name="listenerId">the ID of the listener to unregister.</param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.RegisterDelayedCallback(Vintagestory.API.Common.Action{System.Single},System.Int32)">
            <summary>
            Registers a delayed callback that does the disposing for you when the Block is removed
            </summary>
            <param name="OnDelayedCallbackTick"></param>
            <param name="millisecondInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.UnregisterDelayedCallback(System.Int64)">
            <summary>
            Unregisters a callback.  This is usually done automatically.
            </summary>
            <param name="listenerId">The ID of the callback listiner.</param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnBlockRemoved">
            <summary>
            Called when the block at this position was removed in some way. Removes the game tick listeners, so still call the base method
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnBlockBroken">
            <summary>
            Called when the block was broken in survival mode or through explosions and similar. Generally in situations where you probably want 
            to drop the block entity contents, if it has any
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnBlockUnloaded">
            <summary>
            Called when the chunk the block entity resides in was unloaded. Removes the game tick listeners, so still call the base method
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnBlockPlaced(Vintagestory.API.Common.ItemStack)">
            <summary>
            Called when the block entity just got placed, not called when it was previously placed and the chunk is loaded
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.ToTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Called when saving the world or when sending the block entity data to the client. When overriding, make sure to still call the base method.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.FromTreeAttributes(Vintagestory.API.Datastructures.ITreeAttribute,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Called when loading the world or when receiving block entity from the server. When overriding, make sure to still call the base method.
            FromTreeAttributes is always called before Initialize() is called, so the this.api field is not yet set!
            </summary>
            <param name="tree"></param>
            <param name="worldAccessForResolve">Use this api if you need to resolve blocks/items. Not suggested for other purposes, as the residing chunk may not be loaded at this point</param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnReceivedClientPacket(Vintagestory.API.Common.IPlayer,System.Int32,System.Byte[])">
            <summary>
            Called whenever a blockentity packet at the blocks position has been received from the client
            </summary>
            <param name="fromPlayer"></param>
            <param name="packetid"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnReceivedServerPacket(System.Int32,System.Byte[])">
            <summary>
            Called whenever a blockentity packet at the blocks position has been received from the server
            </summary>
            <param name="packetid"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.MarkDirty(System.Boolean)">
            <summary>
            When called on Server: Will resync the block entity with all its TreeAttribute to the client, but will not resend or redraw the block unless specified.
            When called on Client: Triggers a block changed event on the client, but will not redraw the block unless specified.
            </summary>
            <param name="redrawOnClient">When true, the block is also marked dirty and thus redrawn. When called serverside a dirty block packet is sent to the client for it to be redrawn</param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.GetBlockInfo(Vintagestory.API.Common.IPlayer,System.Text.StringBuilder)">
            <summary>
            Called by the block info HUD for displaying additional information
            </summary>
            <param name="forPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnStoreCollectibleMappings(System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation})">
            <summary>
            Called by the worldedit schematic exporter so that it can also export the mappings of items/blocks stored inside blockentities
            </summary>
            <param name="blockIdMapping"></param>
            <param name="itemIdMapping"></param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnLoadCollectibleMappings(Vintagestory.API.Common.IWorldAccessor,System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AssetLocation},System.Int32)">
            <summary>
            Called by the blockschematic loader so that you may fix any blockid/itemid mappings against the mapping of the savegame, if you store any collectibles in this blockentity.
            Note: Some vanilla blocks resolve randomized contents in this method.
            Hint: Use itemstack.FixMapping() to do the job for you.
            </summary>
            <param name="oldBlockIdMapping"></param>
            <param name="oldItemIdMapping"></param>
            <param name="schematicSeed">If you need some sort of randomness consistency accross an imported schematic, you can use this value</param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockEntity.OnTesselation(Vintagestory.API.Client.ITerrainMeshPool,Vintagestory.API.Client.ITesselatorAPI)">
            <summary>
            Let's you add your own meshes to a chunk. Don't reuse the meshdata instance anywhere in your code. Return true to skip the default mesh.
            WARNING!
            The Tesselator runs in a seperate thread, so you have to make sure the fields and methods you access inside this method are thread safe.
            </summary>
            <param name="mesher">The chunk mesh, add your stuff here</param>
            <param name="tessThreadTesselator">If you need to tesselate something, you should use this tesselator, since using the main thread tesselator can cause race conditions and crash the game</param>
            <returns>True to skip default mesh, false to also add the default mesh</returns>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.SecondaryParticles">
            <summary>
            The Secondary particles for the JsonObject.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.DeathParticles">
            <summary>
            The death particles for the JsonObject.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.SecondarySpawnInterval">
            <summary>
            The inverval that the secondary particles spawn.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.DieInAir">
            <summary>
            Whether or not the entity dies in air.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.DieInLiquid">
            <summary>
            Whether or not the entity dies in water.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AdvancedParticleProperties.HsvaColor">
            <summary>
            The Hue/Saturation/Value/Alpha for the color of the particle.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.ColorByBlock">
            <summary>
            Whether or not to color the particle by the block it's on.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.OpacityEvolve">
            <summary>
            a transforming opacity value.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.RedEvolve">
            <summary>
            A transforming Red value.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.GreenEvolve">
            <summary>
            A transforming Green value.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.BlueEvolve">
            <summary>
            A transforming Blue value.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.GravityEffect">
            <summary>
            The gravity effect on the particle.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.LifeLength">
            <summary>
            The life length of the particle.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AdvancedParticleProperties.PosOffset">
            <summary>
            Offset from the blocks hitboxes top middle position
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.Quantity">
            <summary>
            The quantity of the particles given.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.Size">
            <summary>
            The size of the particles given.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.SizeEvolve">
            <summary>
            a transforming Size value.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.Velocity">
            <summary>
            The velocity of the particles.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.VelocityEvolve">
            <summary>
            A dynamic velocity value.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.ParticleModel">
            <summary>
            Sets the base model for the particle.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.VertexFlags">
            <summary>
            The level of glow in the particle.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.SelfPropelled">
            <summary>
            Whether or not the particle is self propelled.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.TerrainCollision">
            <summary>
            Whether or not the particle collides with the terrain.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AdvancedParticleProperties.basePos">
            <summary>
            The base position for the particles.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AdvancedParticleProperties.block">
            <summary>
            The base block for the particle.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AdvancedParticleProperties.Init(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Initializes the particle.
            </summary>
            <param name="api">The core API.</param>
        </member>
        <member name="F:Vintagestory.API.Common.AdvancedParticleProperties.Color">
            <summary>
            When HsvaColor is null, this is used
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AdvancedParticleProperties.GetRgbaColor(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Converts the color to RGBA.
            </summary>
            <param name="capi">The Core Client API.</param>
            <returns>The set RGBA color.</returns>
        </member>
        <member name="F:Vintagestory.API.Common.AdvancedParticleProperties.tmpPos">
            <summary>
            Gets the position of the particle in world.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.Vintagestory#API#Common#IParticlePropertiesProvider#Quantity">
            <summary>
            gets the quantity released.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.Vintagestory#API#Common#IParticlePropertiesProvider#Size">
            <summary>
            Gets the dynamic size of the particle.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AdvancedParticleProperties.GetVelocity(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Gets the velocity of the particle.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AdvancedParticleProperties.BeginParticle">
            <summary>
            Begins the advanced particle.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.AdvancedParticleProperties.Vintagestory#API#Common#IParticlePropertiesProvider#SecondarySpawnInterval">
            <summary>
            Gets the secondary spawn interval.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.AdvancedParticleProperties.PrepareForSecondarySpawn(Vintagestory.API.Common.ParticleBase)">
            <summary>
            prepares the particle for secondary spawning.
            </summary>
            <param name="particleInstance"></param>
        </member>
        <member name="F:Vintagestory.API.Common.JsonItemStack.Type">
            <summary>
            Block or Item?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.JsonItemStack.Code">
            <summary>
            Code of the block or item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.JsonItemStack.StackSize">
            <summary>
            Amount of items in this stacks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.JsonItemStack.Quantity">
            <summary>
            Alias of <see cref="F:Vintagestory.API.Common.JsonItemStack.StackSize"/>
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.JsonItemStack.Attributes">
            <summary>
            Tree Attributes that should be attached to the resulting itemstack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.JsonItemStack.ResolvedItemstack">
            <summary>
            The resolved item after conversion.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.JsonItemStack.Resolve(Vintagestory.API.Common.IWorldAccessor,System.String,System.Boolean)">
            <summary>
            Sets itemstack.block or itemstack.item
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.JsonItemStack.Clone">
            <summary>
            Creates a deep copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.JsonItemStack.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IClassRegistryAPI)">
            <summary>
            Loads the ItemStack from the reader.
            </summary>
            <param name="reader">The reader to get the ItemStack from</param>
            <param name="instancer">The instancer for the ItemStack.</param>
        </member>
        <member name="M:Vintagestory.API.Common.JsonItemStack.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Saves the ItemStack to file.
            </summary>
            <param name="writer">The writer to save the item to.</param>
        </member>
        <member name="F:Vintagestory.API.Common.AlloyRecipe.Ingredients">
            <summary>
            The ingredients for this alloy.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AlloyRecipe.Output">
            <summary>
            The output for the alloy.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AlloyRecipe.Matches(Vintagestory.API.Common.ItemStack[],System.Boolean)">
            <summary>
            Makes a check to see if the input for the recipe is valid.
            </summary>
            <param name="inputStacks">The item inputs.</param>
            <param name="useSmeltedWhereApplicable">Whether or not items should be considered their smelted form as opposed their raw form.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.AlloyRecipe.Resolve(Vintagestory.API.Server.IServerWorldAccessor,System.String)">
            <summary>
            Resolves the ingredients that are used to their actual types in the world.
            </summary>
            <param name="world">The world accessor for data.</param>
            <param name="sourceForErrorLogging"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AlloyRecipe.GetTotalOutputQuantity(Vintagestory.API.Common.ItemStack[],System.Boolean)">
            <summary>
            Gets the output amount of material in the resulting alloy.
            </summary>
            <param name="stacks"></param>
            <param name="useSmeltedWhereAppicable"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.AlloyRecipe.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serialized the alloy
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AlloyRecipe.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Deserializes the alloy
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.MetalAlloyIngredient.Clone">
            <summary>
            Creates a deep copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationFrame.FrameNumber">
            <summary>
            The frame number.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationFrame.animTransforms">
            <summary>
            The transformations for this frame.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationFrame.transformationMatrices">
            <summary>
            The transformation matricies for this frame
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationFrame.RootElementTransforms">
            <summary>
            The transformations for the root element of the frame.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationFrame.SetTransform(System.Int32,System.Single[])">
            <summary>
            Sets the transform of a particular joint ID.
            </summary>
            <param name="jointId"></param>
            <param name="modelTransform"></param>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationFrame.FinalizeMatrices(System.Collections.Generic.Dictionary{System.Int32,Vintagestory.API.Common.AnimationJoint})">
            <summary>
            Finalizes the matricies with joints assigned by their ID.
            </summary>
            <param name="jointsById"></param>
        </member>
        <member name="F:Vintagestory.API.Common.CompositeShape.InsertBakedTextures">
            <summary>
            Whether or not to insert baked in textures for mesh formats such as gltf into the texture atlas.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CompositeShape.Alternates">
            <summary>
            The block shape may consists of any amount of alternatives, one of which will be randomly chosen when the block is placed in the world.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CompositeShape.VoxelizeTexture">
            <summary>
            If true, the shape is created from a voxelized version of the first defined texture
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CompositeShape.QuantityElements">
            <summary>
            If non zero will only tesselate the first n elements of the shape
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CompositeShape.SelectiveElements">
            <summary>
            If set will only tesselate elements with given name
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CompositeShape.Clone">
            <summary>
            Creates a deep copy of the texture
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CompositeShape.LoadAlternates(Vintagestory.API.Common.IAssetManager,Vintagestory.API.Common.ILogger)">
            <summary>
            Expands the Composite Texture to a texture atlas friendly version and populates the Baked field
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ChatCommand">
            <summary>
            A base class for all chat commands.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ChatCommand.Command">
            <summary>
            the command calling name.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ChatCommand.Syntax">
            <summary>
            The syntax of the command.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ChatCommand.Description">
            <summary>
            The description of the command.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ChatCommand.RequiredPrivilege">
            <summary>
            The required privilage for the command to be ran.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ChatCommand.CallHandler(Vintagestory.API.Common.IPlayer,System.Int32,Vintagestory.API.Common.CmdArgs)">
            <summary>
            The call handler for the command.
            </summary>
            <param name="player">The player calling the command.</param>
            <param name="groupId">The groupID of the player.</param>
            <param name="args">The arguments of the command.</param>
        </member>
        <member name="M:Vintagestory.API.Common.ChatCommand.GetDescription">
            <summary>
            gets the description of the command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ChatCommand.GetSyntax">
            <summary>
            Gets the syntax of the command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ChatCommand.GetHelpMessage">
            <summary>
            Gets the help message of the command.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ServerChatCommand">
            <summary>
            A handler for creating server commands.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ServerChatCommand.HasPrivilege(Vintagestory.API.Server.IServerPlayer)">
            <summary>
            Whether or not the player has the privilage to run the command.
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ClientChatCommand">
            <summary>
            A handle for creating client commands.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ChatLine">
            <summary>
            an internal control containing the properties of a chat message.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ChatLine.ByPlayerUID">
            <summary>
            The UID of the player who sent the message.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ChatLine.Message">
            <summary>
            The message that was sent.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ChatLine.ChatType">
            <summary>
            The type of chat the message was sent as.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.DamageSource.Source">
            <summary>
            The type of source the damage came from.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.DamageSource.Type">
            <summary>
            The type of damage that was taken.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.DamageSource.HitPosition">
            <summary>
            The hit position of where the damage occured.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.DamageSource.SourceEntity">
            <summary>
            The source entity the damge came from. (if any)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.DamageSource.SourceBlock">
            <summary>
            The source block the damage came from. (if any)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.DamageSource.SourcePos">
            <summary>
            the location of the damage source.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.DamageSource.DamageTier">
            <summary>
            Tier of the weapon used to damage the entity (if any)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.DamageSource.GetSourcePosition">
            <summary>
            Fetches the location of the damage source from either SourcePos or SourceEntity
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Block">
            <summary>
            It came from a block in the world.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Player">
            <summary>
            It from another player.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Fall">
            <summary>
            It came from falling too far.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Drown">
            <summary>
            It came from being in water too long.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Revive">
            <summary>
            It came from respawning.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Void">
            <summary>
            It came from the void.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Suicide">
            <summary>
            It came from the /kill command.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Internal">
            <summary>
            It came from inside.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Entity">
            <summary>
            It came from another entity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Explosion">
            <summary>
            It came from an explostion.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDamageSource.Unknown">
            <summary>
            It came from a source not identified.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDeathCause.FallDamage">
            <summary>
            The death was caused by falling too far.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDeathCause.BlockDamage">
            <summary>
            The death was caused by damage from a block.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDeathCause.Drowning">
            <summary>
            The death was caused by loss of getting air when underwater.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDeathCause.Explosion">
            <summary>
            The death was caused by a strong concussive force to the forehead.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDeathCause.Injury">
            <summary>
            The death was caused by an injury the player sustained.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumDeathCause.Unknown">
            <summary>
            We don't know what killed ya.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.EnumGameMode">
            <summary>
            A players game mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGameMode.Guest">
            <summary>
            Can not place or remove blocks, but can interact with blocks and entities
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGameMode.Survival">
            <summary>
            May not fly or break blocks immediately
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGameMode.Creative">
            <summary>
            Can fly, break blocks immediately, etc.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumGameMode.Spectator">
            <summary>
            Can fly but may not interact with the world in any way
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.EnumAppSideExtensions.IsServer(Vintagestory.API.Common.EnumAppSide)">
            <summary>
            Am I the server?
            </summary>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EnumAppSideExtensions.IsClient(Vintagestory.API.Common.EnumAppSide)">
            <summary>
            Am I the client?
            </summary>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EnumAppSideExtensions.IsUniversal(Vintagestory.API.Common.EnumAppSide)">
            <summary>
            Am I a universal?
            </summary>
            <param name="side"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.EnumAppSideExtensions.Is(Vintagestory.API.Common.EnumAppSide,Vintagestory.API.Common.EnumAppSide)">
            <summary>
            Am I this side?
            </summary>
            <param name="side"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IAsset">
            <summary>
            Represents a loaded asset from the assets folder
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAsset.Name">
            <summary>
            The assets Filename 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAsset.Location">
            <summary>
            The AssetLocation of the asset.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAsset.Origin">
            <summary>
            The origin informaton of the asset.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IAsset.Data">
            <summary>
            The file contents in binary format
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IAsset.ToObject``1(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            If the asset is a json file you can use this convenience method to turn it into an object
            </summary>
            <typeparam name="T">Attempts to convert the asset into the given type.</typeparam>
            <param name="settings">Settings for the Json Serializer.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAsset.ToText">
            <summary>
            Turns the binary data into a UTF-8 string. Use for text files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAsset.ToBitmap(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Turns the binary data into a Bitmap. Use for .png images. Does not work on other image formats.
            </summary>
            <param name="platform"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IAsset.IsLoaded">
            <summary>
            Whether or not the asset is currently loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.IInventory">
            <summary>
            Basic interface representing an item inventory
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.Empty">
            <summary>
            Convenience method to check if this inventory contains anything
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.RemoveOnClose">
            <summary>
            Wether or not to remove the inventory from the players inventory list upon closing it
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.TakeLocked">
            <summary>
            Called by item slot, if true, player cannot take items from this chest
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.PutLocked">
            <summary>
            Called by item slot, if true, player cannot take items from this chest
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.LastChanged">
            <summary>
            Milliseconds since server startup when the inventory was last changed (not used currently)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.Item(System.Int32)">
            <summary>
            Gets or sets the slot at the given slot number.
            Returns null for invalid slot number (below 0 or above Count-1).
            The setter allows for replacing slots with custom ones, though caution is advised.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.ClassName">
            <summary>
            The name of the class for the inventory
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.InventoryID">
            <summary>
            The internal named id for the inventory
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IInventory.DirtySlots">
            <summary>
            The slots marked dirty.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.Open(Vintagestory.API.Common.IPlayer)">
            <summary>
            Marks the inventory available for interaction for this player. Returns a open inventory packet that can be sent to the server for synchronization.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.Close(Vintagestory.API.Common.IPlayer)">
            <summary>
            Removes ability to interact with this inventory for this player. Returns a close inventory packet that can be sent to the server for synchronization.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.HasOpened(Vintagestory.API.Common.IPlayer)">
            <summary>
            Checks if given player has this inventory currently opened
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.GetBestSuitedSlot(Vintagestory.API.Common.ItemSlot,System.Collections.Generic.List{Vintagestory.API.Common.ItemSlot})">
            <summary>
            Returns the best suited slot to hold the item from the source slot. Attached is also a weight, indicating how well the item is suited for it. If no suitable slot was found, the weight will be 0 and the slot will be null. A higher weight means the slot is better suited to hold the item. This method does not check if the player is actually allowed to access or modify this inventory.
            
            Weight will be 1 for a default slot that is empty
            Weight will be 2 for a default slot that can take one or more items from the source slot
            Weight could be 10 for an empty armor slot and the source slot contains an armor itemtack
            </summary>
            <param name="sourceSlot"></param>
            <param name="skipSlots"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.ActivateSlot(System.Int32,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.ItemStackMoveOperation@)">
            <summary>
            When the player clicks on this slot
            </summary>
            <param name="slotId"></param>
            <param name="sourceSlot"></param>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.TryFlipItems(System.Int32,Vintagestory.API.Common.ItemSlot)">
            <summary>
            Attempts to flip the contents of both slots
            </summary>
            <param name="targetSlotId"></param>
            <param name="sourceSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.GetSlotId(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Will return -1 if the slot is not found in this inventory
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IInventory.MarkSlotDirty(System.Int32)">
            <summary>
            Server Side: Will resent the slot contents to the client and mark them dirty there as well
            Client Side: Will refresh stack size, model and stuff if this stack is currently being rendered
            </summary>
            <param name="slotId"></param>
        </member>
        <member name="E:Vintagestory.API.Common.IInventory.SlotModified">
            <summary>
            Event that fires when a slot was modified
            </summary>
        </member>
        <member name="E:Vintagestory.API.Common.IInventory.SlotNotified">
            <summary>
            Event that fires when NotifySlot was called 
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.IItemStack">
            <summary>
            Represents a stack of items or blocks
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Collectible">
            <summary>
            The base class the Item/Block inherits from
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Class">
            <summary>
            Is it a Block or Item?
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Item">
            <summary>
            The Item if ItemClass==Item, otherwise null
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Block">
            <summary>
            The Block if ItemClass==Block, otherwise null
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.StackSize">
            <summary>
            Amount of items or blocks in this stack
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Id">
            <summary>
            The items or blocks unique id
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.IItemStack.Attributes">
            <summary>
            Attributes assigned to this itemstack. Modifiable.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.Equals(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemStack,System.String[])">
            <summary>
            Checks if this item stack is of the same class, id and has the same stack attributes. Ignores stack size
            </summary>
            <param name="sourceStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serializes this itemstack into a byte stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.FromBytes(System.IO.BinaryReader)">
            <summary>
            Deserializes an itemstack from given byte stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.MatchesSearchText(Vintagestory.API.Common.IWorldAccessor,System.String)">
            <summary>
            Checks if the contained item or block name contains given searchtext
            </summary>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.GetName">
            <summary>
            Returns the name displayed in the players inventory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.GetDescription(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.ItemSlot,System.Boolean)">
            <summary>
            Returns a multiline description text of the item
            </summary>
            <param name="world"></param>
            <param name="InSlot"></param>
            <param name="debug">Whether to show additional debug info</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.IItemStack.Clone">
            <summary>
            Creates a deep copy of the itemstack
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationKeyFrame.Frame">
            <summary>
            The ID of the keyframe.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.AnimationKeyFrame.Elements">
            <summary>
            The elements of the keyframe.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.AnimationKeyFrame.Resolve(Vintagestory.API.Common.Animation,Vintagestory.API.Common.ShapeElement[])">
            <summary>
            Resolves the keyframe animation for which elements are important.
            </summary>
            <param name="anim"></param>
            <param name="allElements"></param>
        </member>
        <member name="T:Vintagestory.API.Common.Shape">
            <summary>
            The base shape for all json objects.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Shape.Textures">
            <summary>
            The collection of textures in the shape.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Shape.Elements">
            <summary>
            The elements of the shape.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Shape.Animations">
            <summary>
            The animations for the shape.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Shape.TextureWidth">
            <summary>
            The width of the texture. (default: 16)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Shape.TextureHeight">
            <summary>
            The height of the texture (default: 16) 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Shape.ResolveReferences(Vintagestory.API.Common.ILogger,System.String)">
            <summary>
            Attempts to resolve all references within the shape. Logs missing references them to the errorLogger
            </summary>
            <param name="errorLogger"></param>
            <param name="shapeNameForLogging"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Shape.CollectElements(Vintagestory.API.Common.ShapeElement[],System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Common.ShapeElement})">
            <summary>
            Collects all the elements in the shape recursively.
            </summary>
            <param name="elements"></param>
            <param name="elementsByName"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Shape.ResolveAndLoadJoints(System.String[])">
            <summary>
            Resolves all joints and loads them.
            </summary>
            <param name="requireJointsForElements"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Shape.GetElementByName(System.String,System.StringComparison)">
            <summary>
            Recursively searches the element by name from the shape.
            </summary>
            <param name="name">The name of the element to get.</param>
            <returns>The shape element or null if none was found</returns>
        </member>
        <member name="M:Vintagestory.API.Common.Shape.RemoveElementByName(System.String,System.StringComparison)">
            <summary>
            Removes *all* elements with given name
            </summary>
            <param name="name"></param>
            <param name="stringComparison"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ShapeElement">
            <summary>
            A shape element built from JSON data within the model.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.Name">
            <summary>
            The name of the ShapeElement
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.Shade">
            <summary>
            Whether or not the shape element is shaded.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.Faces">
            <summary>
            The faces of the shape element by name.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.RotationOrigin">
            <summary>
            The origin point for rotation.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.RotationX">
            <summary>
            The forward vertical rotation of the shape element.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.RotationY">
            <summary>
            The forward vertical rotation of the shape element.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.RotationZ">
            <summary>
            The left/right tilt of the shape element
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.ScaleX">
            <summary>
            How far away are the left/right sides of the shape from the center
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.ScaleY">
            <summary>
            How far away are the top/bottom sides of the shape from the center
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.ScaleZ">
            <summary>
            How far away are the front/back sides of the shape from the center.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.Children">
            <summary>
            The child shapes of this shape element
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.AttachmentPoints">
            <summary>
            The attachment points for this shape.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.StepParentName">
            <summary>
            The "remote" parent for this element
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.ParentElement">
            <summary>
            The parent element reference for this shape.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElement.JointId">
            <summary>
            The id of the joint attached to the parent element.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ShapeElement.GetParentPath">
            <summary>
            Walks the element tree and collects all parents, starting with the root element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ShapeElement.GetInverseModelMatrix">
            <summary>
            Returns the full inverse model matrix (includes all parent transforms)
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElementFace.Texture">
            <summary>
            The texture of the face.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElementFace.Uv">
            <summary>
            The UV array of the face.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElementFace.Rotation">
            <summary>
            The rotation of the face.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElementFace.Glow">
            <summary>
            The glow on the face.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ShapeElementFace.Enabled">
            <summary>
            Whether or not the element is enabled.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.Block">
            <summary>
            Basic class for a placeable block
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Block.Id">
            <summary>
            Returns the block id
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Block.ItemClass">
            <summary>
            Returns EnumItemClass.Block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.DefaultCollisionBox">
            <summary>
            Default Full Block Collision Box
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.BlockId">
            <summary>
            Unique number of the block. Same as <see cref="P:Vintagestory.API.Common.Block.Id"/>. This number depends on the order in which the blocks are order. The numbering is however always ensured to remain the same on a per world basis.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.DrawType">
            <summary>
            If not set to JSON it will use an efficient hardcoded model
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RenderPass">
            <summary>
            During which render pass this block should be rendered
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Ambientocclusion">
            <summary>
            Currently not used
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.WalkSpeedMultiplier">
            <summary>
            Walk speed when standing or inside this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.DragMultiplier">
            <summary>
            Drag multiplier applied to entities standing on it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.PartialSelection">
            <summary>
            If true, players can target individual selection boxes of the block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Sounds">
            <summary>
            The sounds played for this block during step, break, build and walk
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.VertexFlags">
            <summary>
            Data thats passed on to the graphics card for every vertex of the blocks model
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Frostable">
            <summary>
            A bit uploaded to the shader to add a frost overlay below freezing temperature
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.LightHsv">
            <summary>
            For light emitting blocks: hue, saturation and brightness value
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.LightAbsorption">
            <summary>
            For light blocking blocks. Any value above 32 will completely block all light.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.LightTraversable">
            <summary>
            0: West-East
            1: Up-Down
            2: North-South
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Replaceable">
            <summary>
            A value usually between 0-9999 that indicates which blocks may be replaced with others.
            - Any block with replaceable value above 5000 will be washed away by water
            - Any block with replaceable value above 6000 will replaced when the player tries to place a block
            Examples:
            0 = Bedrock
            6000 = Tallgrass
            9000 = Lava
            9500 = Water
            9999 = Air
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Fertility">
            <summary>
            0 = nothing can grow, 10 = some tallgrass and small trees can be grow on it, 100 = all grass and trees can grow on it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RequiredMiningTier">
            <summary>
            The mining tier required to break this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Resistance">
            <summary>
            How long it takes to break this block in seconds
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.BlockMaterial">
            <summary>
            A way to categorize blocks. Used for getting the mining speed for each tool type, amongst other things
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RandomizeAxes">
            <summary>
            Random texture selection - whether or not to use the Y axis during randomization (for multiblock plants)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RandomDrawOffset">
            <summary>
            If true then the block will be randomly offseted by 1/3 of a block when placed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.ShapeInventory">
            <summary>
            The block shape to be used when displayed in the inventory gui, held in hand or dropped on the ground
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Shape">
            <summary>
            The default json block shape to be used when drawtype==JSON
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Textures">
            <summary>
            Default textures to be used for this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.FastTextureVariants">
            <summary>
            Fast array of texture variants, for use by cube (or similar) tesselators if the block has alternate shapes
            The outer array is indexed based on the 6 BlockFacing.Index numerals; the inner array is the variants
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.TexturesInventory">
            <summary>
            Textures to be used for this block in the inventory gui, held in hand or dropped on the ground
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Block.FirstTextureInventory">
            <summary>
            Returns the first textures in the TexturesInventory dictionary
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SideOpaque">
            <summary>
            Defines which of the 6 block sides are completely opaque. Used to determine which block faces can be culled during tesselation.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SideSolid">
            <summary>
            Defines which of the 6 block side are solid. Used to determine if attachable blocks can be attached to this block. Also used to determine if snow can rest on top of this block.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SideAo">
            <summary>
            Defines which of the 6 block side should be shaded with ambient occlusion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.EmitSideAo">
            <summary>
            Defines which of the 6 block neighbours should receive AO if this block is in front of them
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.AllowSpawnCreatureGroups">
            <summary>
            Defines what creature groups may spawn on this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.EmitSideAoOppositeByFlags">
            <summary>
            Created on the client to cache the side ao flags by blockfacing flags plus every face with every face combined (e.g. south|west). Havin these values cached speeds up chunk tesselation.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.FaceCullMode">
            <summary>
            Determines which sides of the blocks should be rendered
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.ClimateColorMap">
            <summary>
            The color map for climate color mapping. Leave null for no coloring by climate
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SeasonColorMap">
            <summary>
            The color map for season color mapping. Leave null for no coloring by season
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.ShapeUsesColormap">
            <summary>
            Internal value that's set during if the block shape has any tint indexes for use in chunk tesselation and stuff O_O
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.CollisionBoxes">
            <summary>
            Defines the area with which the player character collides with.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SelectionBoxes">
            <summary>
            Defines the area which the players mouse pointer collides with for selection.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Climbable">
            <summary>
            Used for ladders. If true, walking against this blocks collisionbox will make the player climb
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.RainPermeable">
            <summary>
            Will be used for not rendering rain below this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SnowCoverage">
            <summary>
            Whether snow may rest on top of this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.LiquidLevel">
            <summary>
            Value between 0..7 for Liquids to determine the height of the liquid
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.LiquidCode">
            <summary>
            If this block is or contains a liquid, this should be the code (or "identifier") of the liquid
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.Block.HasAlternates">
            <summary>
            A flag set during texture block shape tesselation
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.BlockBehaviors">
            <summary>
            Modifiers that can alter the behavior of a block, particularly when being placed or removed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.BlockEntityBehaviors">
            <summary>
            Modifiers that can alter the behavior of a block entity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.Drops">
            <summary>
            The items that should drop from breaking this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.SplitDropStacks">
            <summary>
            If true, a blocks drops will be split into stacks of stacksize 1 for more game juice. This field is only used in OnBlockBroken() and OnBlockExploded()
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.CropProps">
            <summary>
            Information about the blocks as a crop 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Block.EntityClass">
            <summary>
            If this block has a block entity attached to it, this will store it's code 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Block.PushVector">
            <summary>
            Entity pushing while an entity is inside this block. Read from attributes because i'm lazy.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Block.#ctor">
            <summary>
            Creates a new instance of a block with default model transforms
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnLoaded(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called when this block was loaded by the server or the client
            </summary>
            <param name="api"></param>
        </member>
        <member name="P:Vintagestory.API.Common.Block.AllSidesOpaque">
            <summary>
            Sets the whole SideOpaque array to true 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Block.MergeFaceNeighbouringIce(System.Int32,Vintagestory.API.Common.Block,System.Int32)">
            <summary>
            Used only when rendering ice: the same type of ice should return true 
            </summary>
            <param name="facingIndex">The index of the BlockFacing face of this block being tested</param>
            <param name="neighbourIce">The neighbouring ice block, probably LakeIce or Glacier</param>
            <param name="intraChunkIndex3d">The position index within the chunk (z * 32 * 32 + y * 32 + x): the BlockEntity can be obtained using this if necessary</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetParticleBreakBox(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            The cuboid used to determine where to spawn particles when breaking the block
            </summary>
            <param name="blockAccess"></param>
            <param name="pos"></param>
            <param name="facing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetSelectionBoxes(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the blocks selection boxes at this position in the world.
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetCollisionBoxes(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the blocks collision box. Warning: This method may get called by different threads, so it has to be thread safe.
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetLightHsv(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return the light HSV values. 
            Warning: This method is likely to get called in a background thread. Please make sure your code in here is thread safe.
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos">May be null</param>
            <param name="stack">Set if its an itemstack for which the engine wants to check the light level</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetLiquidCode(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            If this block is or contains a liquid, it should return the code of it. Used for example by farmland to check if a nearby block is water
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetDecal(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Client.ITexPositionSource,Vintagestory.API.Client.MeshData@,Vintagestory.API.Client.MeshData@)">
            <summary>
            Called before a decal is created.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="decalTexSource"></param>
            <param name="decalModelData">The block model which need UV values for the decal texture</param>
            <param name="blockModelData">The original block model</param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.CanAttachBlockAt(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.Common.Block,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,Vintagestory.API.MathTools.Cuboidi)">
            <summary>
            Used by torches and other blocks to check if it can attach itself to that block
            </summary>
            <param name="blockAccessor"></param>
            <param name="block"></param>
            <param name="pos"></param>
            <param name="blockFace"></param>
            <param name="attachmentArea">Area of attachment of given face in voxel dimensions (0..15)</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.CanCreatureSpawnOn(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Entities.EntityProperties,Vintagestory.API.Common.Entities.BaseSpawnConditions)">
            <summary>
            Should return if supplied entitytype is allowed to spawn on this block
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos"></param>
            <param name="type"></param>
            <param name="sc"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.TryPlaceBlockForWorldGen(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,Vintagestory.API.MathTools.LCGRandom)">
            <summary>
            Currently used for wildvines and saguaro cactus
            </summary>
            <param name="blockAccessor"></param>
            <param name="pos"></param>
            <param name="onBlockFace"></param>
            <param name="worldgenRandom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.TryPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.BlockSelection,System.String@)">
            <summary>
            Called when the player attempts to place this block
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="itemstack"></param>
            <param name="blockSel"></param>
            <param name="failureCode">If you return false, set this value to a code why it cannot be placed. Its used for the ingame error overlay. Set to "__ignore__" to not trigger an error</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.CanPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,System.String@)">
            <summary>
            Checks if this block does not intersect with something at given position
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <param name="failureCode"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.DoPlaceBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.ItemStack)">
            <summary>
            Called by TryPlaceBlock if placement is possible 
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <param name="byItemStack">Might be null</param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBeingLookedAt(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,System.Boolean)">
            <summary>
            Called by the server and the client when the player currently looks at this block. Gets called continously every tick.
            </summary>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <param name="firstTick">True when previous tick the player looked at a different block. You can use it to make an efficient, single-event lookat trigger</param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnHeldInteractStart(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection,System.Boolean,Vintagestory.API.Common.EnumHandHandling@)">
            <summary>
            Delegates the event to the block behaviors and calls the base method if the event was not handled
            </summary>
            <param name="slot">The item the entity currently has in its hands</param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <param name="firstEvent"></param>
            <param name="handHandling"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnHeldInteractStep(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Delegates the event to the block behaviors and calls the base method if the event was not handled
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot">The item the entity currently has in its hands</param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnHeldInteractStop(System.Single,Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EntitySelection)">
            <summary>
            Delegates the event to the block behaviors and calls the base method if the event was not handled
            </summary>
            <param name="secondsUsed"></param>
            <param name="slot">The item the entity currently has in its hands</param>
            <param name="byEntity"></param>
            <param name="blockSel"></param>
            <param name="entitySel"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnGettingBroken(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.ItemSlot,System.Single,System.Single,System.Int32)">
            <summary>
            Player is breaking this block. Has to reduce remainingResistance by the amount of time it should be broken. This method is called only client side, every 40ms during breaking.
            </summary>
            <param name="player"></param>
            <param name="blockSel"></param>
            <param name="itemslot">The item the player currently has in his hands</param>
            <param name="remainingResistance">how many seconds was left until the block breaks fully</param>
            <param name="dt">seconds passed since last render frame</param>
            <param name="counter">Total count of hits (every 40ms)</param>
            <returns>how many seconds now left until the block breaks fully. If a value equal to or below 0 is returned, OnBlockBroken() will get called.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockBroken(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,System.Single)">
            <summary>
            Called when a survival player has broken the block. This method needs to remove the block.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <param name="dropQuantityMultiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetDropsForHandbook(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.IPlayer)">
            <summary>
            Should return all of the blocks drops for display in the handbook
            </summary>
            <param name="handbookStack"></param>
            <param name="forPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetHandbookDropsFromBreakDrops(Vintagestory.API.Common.ItemStack,Vintagestory.API.Common.IPlayer)">
            <summary>
            Helper method for a number of blocks
            </summary>
            <param name="handbookStack"></param>
            <param name="forPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetDrops(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer,System.Single)">
            <summary>
            Is called before a block is broken, should return what items this block should drop. Return null or empty array for no drops.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="byPlayer"></param>
            <param name="dropQuantityMultiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnTryIgniteBlock(Vintagestory.API.Common.EntityAgent,Vintagestory.API.MathTools.BlockPos,System.Single)">
            <summary>
            Called while the given entity attempts to ignite this block
            </summary>
            <param name="byEntity"></param>
            <param name="pos"></param>
            <param name="secondsIgniting"></param>
            <returns>true when this block is ignitable</returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnTryIgniteBlockOver(Vintagestory.API.Common.EntityAgent,Vintagestory.API.MathTools.BlockPos,System.Single,Vintagestory.API.Common.EnumHandling@)">
            <summary>
            Called after the given entity has attempted to ignite this block
            </summary>
            <param name="byEntity"></param>
            <param name="pos"></param>
            <param name="secondsIgniting"></param>
            <param name="handling"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnPickBlock(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            When the player has presed the middle mouse click on the block
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockRemoved(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Always called when a block has been removed through whatever method, except during worldgen or via ExchangeBlock()
            For Worldgen you might be able to use TryPlaceBlockForWorldGen() to attach custom behaviors during placement/removal
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockPlaced(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.ItemStack)">
            <summary>
            Always called when a block has been placed through whatever method, except during worldgen or via ExchangeBlock()
            For Worldgen you might be able to use TryPlaceBlockForWorldGen() to attach custom behaviors during placement/removal
            </summary>
            <param name="world"></param>
            <param name="blockPos"></param>
            <param name="byItemStack">May be null!</param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnNeighbourBlockChange(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Called when any of it's 6 neighbour blocks has been changed
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="neibpos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockInteractStart(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection)">
            <summary>
            When a player does a right click while targeting this placed block. Should return true if the event is handled, so that other events can occur, e.g. eating a held item if the block is not interactable with.
            </summary>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <returns>False if the interaction should be stopped. True if the interaction should continue. If you return false, the interaction will not be synced to the server.</returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockInteractStep(System.Single,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection)">
            <summary>
            Called every frame while the player is using this block. Return false to stop the interaction.
            </summary>
            <param name="secondsUsed"></param>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockInteractStop(System.Single,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection)">
            <summary>
            Called when the player successfully completed the using action, always called once an interaction is over
            </summary>
            <param name="secondsUsed"></param>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockInteractCancel(System.Single,Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.EnumItemUseCancelReason)">
            <summary>
            When the player released the right mouse button. Return false to deny the cancellation (= will keep using the block until OnBlockInteractStep returns false).
            </summary>
            <param name="secondsUsed"></param>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <param name="cancelReason"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnEntityInside(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            When an entity is inside a block (can only occur if collision box is smaller than 1x1x1)
            </summary>
            <param name="world"></param>
            <param name="entity"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnEntityCollide(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.Entities.Entity,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing,Vintagestory.API.MathTools.Vec3d,System.Boolean)">
            <summary>
            Whenever an entity collides with the collision box of the block
            </summary>
            <param name="world"></param>
            <param name="entity"></param>
            <param name="pos"></param>
            <param name="facing"></param>
            <param name="collideSpeed"></param>
            <param name="isImpact"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnFallOnto(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Block,Vintagestory.API.Datastructures.TreeAttribute)">
            <summary>
            Called when a falling block falls onto this one. Return true to cancel default behavior.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="block"></param>
            <param name="blockEntityAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.ShouldReceiveClientParticleTicks(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.IPlayer,Vintagestory.API.MathTools.BlockPos,System.Boolean@)">
            <summary>
            Everytime the player moves by 8 blocks (or rather leaves the current 8-grid), a scan of all blocks 32x32x32 blocks around the player is initiated
            and this method is called. If the method returns true, the block is registered to a client side game ticking for spawning particles and such.
            This method will be called everytime the player left his current 8-grid area. 
            </summary>
            <param name="world"></param>
            <param name="player"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.ShouldPlayAmbientSound(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Extra check on whether the ambient sound defined by the block should be played at this location
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnAsyncClientParticleTick(Vintagestory.API.Client.IAsyncParticleManager,Vintagestory.API.MathTools.BlockPos,System.Single,System.Single)">
            <summary>
            Called evey 25ms if the block is in range (32 blocks) and block returned true on ShouldReceiveClientGameTicks(). Takes a few seconds for the game to register the block.
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="secondsTicking"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.ShouldReceiveServerGameTicks(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Random,System.Object@)">
            <summary>
            Called every interval specified in Server.Config.RandomTickInterval. Defaults to 50ms. This method
            is called on a separate server thread. This should be considered when deciding how to access blocks.
            If true is returned, the server will call OnServerGameTick on the main thread passing the BlockPos
            and the 'extra' object if specified. The 'extra' parameter is meant to prevent duplicating lookups
            and other calculations when OnServerGameTick is called. 
            </summary>
            <param name="world"></param>
            <param name="pos">The position of this block</param>
            <param name="offThreadRandom">If you do anything with random inside this method, don't use world.Rand because <see cref="T:System.Random"/> its not thread safe, use this or create your own instance</param>
            <param name="extra">Optional parameter to set if you need to pass additional data to the OnServerGameTick method</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnServerGameTick(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,System.Object)">
            <summary>
            Called by the main server thread if and only if this block returned true in ShouldReceiveServerGameTicks.
            </summary>
            <param name="world"></param>
            <param name="pos">The position of this block</param>
            <param name="extra">The value set for the 'extra' parameter when ShouldReceiveGameTicks was called.</param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnHeldIdle(Vintagestory.API.Common.ItemSlot,Vintagestory.API.Common.EntityAgent)">
            <summary>
            When the item is being held in hands without using it 
            </summary>
            <param name="slot"></param>
            <param name="byEntity"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnJsonTesselation(Vintagestory.API.Client.MeshData@,Vintagestory.API.MathTools.BlockPos,System.Int32[],System.UInt16[],System.Int32)">
            <summary>
            If this block uses drawtype json, this method will be called. 
            </summary>
            <param name="sourceMesh"></param>
            <param name="pos"></param>
            <param name="chunkExtIds">Optional, fast way to look up a direct neighbouring block. This is an array of the current chunk's block ids, also including all direct neighbours, so it's a 34x34x34 block id list. extIndex3d is the index of the current Block in this array. Use extIndex3d+TileSideEnum.MoveIndex[tileSide] to move around in the array. Block positions in this array for other chunk blocks which are not direct neighbours of the current Block - e.g. diagonal neighbours - are invalid if AOandSmoothLighting is disabled for performance.</param>
            <param name="extIndex3d"></param>See description of chunkExtIds!
        </member>
        <member name="M:Vintagestory.API.Common.Block.DetermineTopMiddlePos">
            <summary>
            Used as base position for particles.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Block.IsReplacableBy(Vintagestory.API.Common.Block)">
            <summary>
            Used to determine if a block should be treated like air when placing blocks. (e.g. used for tallgrass)
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.SuggestedHVOrientation(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.BlockSelection)">
            <summary>
            Returns a horizontal and vertical orientation which should be used for oriented blocks like stairs during placement.
            </summary>
            <param name="byPlayer"></param>
            <param name="blockSel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.ToString">
            <summary>
            Simple string representation for debugging
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.PerformSnowLevelUpdate(Vintagestory.API.Common.IBulkBlockAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.Block,System.Single)">
            <summary>
            Called in the servers main thread
            </summary>
            <param name="ba"></param>
            <param name="pos"></param>
            <param name="newBlock">The block as returned by your GetSnowLevelUpdateBlock() method</param>
            <param name="snowLevel"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetSnowCoveredVariant(Vintagestory.API.MathTools.BlockPos,System.Single)">
            <summary>
            Should return the snow covered block code for given snow level. Return null if snow cover is not supported for this block. If not overridden, it will check if Variant["cover"] exists and return its snow covered variant.
            </summary>
            <param name="snowLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetHeatRetention(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Return a positive integer if the block retains heat (for warm rooms or greenhouses) or a negative integer if it preserves cool (for cellars)
            </summary>
            <param name="facing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetRotatedBlockCode(System.Int32)">
            <summary>
            For any block that can be rotated, this method should be implemented to return the correct rotated block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetVerticallyFlippedBlockCode">
            <summary>
            For any block that can be flipped upside down, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetHorizontallyFlippedBlockCode(Vintagestory.API.MathTools.EnumAxis)">
            <summary>
            For any block that can be flipped vertically, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations
            </summary>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetBehavior(System.Type,System.Boolean)">
            <summary>
            Returns the blocks behavior of given type, if it has such behavior
            </summary>
            <param name="type"></param>
            <param name="withInheritance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetBehavior(System.Type)">
            <summary>
            Returns the blocks behavior of given type, if it has such behavior
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetBehavior``1">
            <summary>
            Returns the blocks behavior of given type, if it has such behavior
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.HasBehavior``1(System.Boolean)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <typeparam name="T"></typeparam>
            <param name="withInheritance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.HasBehavior(System.Type,System.Boolean)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <param name="type"></param>
            <param name="withInheritance"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.HasBehavior(System.String,Vintagestory.API.Common.IClassRegistryAPI)">
            <summary>
            Returns true if the block has given behavior
            </summary>
            <param name="type"></param>
            <param name="classRegistry"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetPlacedBlockName(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Called by the block info HUD for displaying the blocks name
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetPlacedBlockInteractionHelp(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Common.BlockSelection,Vintagestory.API.Common.IPlayer)">
            <summary>
            Called by the block info HUD for display the interaction help besides the crosshair
            </summary>
            <param name="world"></param>
            <param name="selection"></param>
            <param name="forPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetHeldInteractionHelp(Vintagestory.API.Common.ItemSlot)">
            <summary>
            Interaction help thats displayed above the hotbar, when the player puts this item/block in his active hand slot
            </summary>
            <param name="inSlot"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetPlacedBlockInfo(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.IPlayer)">
            <summary>
            Called by the block info HUD for displaying additional information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetHeldItemInfo(Vintagestory.API.Common.ItemSlot,System.Text.StringBuilder,Vintagestory.API.Common.IWorldAccessor,System.Boolean)">
            <summary>
            Called by the inventory system when you hover over an item stack. This is the text that is getting displayed.
            </summary>
            <param name="inSlot"></param>
            <param name="dsc"></param>
            <param name="world"></param>
            <param name="withDebugInfo"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.DoParticalSelection(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            If true, the player can select invdividual selection boxes of this block
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnCollectTextures(Vintagestory.API.Common.ICoreAPI,Vintagestory.API.Common.ITextureLocationDictionary)">
            <summary>
            Called by the texture atlas manager when building up the block atlas. Has to add all of the blocks texture
            </summary>
            <param name="api"></param>
            <param name="textureDict"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.BakeAndCollect(Vintagestory.API.Common.ICoreAPI,System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Client.CompositeTexture},Vintagestory.API.Common.ITextureLocationDictionary)">
            <summary>
            Called by the texture atlas manager when building up the block atlas. Has to add all of the blocks texture
            </summary>
            <param name="api"></param>
            <param name="dict"></param>
            <param name="textureDict"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.WildCardReplace(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.AssetLocation)">
            <summary>
            Returns a new AssetLocation with the wildcards (*) being filled with the blocks other Code parts, if the wildcard matches. 
            Example this block is trapdoor-up-north. search is *-up-*, replace is *-down-*, in this case this method will return trapdoor-down-north.
            </summary>
            <param name="search"></param>
            <param name="replace"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetBlastResistance(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.Vec3f,Vintagestory.API.Common.EnumBlastType)">
            <summary>
            Should return the blocks blast resistance. Default behavior is to return BlockMaterialUtil.MaterialBlastResistance(blastType, BlockMaterial);
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="blastDirectionVector"></param>
            <param name="blastType"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.ExplosionDropChance(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumBlastType)">
            <summary>
            Should return the chance of the block dropping its upon upon being exploded. Default behavior is to return BlockMaterialUtil.MaterialBlastDropChances(blastType, BlockMaterial);
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="blastType"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.OnBlockExploded(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumBlastType)">
            <summary>
            Called when the block was blown up by explosives
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="explosionCenter"></param>
            <param name="blastType"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetRandomColor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Should return the color to be used for the block particle coloring
            </summary>
            <param name="capi"></param>
            <param name="pos"></param>
            <param name="facing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetRandomColor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return a random pixel within the items/blocks texture
            </summary>
            <param name="capi"></param>
            <param name="stack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetColor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Should return an RGB color for this block. Current use: In the world map. Default behavior: The 2 averaged pixels at 40%/40% ad 60%/60% position
            </summary>
            <param name="capi"></param>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Block.GetColorWithoutTint(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Tint less version of GetColor. Used for map color export
            </summary>
            <param name="capi"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Block.Clone">
            <summary>
            Creates a deep copy of the block
            </summary>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMatterState.Gas">
            <summary>
            The state of being so thin that molecules don't often touch
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMatterState.Liquid">
            <summary>
            The state of being still together but loose enough to move around each other.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMatterState.Solid">
            <summary>
            The state of being together and held still by the internal structure.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMatterState.Plasma">
            <summary>
            The state of reacting with itself with some kind of reactant, a high heat state.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumMatterState.BoseEinsteinCondensate">
            <summary>
            The state of becomming Quantum Jelly.
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.CombustibleProperties">
            <summary>
            Used for an items combustible value
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.BurnTemperature">
            <summary>
            The temperature at which it burns
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.BurnDuration">
            <summary>
            For how long it burns
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.HeatResistance">
            <summary>
            How many degrees celsius it can resists before it ignites
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.MeltingPoint">
            <summary>
            How many degrees celsius it takes to smelt/transform this into another. Only used when put in a stove and Melted is set 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.MaxTemperature">
            <summary>
            If there is a melting point, the max temperature it can reach. Set to 0 for no limit 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.MeltingDuration">
            <summary>
            For how many seconds the temperature has to be above the melting point until the item is smelted
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.SmokeLevel">
            <summary>
            How much smoke this item produces when being used as fuel
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.SmeltedRatio">
            <summary>
            How many ores are required to produce one output stack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.SmeltingType">
            <summary>
            Used for correct naming in the tool tip
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.SmeltedStack">
            <summary>
            If set, the block/item is smeltable in a furnace and this is the resulting itemstack once the MeltingPoint has been reached for the supplied duration.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CombustibleProperties.RequiresContainer">
            <summary>
            If true (default) a container is required to smelt this item. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CombustibleProperties.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.GridRecipe">
            <summary>
            Represents a crafting recipe
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Enabled">
            <summary>
            Set by the recipe loader during json deserialization, if false the recipe will never be loaded.
            If loaded however, you can use this field to disable recipes during runtime.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.IngredientPattern">
            <summary>
            The pattern of the ingredient. Order for a 3x3 recipe: 
            1 2 3
            4 5 6
            7 8 9
            Order for a 2x2 recipe:
            1 2
            3 4
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Ingredients">
            <summary>
            The recipes ingredients in any order
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Width">
            <summary>
            Required grid width for crafting this recipe 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Height">
            <summary>
            Required grid height for crafting this recipe 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Output">
            <summary>
            The resulting Stack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Shapeless">
            <summary>
            Whether the order of input items should be respected
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Name">
            <summary>
            Name of the recipe, optional
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.Attributes">
            <summary>
            Optional attributes
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.GridRecipe.RequiresTrait">
            <summary>
            If set only players with given trait can use this recipe
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.ResolveIngredients(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Turns Ingredients into IItemStacks
            </summary>
            <param name="world"></param>
            <returns>True on successful resolve</returns>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.GetNameToCodeMapping(Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Resolves Wildcards in the ingredients
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.ConsumeInput(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemSlot[],System.Int32)">
            <summary>
            Puts the crafted itemstack into the output slot and 
            consumes the required items from the input slots
            </summary>
            <param name="inputSlots"></param>
            <param name="world"></param>
            <param name="byPlayer"></param>
            <param name="gridWidth"></param>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.Matches(Vintagestory.API.Common.IPlayer,Vintagestory.API.Common.ItemSlot[],System.Int32)">
            <summary>
            Check if this recipe matches given ingredients
            </summary>
            <param name="forPlayer">The player for trait testing. Can be null.</param>
            <param name="ingredients"></param>
            <param name="gridWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.ToBytes(System.IO.BinaryWriter)">
            <summary>
            Serialized the recipe
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IWorldAccessor)">
            <summary>
            Deserializes the recipe
            </summary>
            <param name="reader"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.GridRecipe.Clone">
            <summary>
            Creates a deep copy
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.CraftingRecipeIngredient">
            <summary>
            A crafting recipe ingredient
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.Type">
            <summary>
            Item or Block
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.CraftingRecipeIngredient.Code">
            <summary>
            Code of the item or block
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.CraftingRecipeIngredient.Name">
            <summary>
            Name of the class, used for filling placeholders in the output stack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.Quantity">
            <summary>
            How much input items are required
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.Attributes">
            <summary>
            What attributes this itemstack must have
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.IsTool">
            <summary>
            Whether this crafting recipe ingredient should be regarded as a tool required to build this item.
            If true, the recipe will not consume the item but reduce its durability.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.ToolDurabilityCost">
            <summary>
            If IsTool is set, this is the durability cost
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.AllowedVariants">
            <summary>
            When using a wildcard in the item/block code, setting this field will limit the allowed variants
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.ReturnedStack">
            <summary>
            If set, the crafting recipe will give back the consumed stack to be player upon crafting
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.ResolvedItemstack">
            <summary>
            The itemstack made from Code, Quantity and Attributes, populated by the engine
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.CraftingRecipeIngredient.IsWildCard">
            <summary>
            Whether this recipe contains a wildcard, populated by the engine
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.CraftingRecipeIngredient.Resolve(Vintagestory.API.Common.IWorldAccessor,System.String)">
            <summary>
            Turns Type, Code and Attributes into an IItemStack
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Vintagestory.API.Common.CraftingRecipeIngredient.SatisfiesAsIngredient(Vintagestory.API.Common.ItemStack)">
            <summary>
            Checks whether or not the input satisfies as an ingredient for the recipe.
            </summary>
            <param name="inputStack"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.CraftingRecipeIngredient.FillPlaceHolder(System.String,System.String)">
            <summary>
            Fills in the placeholder ingredients for the crafting recipe.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Vintagestory.API.Common.Item">
            <summary>
            Represents an in game Item of Vintage Story
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Item.Id">
            <summary>
            The unique number of the item, dynamically assigned by the game
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Item.ItemClass">
            <summary>
            The type of the collectible object
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Item.ItemId">
            <summary>
            The unique number of the item, dynamically assigned by the game
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Item.Shape">
            <summary>
            The items shape. Null for automatic shape based on the texture.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.Item.Textures">
            <summary>
            Default textures to be used for this block
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.Item.FirstTexture">
            <summary>
            Returns the first texture in Textures
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Item.#ctor">
            <summary>
            Instantiate a new item with default model transforms
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.Item.#ctor(System.Int32)">
            <summary>
            Instantiates a new item with given item id and stacksize = 1
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Vintagestory.API.Common.Item.GetRandomColor(Vintagestory.API.Client.ICoreClientAPI,Vintagestory.API.Common.ItemStack)">
            <summary>
            Should return a random pixel within the items/blocks texture
            </summary>
            <param name="world"></param>
            <param name="pos"></param>
            <param name="facing"></param>
            <param name="tintIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.Item.Clone">
            <summary>
            Creates a deep copy of the item
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.OnInventorySlot">
            <summary>
            Return false to stop walking the inventory
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActionConsumable`1">
            <summary>
            Return true if the action/event should be "consumed" (e.g. mark a mouse click as handled)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t1"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActionConsumable">
            <summary>
            Return true if the action/event should be "consumed" (e.g. mark a mouse click as handled)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActionBoolReturn">
            <summary>
            Return true if the action/event was successfull
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActionBoolReturn`1">
            <summary>
            Returns true if the action/event was successfull.
            </summary>
            <typeparam name="T">The additional type to pass in.</typeparam>
            <param name="t">The arguments for the event.</param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ActionConsumable`2">
            <summary>
            Return true if the action/event should be "consumed" (e.g. mark a mouse click as handled)
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.Action">
            <summary>
            A parameterless method
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.PlayerChatDelegate">
            <summary>
            When the player wrote a chat message. Set consumed.value to true to prevent further processing of this chat message
            </summary>
            <param name="byPlayer">The player that submitted the chat message</param>
            <param name="channelId">The chat group id from where the message was sent from</param>
            <param name="message">The chat message</param>
            <param name="consumed">If set, the even is considered consumed, i.e. should no longer be handled further by the game engine</param>
            <param name="data"></param>
            <returns>The resulting string.</returns>
        </member>
        <member name="T:Vintagestory.API.Common.PlayerDeathDelegate">
            <summary>
            When the player died, this delegate will fire.
            </summary>
            <param name="byPlayer">The player that died.</param>
            <param name="damageSource">The source of the damage.</param>
        </member>
        <member name="T:Vintagestory.API.Common.DialogClickDelegate">
            <summary>
            The delegate for a dialogue click.
            </summary>
            <param name="byPlayer">The player that clicked the dialogue.</param>
            <param name="widgetId">The internal name of the Widget.</param>
        </member>
        <member name="T:Vintagestory.API.Common.BlockDropItemStack">
            <summary>
            Represents an itemstack that is dropped by chance when breaking a block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Type">
            <summary>
            Block or Item?
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Code">
            <summary>
            Code of the block or item
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Quantity">
            <summary>
            Quantity to be dropped
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Attributes">
            <summary>
            Tree Attributes that should be attached to the resulting itemstack
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.LastDrop">
            <summary>
            If true and the quantity dropped is >=1 any subsequent drop will be ignored
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.Tool">
            <summary>
            If not null then given tool is required to break this block
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.ResolvedItemstack">
            <summary>
            The resulting ItemStack for this block being broken by a tool.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockDropItemStack.DropModbyStat">
            <summary>
            If set, the drop quantity will be modified by the collecting entity stat code - entity.Stats.GetBlended(code)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockDropItemStack.Resolve(Vintagestory.API.Common.IWorldAccessor,System.String)">
            <summary>
            Sets itemstack.block or itemstack.item
            </summary>
            <param name="resolver"></param>
            <param name="sourceForErrorLogging"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockDropItemStack.GetNextItemStack(System.Single)">
            <summary>
            Returns an itemstack with random quantity as configured via the Quantity field
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockDropItemStack.Clone">
            <summary>
            Creates a deep copy of this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockDropItemStack.FromBytes(System.IO.BinaryReader,Vintagestory.API.Common.IClassRegistryAPI)">
            <summary>
            Reads the contents of the block bytes and converts it into a block.
            </summary>
            <param name="reader">The reader of the block</param>
            <param name="instancer">The block registry</param>
        </member>
        <member name="M:Vintagestory.API.Common.BlockDropItemStack.ToBytes(System.IO.BinaryWriter)">
            <summary>
            The save data writer.
            </summary>
            <param name="writer">The writer to write blocks to.</param>
        </member>
        <member name="F:Vintagestory.API.Common.FoodNutritionProperties.FoodCategory">
            <summary>
            The category of the food.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.FoodNutritionProperties.Satiety">
            <summary>
            The saturation restored by the food.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.FoodNutritionProperties.SaturationLossDelay">
            <summary>
            The delay before that extra saturation starts to go away.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.FoodNutritionProperties.Health">
            <summary>
            The health restored by the food.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.FoodNutritionProperties.EatenStack">
            <summary>
            The item that was eaten.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.FoodNutritionProperties.Clone">
            <summary>
            Duplicates the nutrition properties, which includes cloning the stack that was eaten.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ModSystem">
            <summary>
            Base of a system, which is part of a code mod. Takes care of setting up,
            registering and handling all sorts of things. You may choose to split up
            a mod into multiple distinct systems if you so choose, but there may
            also be just one.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModSystem.Mod">
            <summary>
            Gets the <see cref="T:Vintagestory.API.Common.Mod"/> this mod system is part of.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.ShouldLoad(Vintagestory.API.Common.EnumAppSide)">
            <summary>
            Returns if this mod should be loaded for the given app side.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.ExecuteOrder">
            <summary>
            If you need mods to be executed in a certain order, adjust this methods return value.
            The server will call each Mods Start() method the ascending order of each mods execute order value. And thus, as long as every mod registers it's event handlers in the Start() method, all event handlers will be called in the same execution order.
            Default execute order of some survival mod parts
            Worldgen:
            - GenTerra: 0 
            - RockStrata: 0.1
            - Deposits: 0.2
            - Caves: 0.3
            - Blocklayers: 0.4
            Asset Loading
            - Json Overrides loader: 0.05
            - Load hardcoded mantle block: 0.1
            - Block and Item Loader: 0.2
            - Recipes (Smithing, Knapping, Clayforming, Grid recipes, Alloys) Loader: 1
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Common.ModSystem.AllowRuntimeReload">
            <summary>
            When the server reloads mods at runtime, should this mod also be reloaded. Return false e.g. for any mod that adds blocks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.StartPre(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Called during intial mod loading, called before any mod receives the call to Start()
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.Start(Vintagestory.API.Common.ICoreAPI)">
            <summary>
            Side agnostic Start method, called after all mods received a call to StartPre().
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.StartClientSide(Vintagestory.API.Client.ICoreClientAPI)">
            <summary>
            Minor convenience method to save yourself the check for/cast to ICoreClientAPI in Start()
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.StartServerSide(Vintagestory.API.Server.ICoreServerAPI)">
            <summary>
            Minor convenience method to save yourself the check for/cast to ICoreServerAPI in Start()
            </summary>
            <param name="api"></param>
        </member>
        <member name="M:Vintagestory.API.Common.ModSystem.Dispose">
            <summary>
            If this mod allows runtime reloading, you must implement this method to unregister any listeners / handlers
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModelTransform">
            <summary>
            Used for transformations applied to a block or item model
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.Translation">
            <summary>
            Offsetting
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.Rotation">
            <summary>
            Rotation in degrees
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModelTransform.Scale">
            <summary>
            To set uniform Scaling on all Axes
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.Origin">
            <summary>
            Rotation/Scaling Origin
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.Rotate">
            <summary>
            For Gui Transform: Whether to slowly spin in gui item preview 
            For Ground Transform: Whether to apply a random rotation to the dropped item
            No effect on other transforms
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModelTransform.ScaleXYZ">
            <summary>
            Scaling per axis
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModelTransform.NoTransform">
            <summary>
            Gets a new model with all values set to default.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModelTransform.AsMatrix">
            <summary>
            Converts the transform into a matrix.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.BlockDefaultGui">
            <summary>
            Scale = 1, No Translation, Rotation by -45 deg in Y-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.BlockDefaultFp">
            <summary>
            Scale = 1, No Translation, Rotation by -45 deg in Y-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.BlockDefaultTp">
            <summary>
            Scale = 1, No Translation, Rotation by -45 deg in Y-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.BlockDefaultGround">
            <summary>
            Scale = 1, No Translation, Rotation by -45 deg in Y-Axis, 1.5x scale
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.ItemDefaultGui">
            <summary>
            Scale = 1, No Translation, No Rotation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.ItemDefaultFp">
            <summary>
            Scale = 1, No Translation, Rotation by 180 deg in X-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.ItemDefaultTp">
            <summary>
            Scale = 1, No Translation, Rotation by 180 deg in X-Axis
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.ItemDefaultGround">
            <summary>
            Creates a default transform for a model that is now on the ground
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.EnsureDefaultValues">
            <summary>
            Makes sure that Translation and Rotation is not null
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.Clone">
            <summary>
            Clones this specific transform.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.ModelTransform.Clear">
            <summary>
            Clears the transformation values.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.PlayerGroupMembership.Level">
            <summary>
            The member ship level in this group
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.PlayerGroupMembership.GroupName">
            <summary>
            The last known group name 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.PlayerGroupMembership.GroupUid">
            <summary>
            The group id
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.WeightedSlot.slot">
            <summary>
            The slot that is weighted.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.WeightedSlot.weight">
            <summary>
            The weight of the slot.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.BlockSounds.ByTool">
            <summary>
            Gets the sound that occurs when a specific tool hits a block.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSounds.Clone">
            <summary>
            Clones the block sounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSounds.GetBreakSound(Vintagestory.API.Common.IPlayer)">
            <summary>
            Gets the breaking sound, either provided by the tool or by this sound.
            </summary>
            <param name="byPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSounds.GetHitSound(Vintagestory.API.Common.IPlayer)">
            <summary>
            Gets the hit sound either provided by the tool or by the block.
            </summary>
            <param name="byPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSounds.GetBreakSound(Vintagestory.API.Common.EnumTool)">
            <summary>
            Gets the break sound either by the tool or by the block if the tool does not have a break sound.
            </summary>
            <param name="tool">The Tool used.</param>
            <returns>The resulting sound</returns>
        </member>
        <member name="M:Vintagestory.API.Common.BlockSounds.GetHitSound(Vintagestory.API.Common.EnumTool)">
            <summary>
            Gets the hit sound either by the tool or by the block if the tool does not have a hit sound.
            </summary>
            <param name="tool"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.EnumModType">
            <summary>
            Describes the type of a mod. Allows easy recognition and limiting of
            what any particular mod can do.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumModType.Theme">
            <summary>
            Makes only theme changes (texture, shape, sound, music) to existing
            game or mod assets / content without adding new content or code.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumModType.Content">
            <summary>
            Can modify any existing assets, or add new content, but no code.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.EnumModType.Code">
            <summary>
            Can modify existing assets, add new content and make use of C#
            source files (.cs) and pre-compiled assemblies (.dll).
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModInfo">
            <summary>
            Meta data for a specific mod folder, archive, source file or assembly.
            Either loaded from a "modinfo.json" or from the assembly's
            <see cref="T:Vintagestory.API.Common.ModInfoAttribute"/>.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModInfo.Type">
            <summary> The type of this mod. Can be "Theme", "Content" or "Code". </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModInfo.TextureSize">
            <summary>
            If the mod is a texture pack that changes topsoil grass textures, define the texture size here
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModInfo.Name">
            <summary> The name of this mod. For example "My Example Mod". </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.ModID">
            <summary>
            The mod id (domain) of this mod. For example "myexamplemod".
            (Optional. Uses mod name (converted to lowercase, stripped of
            whitespace and special characters) if missing.)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModInfo.Version">
            <summary> The version of this mod. For example "2.10.4". (optional) </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModInfo.NetworkVersion">
            <summary>
            The network version of this mod. Change this number when a user that has an older version of your mod should not be allowed to connected to server with a newer version. If not set, the version value is used.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModInfo.Description">
            <summary> A short description of what this mod does. (optional) </summary>
        </member>
        <member name="F:Vintagestory.API.Common.ModInfo.Website">
            <summary> Location of the website or project site of this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Authors">
            <summary> Names of people working on this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Contributors">
            <summary> Names of people contributing to this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Side">
            <summary>
            Which side(s) this mod runs on. Can be "Server", "Client" or "Universal".
            (Optional. Universal (both server and client) by default.)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.RequiredOnClient">
            <summary>
            If set to false and the mod is universal, clients don't need the mod
            to join. (Optional. True by default.)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.RequiredOnServer">
            <summary>
            If set to false and the mod is universal, the mod is not disabled
            if it's not present on the server. (Optional. True by default.)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfo.Dependencies">
            <summary> List of mods (and versions) this mod depends on. </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModInfo.ToModID(System.String)">
            <summary>
            Attempts to convert the specified mod name to a mod ID, stripping any
            non-alphanumerical (including spaces and dashes) and lowercasing letters.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModInfo.IsValidModID(System.String)">
             <summary>
             Returns whether the specified domain is valid.
            
             Tests if the string is non-null, has a length of at least 1, starts with
             a basic lowercase letter and contains only lowercase letters and numbers.
             </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModInfoAttribute">
            <summary>
            Applied to a mod assembly to provide additional meta data information
            about a code mod. Superseded by "modinfo.json" file, if available.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Name">
            <summary> The name of this mod. For example "My Example Mod". </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.ModID">
            <summary> The mod ID (domain) of this mod. For example "myexamplemod". </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Version">
            <summary> The version of this mod. For example "2.10.4". (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.NetworkVersion">
            <summary>
            The network version of this mod. Change this number when a user that has an older version of your mod should not be allowed to connected to server with a newer version. If not set, the version value is used.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Description">
            <summary> A short description of what this mod does. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Website">
            <summary> Location of the website or project site of this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Authors">
            <summary> Names of people working on this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Contributors">
            <summary> Names of people contributing to this mod. (optional) </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.Side">
            <summary>
            Which side(s) this mod runs on. Can be "Server", "Client" or "Universal".
            (Optional. Universal (both server and client) by default.)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.RequiredOnClient">
            <summary>
            If set to false and the mod is universal, clients don't need it to join.
            (Optional. True (required) by default.)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModInfoAttribute.RequiredOnServer">
            <summary>
            If set to false and the mod is universal, the mod is not disabled
            if it's not present on the server. (Optional. True by default.)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Common.ModDependency">
            <summary>
            Represents a mod dependency requirement of one mod for another.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModDependency.ModID">
            <summary> The required mod id (domain) of this dependency. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModDependency.Version">
            <summary>
            The minimum version requirement of this dependency.
            May be empty if the no specific version is required.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Common.ModDependency.#ctor(System.String,System.String)">
            <summary>
            Creates a new ModDependancy object.
            </summary>
            <param name="modID">The ID of the required mod.</param>
            <param name="version">The version of the required mod (default: empty string.)</param>
        </member>
        <member name="M:Vintagestory.API.Common.ModDependency.ToString">
            <summary>
            Returns the Mod Dependancy as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Common.ModDependencyAttribute">
            <summary>
            Applied to a mod assembly multiple times for each required dependency.
            Superseded by this mod's "modinfo.json" file, if available.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModDependencyAttribute.ModID">
            <summary> The required mod id (domain) of this dependency. </summary>
        </member>
        <member name="P:Vintagestory.API.Common.ModDependencyAttribute.Version">
            <summary>
            The minimum version requirement of this dependency.
            May be empty if the no specific version is required.
            </summary>
        </member>
        <member name="T:Vintagestory.API.FloatDataMap3D">
            <summary>
            A datastructure to hold 3 dimensional data in the form of floats 
            Can be used to perfrom trilinear interpolation between individual values
            </summary>
        </member>
        <member name="T:Vintagestory.API.Datastructures.FastList`1">
            <summary>
            Does not clear elements in Clear(), but only sets the Count to 0
            </summary>
            <typeparam name="TElem"></typeparam>
        </member>
        <member name="P:Vintagestory.API.Datastructures.RingArray`1.Length">
            <summary>
            Total size of the stack
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.RingArray`1.Add(`0)">
            <summary>
            Pushes an element onto the end of the queue
            </summary>
            <param name="elem"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.RingArray`1.Clear">
            <summary>
            Wipes the buffer and resets the count
            </summary>
        </member>
        <member name="F:Vintagestory.API.Datastructures.SyncedTreeAttribute.allDirty">
            <summary>
            Whole tree will be resent
            </summary>
        </member>
        <member name="F:Vintagestory.API.Datastructures.SyncedTreeAttribute.attributePathsDirty">
            <summary>
            Subtrees will be resent
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.SyncedTreeAttribute.MarkAllDirty">
            <summary>
            Marks the whole attribute tree as dirty, so that it will be resent to all connected clients. Does not trigger modified listeners (because it makes no sense and breaks things)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.SyncedTreeAttribute.MarkPathDirty(System.String)">
            <summary>
            Marks part of the attribute tree as dirty, allowing for a partial update of the attribute tree.
            Has no effect it the whole tree is already marked dirty. If more than 5 paths are marked dirty it will wipe the list of dirty paths and just marked the whole tree as dirty
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Vintagestory.API.Datastructures.TreeAttribute">
            <summary>
            A datastructure to hold generic data for most primitives (int, string, float, etc.). But can also hold generic data using the ByteArrayAttribute + class serialization
            </summary>
        </member>
        <member name="P:Vintagestory.API.Datastructures.TreeAttribute.Item(System.String)">
            <summary>
            Will return null if given attribute does not exist
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Datastructures.TreeAttribute.Count">
            <summary>
            Amount of elements in this Tree attribute
            </summary>
        </member>
        <member name="P:Vintagestory.API.Datastructures.TreeAttribute.Values">
            <summary>
            Returns all values inside this tree attributes
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.HasAttribute(System.String)">
            <summary>
            True if this attribute exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.SetBool(System.String,System.Boolean)">
            <summary>
            Creates a bool attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.SetInt(System.String,System.Int32)">
            <summary>
            Creates an int attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.SetLong(System.String,System.Int64)">
            <summary>
            Creates a long attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.SetDouble(System.String,System.Double)">
            <summary>
            Creates a double attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.SetFloat(System.String,System.Single)">
            <summary>
            Creates a float attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.SetBytes(System.String,System.Byte[])">
            <summary>
            Creates a byte[] attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.SetItemstack(System.String,Vintagestory.API.Common.ItemStack)">
            <summary>
            Sets given item stack with given key
            </summary>
            <param name="key"></param>
            <param name="itemstack"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.TryGetBool(System.String)">
            <summary>
            Retrieves a bool or null if the key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.TryGetDouble(System.String)">
            <summary>
            Retrieves a double or null if key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.TryGetFloat(System.String)">
            <summary>
            Retrieves a float or null if the key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetBool(System.String,System.Boolean)">
            <summary>
            Retrieves a bool or default value if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetInt(System.String,System.Int32)">
            <summary>
            Retrieves an int or default value if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetDecimal(System.String,System.Double)">
            <summary>
            Retrieves an int, float, long or double value. Whatever attribute is found for given key
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetDouble(System.String,System.Double)">
            <summary>
            Retrieves a double or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetFloat(System.String,System.Single)">
            <summary>
            Retrieves a float or defaultvalue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetString(System.String,System.String)">
            <summary>
            Retrieves a string or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetStringArray(System.String,System.String[])">
            <summary>
            Retrieves a string or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetBytes(System.String,System.Byte[])">
            <summary>
            Retrieves a byte array or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetTreeAttribute(System.String)">
            <summary>
            Retrieves an attribute tree or null if key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetOrAddTreeAttribute(System.String)">
            <summary>
            Retrieves an attribute tree or adds it if key is not found.
            Throws an exception if the key does exist but is not a tree.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetItemstack(System.String,Vintagestory.API.Common.ItemStack)">
            <summary>
            Retrieves an itemstack or defaultValue if key is not found. Be sure to call stack.ResolveBlockOrItem() after retrieving it.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.GetLong(System.String,System.Int64)">
            <summary>
            Retrieves a long or default value if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.TryGetLong(System.String)">
            <summary>
            Retrieves a long or null value if key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.Clone">
            <summary>
            Creates a deep copy of the attribute tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.IsSubSetOf(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Datastructures.IAttribute)">
            <summary>
            Returns true if given tree contains all of elements of this one, but given tree may contain also more elements. Individual node values are exactly matched.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.Equals(Vintagestory.API.Common.IWorldAccessor,Vintagestory.API.Datastructures.IAttribute)">
            <summary>
            Returns true if given tree exactly matches this one
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.TreeAttribute.MergeTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Merges trees (it will overwrite existing values)
            </summary>
            <param name="tree"></param>
        </member>
        <member name="T:Vintagestory.API.Datastructures.IAttribute">
            <summary>
            An attribute from an attribute tree
            </summary>
        </member>
        <member name="T:Vintagestory.API.Datastructures.ITreeAttribute">
            <summary>
            Represents a List of nestable Attributes
            </summary>
        </member>
        <member name="P:Vintagestory.API.Datastructures.ITreeAttribute.Item(System.String)">
            <summary>
            Will return null if given attribute does not exist
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Datastructures.ITreeAttribute.Count">
            <summary>
            Amount of elements in this Tree attribute
            </summary>
        </member>
        <member name="P:Vintagestory.API.Datastructures.ITreeAttribute.Values">
            <summary>
            Returns all values inside this tree attributes
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.HasAttribute(System.String)">
            <summary>
            True if this attribute exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetBool(System.String,System.Boolean)">
            <summary>
            Creates a bool attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetInt(System.String,System.Int32)">
            <summary>
            Creates an int attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetLong(System.String,System.Int64)">
            <summary>
            Creates a long attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetDouble(System.String,System.Double)">
            <summary>
            Creates a double attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetFloat(System.String,System.Single)">
            <summary>
            Creates a float attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetString(System.String,System.String)">
            <summary>
            Creates a string attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetBytes(System.String,System.Byte[])">
            <summary>
            Creates a byte[] attribute with given key and value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.SetItemstack(System.String,Vintagestory.API.Common.ItemStack)">
            <summary>
            Sets given item stack with given key
            </summary>
            <param name="key"></param>
            <param name="itemstack"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.TryGetBool(System.String)">
            <summary>
            Retrieves a bool or null if the key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetBool(System.String,System.Boolean)">
            <summary>
            Retrieves a bool or default value if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.TryGetInt(System.String)">
            <summary>
            Retrieves an int or null if the key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetInt(System.String,System.Int32)">
            <summary>
            Retrieves an int or default value if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetDecimal(System.String,System.Double)">
            <summary>
            Retrieves an int, float, long or double value. Whatever attribute is found for given key
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.TryGetLong(System.String)">
            <summary>
            Retrieves a long or null value if key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetLong(System.String,System.Int64)">
            <summary>
            Retrieves a long or default value if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.TryGetFloat(System.String)">
            <summary>
            Retrieves a float or null if the key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetFloat(System.String,System.Single)">
            <summary>
            Retrieves a float or defaultvalue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.TryGetDouble(System.String)">
            <summary>
            Retrieves a double or null if key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetDouble(System.String,System.Double)">
            <summary>
            Retrieves a double or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetString(System.String,System.String)">
            <summary>
            Retrieves a string or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetBytes(System.String,System.Byte[])">
            <summary>
            Retrieves a byte array or defaultValue if key is not found
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetItemstack(System.String,Vintagestory.API.Common.ItemStack)">
            <summary>
            Retrieves an itemstack or defaultValue if key is not found. Be sure to call stack.ResolveBlockOrItem() after retrieving it.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetTreeAttribute(System.String)">
            <summary>
            Retrieves an attribute tree or null if key is not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.GetOrAddTreeAttribute(System.String)">
            <summary>
            Retrieves an attribute tree or adds it if key is not found.
            Throws an exception if the key does exist but is not a tree.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.Clone">
            <summary>
            Creates a deep copy of the attribute tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.ITreeAttribute.MergeTree(Vintagestory.API.Datastructures.ITreeAttribute)">
            <summary>
            Merges trees (it will overwrite existing values)
            </summary>
            <param name="tree"></param>
        </member>
        <member name="T:Vintagestory.API.Datastructures.IOrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
        </member>
        <member name="T:Vintagestory.API.Datastructures.LimitedList`1">
            <summary>
            Holds a limited amount of items, discards the lowest index item when an overflow happens
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.LimitedList`1.#ctor(System.Int32)">
            <summary>
            Create a new list with a given maximum capacity
            </summary>
            <param name="maxCapacity"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.LimitedList`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new list with a given maximum capacity
            </summary>
            <param name="maxCapacity"></param>
        </member>
        <member name="T:Vintagestory.API.Datastructures.OrderedDictionary`2">
            <summary>
            Same as your normal C# Dictionary but ensures that the order in which the items are added is remembered. That way you can iterate over the dictionary with the insert order intact or set/get elements by index.
            Taken from http://www.codeproject.com/Articles/18615/OrderedDictionary-T-A-generic-implementation-of-IO
            Please be aware that this is not a very efficient implementation, recommed use only for small sets of data.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Vintagestory.API.Datastructures.OrderedDictionary`2.IndexOfKey(`0)">
            <summary>
            Returns -1 if the key was not found
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Datastructures.UniqueQueue`1">
            <summary>
            Same as your normal c# queue but ensures that every element is contained only once using a Hashset.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Vintagestory.API.Datastructures.UniqueQueue`1.Count">
            <summary>
            Amount of elements in the queue
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Clear">
            <summary>
            Emptys the queue and the hashset
            </summary>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Contains(`0)">
            <summary>
            Check if given item is contained. Uses the hashset to find the item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the queue
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Dequeue">
            <summary>
            Removes an item from the queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Datastructures.UniqueQueue`1.Peek">
            <summary>
            Returns the first item in the queue without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Datastructures.LimitedDictionary`2">
            <summary>
            Can only hold a limited amount of elements, discards oldest elements once the capacity is reached.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Vintagestory.API.Datastructures.LimitedDictionary`2.#ctor(System.Int32)">
            <summary>
            Create a new limited dictionary with given maximum capacity
            </summary>
            <param name="maxCapacity"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.RotationTo(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.SetAxes(System.Single[],System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.CloneIt(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.FromValues(System.Single,System.Single,System.Single,System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Copy(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Set(System.Single[],System.Single,System.Single,System.Single,System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Identity_(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.SetAxisAngle(System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Add(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Multiply(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Mul(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Scale(System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.RotateX(System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.RotateY(System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.RotateZ(System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.CalculateW(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Dot(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Lerp(System.Single[],System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Slerp(System.Single[],System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Invert(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Conjugate(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Length_(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Len(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.SquaredLength(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.SqrLen(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.Normalize(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaternionf.FromMat3(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.CloneIt(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.FromValues(System.Single,System.Single,System.Single,System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Copy(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Set(System.Single[],System.Single,System.Single,System.Single,System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Add(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Subtract(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Sub(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Multiply(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Mul(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Divide(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Div(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Min(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Max(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Scale(System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.ScaleAndAdd(System.Single[],System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Distance(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Dist(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.SquaredDistance(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.SqrDist(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Length_(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Len(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.SquaredLength(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.SqrLen(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Negate(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Normalize(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Dot(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.Lerp(System.Single[],System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.TransformMat4(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4f.transformQuat(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec3Utilsf">
            <summary>
            Don't use this class unless you need it to interoperate with Mat4d
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Create">
            Creates a new, empty vec3
            Returns {vec3} a new 3D vector.
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.CloneIt(System.Single[])">
            Creates a new vec3 initialized with values from an existing vector
            Returns {vec3} a new 3D vector
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.FromValues(System.Single,System.Single,System.Single)">
            Creates a new vec3 initialized with the given values
            Returns {vec3} a new 3D vector
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Copy(System.Single[],System.Single[])">
             Copy the values from one vec3 to another
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Set(System.Single[],System.Single,System.Single,System.Single)">
            Set the components of a vec3 to the given values
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Add(System.Single[],System.Single[],System.Single[])">
            Adds two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Substract(System.Single[],System.Single[],System.Single[])">
            Subtracts vector b from vector a
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Sub(System.Single[],System.Single[],System.Single[])">
            Alias for {@link vec3.subtract}
            @function
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Multiply(System.Single[],System.Single[],System.Single[])">
            Multiplies two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Mul(System.Single[],System.Single[],System.Single[])">
            Alias for {@link vec3.multiply}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Divide(System.Single[],System.Single[],System.Single[])">
            Divides two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Div(System.Single[],System.Single[],System.Single[])">
            Alias for {@link vec3.divide}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Min(System.Single[],System.Single[],System.Single[])">
            Returns the minimum of two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Max(System.Single[],System.Single[],System.Single[])">
            Returns the maximum of two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Scale(System.Single[],System.Single[],System.Single)">
            Scales a vec3 by a scalar number
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.ScaleAndAdd(System.Single[],System.Single[],System.Single[],System.Single)">
            Adds two vec3's after scaling the second operand by a scalar value
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Distance(System.Single[],System.Single[])">
            Calculates the euclidian distance between two vec3's
            @returns {Number} distance between a and b
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Dist(System.Single[],System.Single[])">
            Alias for {@link vec3.distance}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.SquaredDistance(System.Single[],System.Single[])">
            Calculates the squared euclidian distance between two vec3's
            @returns {Number} squared distance between a and b
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.SqrDist(System.Single[],System.Single[])">
            Alias for {@link vec3.squaredDistance}
            @function
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Length_(System.Single[])">
            Calculates the length of a vec3
            @returns {Number} length of a
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Len(System.Single[])">
            Alias for {@link vec3.length}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.SquaredLength(System.Single[])">
            Calculates the squared length of a vec3
            @returns {Number} squared length of a
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.SqrLen(System.Single[])">
            Alias for {@link vec3.squaredLength}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Negate(System.Single[],System.Single[])">
            Negates the components of a vec3
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Normalize(System.Single[],System.Single[])">
            Normalize a vec3
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Dot(System.Single[],System.Single[])">
            Calculates the dot product of two vec3's
            @returns {Number} dot product of a and b
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Cross(System.Single[],System.Single[],System.Single[])">
            Computes the cross product of two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.Lerp(System.Single[],System.Single[],System.Single[],System.Single)">
            Performs a linear interpolation between two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.TransformMat3(System.Single[],System.Single[],System.Single[])">
            Transforms the vec3 with a mat3.
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsf.TransformQuat(System.Single[],System.Single[],System.Single[])">
            Transforms the vec3 with a quat
            @returns {vec3} out
        </member>
        <member name="T:Vintagestory.API.MathTools.FastVec3f">
            <summary>
            Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.FastVec3f.X">
            <summary>
            The X-Component of the vector
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.FastVec3f.Y">
            <summary>
            The Y-Component of the vector
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.FastVec3f.Z">
            <summary>
            The Z-Component of the vector
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.FastVec3f.R">
            <summary>
            Synonum for X
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.FastVec3f.G">
            <summary>
            Synonum for Y
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.FastVec3f.B">
            <summary>
            Synonum for Z
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.#ctor(Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.#ctor(System.Single[])">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:Vintagestory.API.MathTools.FastVec3f.Item(System.Int32)">
            <summary>
            Returns the n-th coordinate
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Length">
            <summary>
            Returns the length of this vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Dot(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Dot(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Dot(System.Single[])">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Dot(System.Double[])">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds given x/y/z coordinates to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Mul(System.Single)">
            <summary>
            Multiplies each coordinate with given multiplier
            </summary>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Clone">
            <summary>
            Creates a copy of the vetor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Normalize">
            <summary>
            Turns the vector into a unit vector with length 1, but only if length is non-zero
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Distance(Vintagestory.API.MathTools.FastVec3f)">
            <summary>
            Calculates the distance the two endpoints
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.DistanceSq(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the square distance the two endpoints
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Distance(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Calculates the distance the two endpoints
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.AddCopy(System.Single,System.Single,System.Single)">
            <summary>
            Adds given coordinates to a new vectors and returns it. The original calling vector remains unchanged
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.AddCopy(Vintagestory.API.MathTools.FastVec3f)">
            <summary>
            Adds both vectors into a new vector. Both source vectors remain unchanged.
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.ReduceBy(System.Single)">
            <summary>
            Substracts val from each coordinate if the coordinate if positive, otherwise it is added. If 0, the value is unchanged. The value must be a positive number
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.NormalizedCopy">
            <summary>
            Creates a new vectors that is the normalized version of this vector. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.ToVec3d">
            <summary>
            Creates a new double precision vector with the same coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the vector to this coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Set(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Sets the vector to the coordinates of given vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.Set(Vintagestory.API.MathTools.FastVec3f)">
            <summary>
            Sets the vector to the coordinates of given vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.FastVec3f.ToString">
            <summary>
            Simple string represenation of the x/y/z components
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.SimplexNoise">
            <summary>
            OpenSimplex noise of supplied amplitude and frequency. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.SimplexNoise.FromDefaultOctaves(System.Int32,System.Double,System.Double,System.Int64)">
            <summary>
            Generates the octaves and frequencies using following formulas 
            freq[i] = baseFrequency * 2^i
            amp[i] = persistence^i
            </summary>
            <param name="quantityOctaves"></param>
            <param name="baseFrequency"></param>
            <param name="persistence"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.MathTools.Rectanglei.X1">
            <summary>
            Same as X
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Rectanglei.Y1">
            <summary>
            Same as Y
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Rectanglei.X2">
            <summary>
            Same as X + Width
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Rectanglei.Y2">
            <summary>
            Same as Y + Height
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Size2d">
            <summary>
            Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Size2i">
            <summary>
            Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.CollisionTester.IsColliding(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.Vec3d,System.Boolean)">
            <summary>
            Tests given cuboidf collides with the terrain. By default also checks if the cuboid is merely touching the terrain, set alsoCheckTouch to disable that.
            </summary>
            <param name="blockAccessor"></param>
            <param name="entityBoxRel"></param>
            <param name="pos"></param>
            <param name="alsoCheckTouch"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.CollisionTester.GetCollidingCollisionBox(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.Vec3d,System.Boolean)">
            <summary>
            Tests given cuboidf collides with the terrain. By default also checks if the cuboid is merely touching the terrain, set alsoCheckTouch to disable that.
            </summary>
            <param name="blockAccessor"></param>
            <param name="entityBoxRel"></param>
            <param name="pos"></param>
            <param name="alsoCheckTouch"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.CollisionTester.GetCollidingCollisionBox(Vintagestory.API.Common.IBlockAccessor,Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.Vec3d,Vintagestory.API.MathTools.Cuboidd@,System.Boolean)">
            <summary>
            Tests given cuboidf collides with the terrain. By default also checks if the cuboid is merely touching the terrain, set alsoCheckTouch to disable that.
            </summary>
            <param name="blockAccessor"></param>
            <param name="entityBoxRel"></param>
            <param name="pos"></param>
            <param name="alsoCheckTouch"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Crc32Algorithm">
            <summary>
            Implementation of CRC-32.
            This class supports several convenient static methods returning the CRC as UInt32.
            From https://github.com/force-net/Crc32.NET
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintagestory.API.MathTools.Crc32Algorithm"/> class. 
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Append(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes CRC-32 from multiple buffers.
            Call this method multiple times to chain multiple buffers.
            </summary>
            <param name="initial">
            Initial CRC value for the algorithm. It is zero for the first buffer.
            Subsequent buffers should have their initial value set to CRC value returned by previous call to this method.
            </param>
            <param name="input">Input buffer with data to be checksummed.</param>
            <param name="offset">Offset of the input data within the buffer.</param>
            <param name="length">Length of the input data in the buffer.</param>
            <returns>Accumulated CRC-32 of all buffers processed so far.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Append(System.UInt32,System.Byte[])">
            <summary>
            Computes CRC-3C from multiple buffers.
            Call this method multiple times to chain multiple buffers.
            </summary>
            <param name="initial">
            Initial CRC value for the algorithm. It is zero for the first buffer.
            Subsequent buffers should have their initial value set to CRC value returned by previous call to this method.
            </param>
            <param name="input">Input buffer containing data to be checksummed.</param>
            <returns>Accumulated CRC-32 of all buffers processed so far.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Computes CRC-32 from input buffer.
            </summary>
            <param name="input">Input buffer with data to be checksummed.</param>
            <param name="offset">Offset of the input data within the buffer.</param>
            <param name="length">Length of the input data in the buffer.</param>
            <returns>CRC-32 of the data in the buffer.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Compute(System.Byte[])">
            <summary>
            Computes CRC-32 from input buffer.
            </summary>
            <param name="input">Input buffer containing data to be checksummed.</param>
            <returns>CRC-32 of the buffer.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.Initialize">
            <summary>
            Resets internal state of the algorithm. Used internally.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Appends CRC-32 from given buffer
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Crc32Algorithm.HashFinal">
            <summary>
            Computes CRC-32 from <see cref="M:Vintagestory.API.MathTools.Crc32Algorithm.HashCore(System.Byte[],System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Set(`0,`0,`0,`0,`0,`0)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Set(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.IVec3)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Translate(`0,`0,`0)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Translate(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.ContainsOrTouches(`0,`0,`0)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.ContainsOrTouches(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.GrowToInclude(System.Int32,System.Int32,System.Int32)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.GrowToInclude(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.ShortestDistanceFrom(`0,`0,`0)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.ShortestDistanceFrom(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.pushOutX(`1,`0,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.pushOutY(`1,`0,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.pushOutZ(`1,`0,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.RotatedCopy(`0,`0,`0,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.RotatedCopy(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.OffsetCopy(`0,`0,`0)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.OffsetCopy(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ICuboid`2.Clone">
            <summary>
            Creates a copy of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ShapeUtil.GetSquarePointsSortedByMDist(System.Int32)">
            <summary>
            Returns an array of vectors for each point in a square, sorted by manhatten distance to center, exluding the center point
            </summary>
            <param name="halflength"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ShapeUtil.GetHollowSquarePoints(System.Int32)">
            <summary>
            Returns a square outline of given radius (only for odd lengths)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4d.Item(System.Int32)">
            <summary>
            Returns the n-th coordinate
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.R">
            <summary>
            Synonum for X
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.G">
            <summary>
            Synonum for Y
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.B">
            <summary>
            Synonum for Z
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.A">
            <summary>
            Synonum for W
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec4f.Item(System.Int32)">
            <summary>
            Returns the n-th coordinate
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4f.NormalizeXYZ">
            <summary>
            Turns the vector into a unit vector with length 1, but only if length is non-zero
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec4f.LengthXYZ">
            <summary>
            Returns the length of this vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Set(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Set(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.IVec3)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Translate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Translate(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Sub(System.Int32,System.Int32,System.Int32)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Div(System.Int32)">
            <summary>
            Divides the given value to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Sub(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Contains(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Contains(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ContainsOrTouches(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ContainsOrTouches(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ContainsOrTouches(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.GrowToInclude(System.Int32,System.Int32,System.Int32)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.GrowToInclude(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ShortestDistanceFrom(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ShortestDistanceFrom(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.ShortestDistanceFrom(Vintagestory.API.MathTools.Cuboidi)">
            <summary>
            Returns the shortest distance to any point between this and given cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.pushOutX(Vintagestory.API.MathTools.Cuboidi,System.Int32,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.pushOutY(Vintagestory.API.MathTools.Cuboidi,System.Int32,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.pushOutZ(Vintagestory.API.MathTools.Cuboidi,System.Int32,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.RotatedCopy(System.Int32,System.Int32,System.Int32,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.RotatedCopy(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.OffsetCopy(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.OffsetCopy(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Intersects(Vintagestory.API.MathTools.Cuboidi)">
            <summary>
            If the given cuboid intersects with this cubiod
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.IntersectsOrTouches(Vintagestory.API.MathTools.Cuboidi)">
            <summary>
            If the given cuboid intersects  with or is adjacent to this cubiod
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.Clone">
            <summary>
            Creates a copy of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidi.IsAdjacent(Vintagestory.API.MathTools.Cuboidi)">
            <summary>
            Returns true if supplied cuboid is directly adjacent to this one
            </summary>
            <param name="cuboidi"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.LCGRandom">
            <summary>
            An lcg random generator, particularly suitable for worldgen
            See also https://en.wikipedia.org/wiki/Linear_congruential_generator
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.LCGRandom.#ctor(System.Int64)">
            <summary>
            Initialize random with given seed
            </summary>
            <param name="worldSeed"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.LCGRandom.#ctor">
            <summary>
            Initialize random with no seed. Use SetWorldSeed() to initialize
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.LCGRandom.SetWorldSeed(System.Int64)">
            <summary>
            Sets given seed
            </summary>
            <param name="worldSeed"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.LCGRandom.InitPositionSeed(System.Int32,System.Int32)">
            <summary>
            Initializes a position dependent seed, if required
            </summary>
            <param name="xPos"></param>
            <param name="zPos"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.LCGRandom.InitPositionSeed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a position dependent seed, if required
            </summary>
            <param name="xPos"></param>
            <param name="zPos"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.LCGRandom.NextInt(System.Int32)">
            <summary>
            Returns a pseudo random number from 0 - max (excluding max)
            </summary>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.LCGRandom.NextFloat">
            <summary>
            Returns a random number from 0 - 1
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.LCGRandom.NextDouble">
            <summary>
            Returns a random number from 0 - 1
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.EnumAxis">
            <summary>
            Represents an axis in the cartesian coordinate system
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumAxis.X">
            <summary>
            West or East
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumAxis.Y">
            <summary>
            Up or down
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumAxis.Z">
            <summary>
            North or South
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Cuboidd">
            <summary>
            Represents a three dimensional axis-aligned cuboid using two 3d coordinates. Used for collision and selection withes.
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Cuboidd.Width">
            <summary>
            MaxX-MinX
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Cuboidd.Height">
            <summary>
            MaxY-MinY
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Cuboidd.Length">
            <summary>
            MaxZ-MinZ
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Set(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Set(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.IVec3)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Set(Vintagestory.API.MathTools.Cuboidf)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Translate(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ContainsOrTouches(System.Double,System.Double,System.Double)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Contains(System.Double,System.Double,System.Double)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ContainsOrTouches(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.GrowToInclude(System.Int32,System.Int32,System.Int32)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.GrowToInclude(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestDistanceFrom(System.Double,System.Double,System.Double)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestVerticalDistanceFrom(System.Double)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestVerticalDistanceFrom(Vintagestory.API.MathTools.Cuboidd)">
            <summary>
            Returns the shortest vertical distance to any point between this and given cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestVerticalDistanceFrom(Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.Common.Entities.EntityPos)">
            <summary>
            Returns the shortest distance to any point between this and given cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestDistanceFrom(Vintagestory.API.MathTools.Cuboidd)">
            <summary>
            Returns the shortest distance to any point between this and given cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestDistanceFrom(Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the shortest distance to any point between this and given cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestHorizontalDistanceFrom(Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the shortest horizontal distance to any point between this and given cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestHorizontalDistanceFrom(System.Double,System.Double)">
            <summary>
            Returns the shortest horizontal distance to any point between this and given coordinate
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.ShortestDistanceFrom(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.pushOutX(Vintagestory.API.MathTools.Cuboidd,System.Double,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.pushOutY(Vintagestory.API.MathTools.Cuboidd,System.Double,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.pushOutZ(Vintagestory.API.MathTools.Cuboidd,System.Double,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.RotatedCopy(System.Double,System.Double,System.Double,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.RotatedCopy(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.OffsetCopy(System.Double,System.Double,System.Double)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.OffsetCopy(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Intersects(Vintagestory.API.MathTools.Cuboidd)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Intersects(Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.IntersectsOrTouches(Vintagestory.API.MathTools.Cuboidd)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.IntersectsOrTouches(Vintagestory.API.MathTools.Cuboidf,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.IntersectsOrTouches(Vintagestory.API.MathTools.Cuboidf,System.Double,System.Double,System.Double)">
            <summary>
            If the given cuboid intersects with this cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidd.Clone">
            <summary>
            Creates a copy of the cuboid
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Cuboidf">
            <summary>
            Represents a three dimensional axis-aligned cuboid using two 3d coordinates. Used for collision and selection boxes.
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Cuboidf.XSize">
            <summary>
            This is equivalent to width so long as X2 > X1, but could in theory be a negative number if the box has its corners the wrong way around
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Cuboidf.YSize">
            <summary>
            This is equivalent to height so long as Y2 > Y1, but could in theory be a negative number if the box has its corners the wrong way around
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Cuboidf.ZSize">
            <summary>
            This is equivalent to length so long as Z2 > Z1, but could in theory be a negative number if the box has its corners the wrong way around
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Cuboidf.Empty">
            <summary>
            True when all values are 0
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Set(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Set(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.IVec3)">
            <summary>
            Sets the minimum and maximum values of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Translate(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Adds the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Sub(System.Single,System.Single,System.Single)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Sub(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Substractes the given offset to the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Contains(System.Double,System.Double,System.Double)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.ContainsOrTouches(System.Single,System.Single,System.Single)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.ContainsOrTouches(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns if the given point is inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.GrowToInclude(System.Int32,System.Int32,System.Int32)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.GrowToInclude(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Grows the cuboid so that it includes the given block
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.ShortestDistanceFrom(System.Single,System.Single,System.Single)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.ShortestDistanceFrom(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns the shortest distance between given point and any point inside the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.pushOutX(Vintagestory.API.MathTools.Cuboidf,System.Single,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.pushOutY(Vintagestory.API.MathTools.Cuboidf,System.Single,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.pushOutZ(Vintagestory.API.MathTools.Cuboidf,System.Single,Vintagestory.API.MathTools.EnumPushDirection@)">
            <summary>
            Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.RotatedCopy(System.Single,System.Single,System.Single,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.RotatedCopy(Vintagestory.API.MathTools.IVec3,Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.OffsetCopy(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new double precision cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.OffsetCopy(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.OffsetCopyDouble(System.Double,System.Double,System.Double)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.OffsetCopyDouble(Vintagestory.API.MathTools.IVec3)">
            <summary>
            Returns a new cuboid offseted by given position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Clone">
            <summary>
            Creates a copy of the cuboid
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.Default">
            <summary>
            Returns a new cuboid with default size 1 width/height/length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Cuboidf.RoundToFracsOfOne10thousand">
            <summary>
            Makes sure the collisionbox coords are multiples of 0.0001
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec2d">
            <summary>
            Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec2f">
            <summary>
            Represents a vector of 2 floats. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec4i">
            <summary>
            Represents a vector of 4 ints. Go bug Tyron if you need more utility methods in this class.
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Mat22">
            <summary>
            2x2 Matrix
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Create">
            <summary>
            Creates a new identity mat2
            Returns a new 2x2 matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.CloneIt(System.Single[])">
            <summary>
            Creates a new mat2 initialized with values from an existing matrix
            Returns a new 2x2 matrix
            </summary>
            <param name="a">matrix to clone</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Copy(System.Single[],System.Single[])">
            <summary>
            Copy the values from one mat2 to another
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Identity_(System.Single[])">
            <summary>
            Set a mat2 to the identity matrix
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Transpose(System.Single[],System.Single[])">
            <summary>
            Transpose the values of a mat2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Invert(System.Single[],System.Single[])">
            <summary>
            Inverts a mat2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Adjoint(System.Single[],System.Single[])">
            <summary>
            Calculates the adjugate of a mat2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Determinant(System.Single[])">
            <summary>
            Calculates the determinant of a mat2
            Returns determinant of a
            </summary>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Multiply(System.Single[],System.Single[],System.Single[])">
            <summary>
            Multiplies two mat2's
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the first operand</param>
            <param name="b">the second operand</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Mul(System.Single[],System.Single[],System.Single[])">
            <summary>
            Alias for {@link mat2.multiply}
            </summary>
            <param name="output"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Rotate(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a mat2 by the given angle
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to rotate</param>
            <param name="rad">the angle to rotate the matrix by</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat22.Scale(System.Single[],System.Single[],System.Single[])">
            <summary>
            Scales the mat2 by the dimensions in the given vec2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to rotate</param>
            <param name="v">the vec2 to scale the matrix by</param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Mat23">
            <summary>
            2x3 Matrix
            * A mat2d contains six elements defined as:
            * <pre>
            * [a, b,
            *  c, d,
            *  tx,ty]
            * </pre>
            * This is a short form for the 3x3 matrix:
            * <pre>
            * [a, b, 0
            *  c, d, 0
            *  tx,ty,1]
            * </pre>
            * The last column is ignored so the array is shorter and operations are faster.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Create">
            <summary>
            Creates a new identity mat2d
            Returns a new 2x3 matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.CloneIt(System.Single[])">
            <summary>
            Creates a new mat2d initialized with values from an existing matrix
            Returns a new 2x3 matrix
            </summary>
            <param name="a">matrix to clone</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Copy(System.Single[],System.Single[])">
            <summary>
            Copy the values from one mat2d to another
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Identity_(System.Single[])">
            <summary>
            Set a mat2d to the identity matrix
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Invert(System.Single[],System.Single[])">
            <summary>
            Inverts a mat2d
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Determinant(System.Single[])">
            <summary>
            Calculates the determinant of a mat2d
            Returns determinant of a
            </summary>
            <param name="a">the source matrix</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Multiply(System.Single[],System.Single[],System.Single[])">
            <summary>
            Multiplies two mat2d's
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the first operand</param>
            <param name="b">the second operand</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Mul(System.Single[],System.Single[],System.Single[])">
            <summary>
            Alias for {@link mat2d.multiply} @function
            </summary>
            <param name="output"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Rotate(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a mat2d by the given angle
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to rotate</param>
            <param name="rad">the angle to rotate the matrix by</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Scale(System.Single[],System.Single[],System.Single[])">
            <summary>
            Scales the mat2d by the dimensions in the given vec2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to translate</param>
            <param name="v">the vec2 to scale the matrix by</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat23.Translate(System.Single[],System.Single[],System.Single[])">
            <summary>
            Translates the mat2d by the dimensions in the given vec2
            Returns output
            </summary>
            <param name="output">the receiving matrix</param>
            <param name="a">the matrix to translate</param>
            <param name="v">the vec2 to translate the matrix by</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.FromMat4(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.CloneIt(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Copy(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Identity_(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Transpose(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Invert(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Adjoint(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Determinant(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Multiply(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Mul(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Translate(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Rotate(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.Scale(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.FromMat2d(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.FromQuat(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.NormalFromMat4(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3d.f">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.FromMat4(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.CloneIt(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Copy(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Identity_(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Transpose(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Invert(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Adjoint(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Determinant(System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Multiply(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Mul(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Translate(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Rotate(System.Single[],System.Single[],System.Single)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.Scale(System.Single[],System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.FromMat2d(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.FromQuat(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.NormalFromMat4(System.Single[],System.Single[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat3f.f">
            **
        </member>
        <member name="T:Vintagestory.API.MathTools.Mat4d">
            <summary>
            4x4 Matrix Math
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Create">
            <summary>
            Creates a new identity mat4
            0 4 8  12
            1 5 9  13
            2 6 10 14
            3 7 11 15
            </summary>
            <returns>{mat4} a new 4x4 matrix</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.CloneIt(System.Double[])">
            <summary>
            Creates a new mat4 initialized with values from an existing matrix
            </summary>
            <param name="a">a matrix to clone</param>
            <returns>{mat4} a new 4x4 matrix</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Copy(System.Double[],System.Double[])">
            <summary>
            Copy the values from one mat4 to another
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Identity(System.Double[])">
            <summary>
            Set a mat4 to the identity matrix
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Transpose(System.Double[],System.Double[])">
            <summary>
            Transpose the values of a mat4
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Invert(System.Double[],System.Double[])">
            <summary>
            Inverts a mat4
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Adjoint(System.Double[],System.Double[])">
            <summary>
            Calculates the adjugate of a mat4   
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Determinant(System.Double[])">
            <summary>
            Calculates the determinant of a mat4
            </summary>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{Number} determinant of a</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Multiply(System.Double[],System.Double[],System.Double[])">
            <summary>
            Multiplies two mat4's
            
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the first operand</param>
            <param name="b">{mat4} b the second operand</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Multiply(System.Double[],System.Single[],System.Double[])">
            <summary>
            Multiplies two mat4's
            
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the first operand</param>
            <param name="b">{mat4} b the second operand</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Mul(System.Double[],System.Double[],System.Double[])">
            <summary>
            mat4.multiply
            </summary>
            <param name="output"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Mul(System.Double[],System.Single[],System.Double[])">
            <summary>
            mat4.multiply
            </summary>
            <param name="output"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Translate(System.Double[],System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Translate a mat4 by the given vector
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="input">{mat4} a the matrix to translate</param>
            <param name="x">{vec3} v vector to translate by</param>
            <param name="y"></param>
            <param name="z"></param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Translate(System.Double[],System.Double[],System.Double[])">
            <summary>
            Translate a mat4 by the given vector
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="input">{mat4} a the matrix to translate</param>
            <param name="translate">{vec3} v vector to translate by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Scale(System.Double[],System.Double[],System.Double[])">
            <summary>
            Scales the mat4 by the dimensions in the given vec3
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to scale</param>
            <param name="v">{vec3} v the vec3 to scale the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Rotate(System.Double[],System.Double[],System.Double,System.Double[])">
            <summary>
            Rotates a mat4 by the given angle
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <param name="axis">{vec3} axis the axis to rotate around</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.RotateX(System.Double[],System.Double[],System.Double)">
            <summary>
            Rotates a matrix by the given angle around the X axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.RotateY(System.Double[],System.Double[],System.Double)">
            <summary>
            Rotates a matrix by the given angle around the Y axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.RotateZ(System.Double[],System.Double[],System.Double)">
            <summary>
            Rotates a matrix by the given angle around the Z axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.FromRotationTranslation(System.Double[],System.Double[],System.Double[])">
            <summary>
            Creates a matrix from a quaternion rotation and vector translation
            This is equivalent to (but much faster than):
                mat4.identity(dest);
                mat4.translate(dest, vec);
                var quatMat = mat4.create();
                quat4.toMat4(quat, quatMat);
                mat4.multiply(dest, quatMat);
            </summary>
            <param name="output">{mat4} out mat4 receiving operation result</param>
            <param name="q">{quat4} q Rotation quaternion</param>
            <param name="v">{vec3} v Translation vector</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.FromQuat(System.Double[],System.Double[])">
            <summary>
            Calculates a 4x4 matrix from the given quaternion
            </summary>
            <param name="output">{mat4} out mat4 receiving operation result</param>
            <param name="q">{quat} q Quaternion to create matrix from</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Frustum(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a frustum matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="left">{Number} left Left bound of the frustum</param>
            <param name="right">{Number} right Right bound of the frustum</param>
            <param name="bottom">{Number} bottom Bottom bound of the frustum</param>
            <param name="top">{Number} top Top bound of the frustum</param>
            <param name="near">{Number} near Near bound of the frustum</param>
            <param name="far">{Number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Perspective(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a perspective projection matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="fovy">{number} fovy Vertical field of view in radians</param>
            <param name="aspect">{number} aspect Aspect ratio. typically viewport width/height</param>
            <param name="near">{number} near Near bound of the frustum</param>
            <param name="far">{number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.Ortho(System.Double[],System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a orthogonal projection matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="left">{number} left Left bound of the frustum</param>
            <param name="right">{number} right Right bound of the frustum</param>
            <param name="bottom">{number} bottom Bottom bound of the frustum</param>
            <param name="top">{number} top Top bound of the frustum</param>
            <param name="near">{number} near Near bound of the frustum</param>
            <param name="far">{number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.LookAt(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Generates a look-at matrix with the given eye position, focal point, and up axis
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="eye">{vec3} eye Position of the viewer</param>
            <param name="center">{vec3} center Point the viewer is looking at</param>
            <param name="up">{vec3} up vec3 pointing up</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.MulWithVec4(System.Double[],System.Double[])">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            Returns a new vec4 vector
            </summary>
            <param name="matrix"></param>
            <param name="vec4"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.MulWithVec4(System.Double[],System.Double[],Vintagestory.API.MathTools.Vec4d)">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            </summary>
            <param name="matrix"></param>
            <param name="vec4"></param>
            <param name="outVal"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4d.MulWithVec4(System.Double[],Vintagestory.API.MathTools.Vec4d,Vintagestory.API.MathTools.Vec4d)">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            
            </summary>
            <param name="matrix"></param>
            <param name="inVal"></param>
            <param name="outVal"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Mat4f">
            <summary>
            4x4 Matrix Math
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Create">
            <summary>
            Creates a new identity mat4
            0 4 8  12
            1 5 9  13
            2 6 10 14
            3 7 11 15
            </summary>
            <returns>{mat4} a new 4x4 matrix</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.CloneIt(System.Single[])">
            <summary>
            Creates a new mat4 initialized with values from an existing matrix
            </summary>
            <param name="a">a matrix to clone</param>
            <returns>{mat4} a new 4x4 matrix</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Copy(System.Single[],System.Single[])">
            <summary>
            Copy the values from one mat4 to another
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Identity(System.Single[])">
            <summary>
            Set a mat4 to the identity matrix
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Transpose(System.Single[],System.Single[])">
            <summary>
            Transpose the values of a mat4
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Invert(System.Single[],System.Single[])">
            <summary>
            Inverts a mat4
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Adjoint(System.Single[],System.Single[])">
            <summary>
            Calculates the adjugate of a mat4   
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Determinant(System.Single[])">
            <summary>
            Calculates the determinant of a mat4
            </summary>
            <param name="a">{mat4} a the source matrix</param>
            <returns>{Number} determinant of a</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Multiply(System.Single[],System.Single[],System.Single[])">
            <summary>
            Multiplies two mat4's
            
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the first operand</param>
            <param name="b">{mat4} b the second operand</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Mul(System.Single[],System.Single[],System.Single[])">
            <summary>
            mat4.multiply
            </summary>
            <param name="output"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Translate(System.Single[],System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            Translate a mat4 by the given vector
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="input">{mat4} a the matrix to translate</param>
            <param name="x">{vec3} v vector to translate by</param>
            <param name="y"></param>
            <param name="z"></param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Translate(System.Single[],System.Single[],System.Single[])">
            <summary>
            Translate a mat4 by the given vector
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="input">{mat4} a the matrix to translate</param>
            <param name="translate">{vec3} v vector to translate by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Scale(System.Single[],System.Single[],System.Single[])">
            <summary>
            Scales the mat4 by the dimensions in the given vec3
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to scale</param>
            <param name="v">{vec3} v the vec3 to scale the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Scale(System.Single[],System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            Scales the mat4 by the dimensions in the given vec3
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to scale</param>
            <param name="v">{vec3} v the vec3 to scale the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Rotate(System.Single[],System.Single[],System.Single,System.Single[])">
            <summary>
            Rotates a mat4 by the given angle
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <param name="axis">{vec3} axis the axis to rotate around</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.RotateX(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a matrix by the given angle around the X axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.RotateY(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a matrix by the given angle around the Y axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.RotateZ(System.Single[],System.Single[],System.Single)">
            <summary>
            Rotates a matrix by the given angle around the Z axis
            </summary>
            <param name="output">{mat4} out the receiving matrix</param>
            <param name="a">{mat4} a the matrix to rotate</param>
            <param name="rad">{Number} rad the angle to rotate the matrix by</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.FromRotationTranslation(System.Single[],System.Single[],System.Single[])">
            <summary>
            Creates a matrix from a quaternion rotation and vector translation
            This is equivalent to (but much faster than):
                mat4.identity(dest);
                mat4.translate(dest, vec);
                var quatMat = mat4.create();
                quat4.toMat4(quat, quatMat);
                mat4.multiply(dest, quatMat);
            </summary>
            <param name="output">{mat4} out mat4 receiving operation result</param>
            <param name="q">{quat4} q Rotation quaternion</param>
            <param name="v">{vec3} v Translation vector</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.FromQuat(System.Single[],System.Single[])">
            <summary>
            Calculates a 4x4 matrix from the given quaternion
            </summary>
            <param name="output">{mat4} out mat4 receiving operation result</param>
            <param name="q">{quat} q Quaternion to create matrix from</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Frustum(System.Single[],System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates a frustum matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="left">{Number} left Left bound of the frustum</param>
            <param name="right">{Number} right Right bound of the frustum</param>
            <param name="bottom">{Number} bottom Bottom bound of the frustum</param>
            <param name="top">{Number} top Top bound of the frustum</param>
            <param name="near">{Number} near Near bound of the frustum</param>
            <param name="far">{Number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Perspective(System.Single[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates a perspective projection matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="fovy">{number} fovy Vertical field of view in radians</param>
            <param name="aspect">{number} aspect Aspect ratio. typically viewport width/height</param>
            <param name="near">{number} near Near bound of the frustum</param>
            <param name="far">{number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.Ortho(System.Single[],System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates a orthogonal projection matrix with the given bounds
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="left">{number} left Left bound of the frustum</param>
            <param name="right">{number} right Right bound of the frustum</param>
            <param name="bottom">{number} bottom Bottom bound of the frustum</param>
            <param name="top">{number} top Top bound of the frustum</param>
            <param name="near">{number} near Near bound of the frustum</param>
            <param name="far">{number} far Far bound of the frustum</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.LookAt(System.Single[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Generates a look-at matrix with the given eye position, focal point, and up axis
            </summary>
            <param name="output">{mat4} out mat4 frustum matrix will be written into</param>
            <param name="eye">{vec3} eye Position of the viewer</param>
            <param name="center">{vec3} center Point the viewer is looking at</param>
            <param name="up">{vec3} up vec3 pointing up</param>
            <returns>{mat4} out</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec4(System.Single[],System.Single[])">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            Returns a new vec4 vector
            </summary>
            <param name="matrix"></param>
            <param name="vec4"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec3(System.Single[],System.Single[],System.Single[])">
            <summary>
            Used for vec3 representing a direction or normal - as a vec4 this would have the 4th element set to 0, so that applying a matrix transform with a translation would have *no* effect
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec3_Position(System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Used for vec3 representing an x,y,z position - as a vec4 this would have the 4th element set to 1, so that applying a matrix transform with a translation would have an effect
            The offset is used to index within the original and output arrays - e.g. in MeshData.xyz
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec3_Position_WithOrigin(System.Single[],System.Single[],System.Single[],System.Int32,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Used for vec3 representing an x,y,z position - as a vec4 this would have the 4th element set to 1, so that applying a matrix transform with a translation would have an effect
            The offset is used to index within the original and output arrays - e.g. in MeshData.xyz
            The origin is the origin for the rotation
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec3_Position(System.Single[],System.Single,System.Single,System.Single,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Used for vec3 representing an x,y,z position - as a vec4 this would have the 4th element set to 1, so that applying a matrix transform with a translation would have an effect
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec3(System.Single[],Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Used for Vec3f representing a direction or normal - as a vec4 this would have the 4th element set to 0, so that applying a matrix transform with a translation would have *no* effect
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec3(System.Single[],System.Single,System.Single,System.Single)">
            <summary>
            Used for x,y,z representing a direction or normal - as a vec4 this would have the 4th element set to 0, so that applying a matrix transform with a translation would have *no* effect
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec4(System.Single[],System.Single[],Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            </summary>
            <param name="matrix"></param>
            <param name="vec4"></param>
            <param name="outVal"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec4(System.Single[],Vintagestory.API.MathTools.Vec4d,Vintagestory.API.MathTools.Vec4d)">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            </summary>
            <param name="matrix"></param>
            <param name="vec4"></param>
            <param name="outVal"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Mat4f.MulWithVec4(System.Single[],Vintagestory.API.MathTools.Vec4f,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication
            
            </summary>
            <param name="matrix"></param>
            <param name="inVal"></param>
            <param name="outVal"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.RotationTo(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.SetAxes(System.Double[],System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.CloneIt(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.FromValues(System.Double,System.Double,System.Double,System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Copy(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Set(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Identity_(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.SetAxisAngle(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Add(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Multiply(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Mul(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Scale(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.RotateX(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.RotateY(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.RotateZ(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.CalculateW(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Dot(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Lerp(System.Double[],System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Slerp(System.Double[],System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Invert(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Conjugate(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Length_(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Len(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.SquaredLength(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.SqrLen(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.Normalize(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.Quaterniond.FromMat3(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Create">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.CloneIt(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.FromValues(System.Double,System.Double,System.Double,System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Copy(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Set(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Add(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Subtract(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Sub(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Multiply(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Mul(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Divide(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Div(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Min(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Max(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Scale(System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.ScaleAndAdd(System.Double[],System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Distance(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Dist(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.SquaredDistance(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.SqrDist(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Length_(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Len(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.SquaredLength(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.SqrLen(System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Negate(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Normalize(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Dot(System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.Lerp(System.Double[],System.Double[],System.Double[],System.Double)">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.TransformMat4(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="M:Vintagestory.API.MathTools.QVec4d.transformQuat(System.Double[],System.Double[],System.Double[])">
            **
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec3Utilsd">
            <summary>
            Don't use this class unless you need it to interoperate with Mat4d
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Create">
            Creates a new, empty vec3
            Returns {vec3} a new 3D vector.
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.CloneIt(System.Double[])">
            Creates a new vec3 initialized with values from an existing vector
            Returns {vec3} a new 3D vector
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.FromValues(System.Double,System.Double,System.Double)">
            Creates a new vec3 initialized with the given values
            Returns {vec3} a new 3D vector
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Copy(System.Double[],System.Double[])">
             Copy the values from one vec3 to another
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Set(System.Double[],System.Double,System.Double,System.Double)">
            Set the components of a vec3 to the given values
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Add(System.Double[],System.Double[],System.Double[])">
            Adds two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Substract(System.Double[],System.Double[],System.Double[])">
            Subtracts vector b from vector a
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Sub(System.Double[],System.Double[],System.Double[])">
            Alias for {@link vec3.subtract}
            @function
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Multiply(System.Double[],System.Double[],System.Double[])">
            Multiplies two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Mul(System.Double[],System.Double[],System.Double[])">
            Alias for {@link vec3.multiply}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Divide(System.Double[],System.Double[],System.Double[])">
            Divides two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Div(System.Double[],System.Double[],System.Double[])">
            Alias for {@link vec3.divide}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Min(System.Double[],System.Double[],System.Double[])">
            Returns the minimum of two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Max(System.Double[],System.Double[],System.Double[])">
            Returns the maximum of two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Scale(System.Double[],System.Double[],System.Double)">
            Scales a vec3 by a scalar number
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.ScaleAndAdd(System.Double[],System.Double[],System.Double[],System.Double)">
            Adds two vec3's after scaling the second operand by a scalar value
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Distance(System.Double[],System.Double[])">
            Calculates the euclidian distance between two vec3's
            @returns {Number} distance between a and b
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Dist(System.Double[],System.Double[])">
            Alias for {@link vec3.distance}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.SquaredDistance(System.Double[],System.Double[])">
            Calculates the squared euclidian distance between two vec3's
            @returns {Number} squared distance between a and b
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.SqrDist(System.Double[],System.Double[])">
            Alias for {@link vec3.squaredDistance}
            @function
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Length_(System.Double[])">
            Calculates the length of a vec3
            @returns {Number} length of a
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Len(System.Double[])">
            Alias for {@link vec3.length}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.SquaredLength(System.Double[])">
            Calculates the squared length of a vec3
            @returns {Number} squared length of a
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.SqrLen(System.Double[])">
            Alias for {@link vec3.squaredLength}
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Negate(System.Double[],System.Double[])">
            Negates the components of a vec3
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Normalize(System.Double[],System.Double[])">
            Normalize a vec3
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Dot(System.Double[],System.Double[])">
            Calculates the dot product of two vec3's
            @returns {Number} dot product of a and b
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Cross(System.Double[],System.Double[],System.Double[])">
            Computes the cross product of two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.Lerp(System.Double[],System.Double[],System.Double[],System.Double)">
            Performs a linear interpolation between two vec3's
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.TransformMat3(System.Double[],System.Double[],System.Double[])">
            Transforms the vec3 with a mat3.
            @returns {vec3} out
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3Utilsd.TransformQuat(System.Double[],System.Double[],System.Double[])">
            Transforms the vec3 with a quat
            @returns {vec3} out
        </member>
        <member name="T:Vintagestory.API.MathTools.ColorUtil">
            <summary>
            Many utility methods and fields for working with colors
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.HueBits">
            <summary>
            Amount of bits per block that are available to store the hue value
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.SatBits">
            <summary>
            Amount of bits per block that are available to store the saturation value
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BrightBits">
            <summary>
            Amount of bits per block that are available to store the brightness value
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.OpaqueAlpha">
            <summary>
            255 &lt;&lt; 24
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.ClearAlpha">
            <summary>
            ~(255 &lt;&lt; 24)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteRgbVec">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgbVec">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgbFloat">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgbDouble">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgbBytes">
            <summary>
            White opaque argb color as bytes (0..255)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteAhsvBytes">
            <summary>
            White opaque ahsv color as bytes (0..255)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteArgb">
            <summary>
            White opaque argb color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.WhiteAhsl">
            <summary>
            White opaque AHSV color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BlackArgb">
            <summary>
            Black opaque rgb color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BlackRgbVec">
            <summary>
            Black opaque rgb color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BlackArgbVec">
            <summary>
            Black opaque rgb color
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.ColorUtil.BlackArgbDouble">
            <summary>
            White opaque color as normalized float values (0..1)
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ReverseColorBytes(System.Byte[])">
            <summary>
            Reverses the RGB channels, but leaves alpha untouched. Basically turns RGBA into BGRA and vice versa
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ReverseColorBytes(System.Int32)">
            <summary>
            Reverses the RGB channels, but leaves alpha untouched. Basically turns RGBA into BGRA and vice versa
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToBGRABytes(System.Int32)">
            <summary>
            Splits up a 32bit int color into 4 1 byte components, in BGRA order (Alpha channel at the highest 8 bits)
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToRGBABytes(System.Int32)">
            <summary>
            Splits up a 32bit int color into 4 1 byte components, in RGBA order
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToRGBAFloats(System.Int32)">
            <summary>
            Returns a 4 element rgb float with values between 0..1
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToRGBVec3f(System.Int32,Vintagestory.API.MathTools.Vec3f@)">
            <summary>
            Returns a 4 element rgb float with values between 0..1
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorFromRgba(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Care: the returned value is in true RGBA order, not BGRA as used for example by VS particle system.  Therefore, depending on use, calling code may need to exchange the r and b parameters to see correct colors rendered in-game.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToRGBADoubles(System.Int32)">
            <summary>
            Returns a 4 element rgb double with values between 0..1
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiply(System.Byte[],System.Byte[])">
            <summary>
            Multiplies two colors together: c=(a*b)/255
            </summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiplyEach(System.Int32,System.Int32)">
            <summary>
            Multiplies two colors together c=(a*b)/255
            </summary>
            <param name="color"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiply3(System.Int32,System.Single)">
            <summary>
            Multiplies a float value to the rgb color channels, leaves alpha channel unchanged
            </summary>
            <param name="color"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiply3Clamped(System.Int32,System.Single)">
            <summary>
            Multiplies a float value to the rgb color channels, leaves alpha channel unchanged. Makes sure the multiplied value stays within the 0..255 range
            </summary>
            <param name="color"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiply4(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Multiplies a float value to the rgb color channels
            </summary>
            <param name="color"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorMultiply4(System.Int32,System.Single)">
            <summary>
            Multiplies a float value to every color channel including the alpha component.
            </summary>
            <param name="color"></param>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorAverage(System.Int32[],System.Single[])">
            <summary>
            Averages several colors together in RGB space
            </summary>
            <param name="colors"></param>
            <param name="weights"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorOverlay(System.Int32,System.Int32,System.Single)">
            <summary>
            Overlays rgb2 over rgb1
            When c2weight = 0 resulting color is color1, when c2weight = 1 then resulting color is color2
            Resulting color alpha value is 100% color1 alpha
            </summary>
            <param name="rgb1"></param>
            <param name="rgb2"></param>
            <param name="c2weight"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorOver(System.Int32,System.Int32)">
            <summary>
            Overlays rgb1 on top of rgb2, based on their alpha values
            </summary>
            <param name="rgb1"></param>
            <param name="rgb2"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorCombineHSV(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines two HSV colors by converting them to rgb then back to hsv. Uses the brightness as a weighting factor. Also leaves the brightness at the max of both hsv colors.
            </summary>
            <param name="h1"></param>
            <param name="s1"></param>
            <param name="v1"></param>
            <param name="h2"></param>
            <param name="s2"></param>
            <param name="v2"></param>
            <returns>Combined HSV Color</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorSubstractHSV(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes HSV2 from HSV1 by converting them to rgb then back to hsv. Uses the brightness as a weighting factor. Leaves brightness unchanged.
            </summary>
            <param name="h1"></param>
            <param name="s1"></param>
            <param name="v1"></param>
            <param name="h2"></param>
            <param name="s2"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ToRgba(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Pack the 4 color components into a single ARGB 32bit int
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorA(System.Int32)">
            <summary>
            Returns alpha value of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorR(System.Int32)">
            <summary>
            Returns red value of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorG(System.Int32)">
            <summary>
            Returns green value of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorB(System.Int32)">
            <summary>
            Returns blue value of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.ColorToString(System.Int32)">
            <summary>
            Returns human a readable string of given color
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.Hex2Int(System.String)">
            <summary>
            Turn a string hex color (with #) into a single int
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.Int2Hex(System.Int32)">
            <summary>
            Turn a color int into its string hex version, including preceeding #
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.Hex2Doubles(System.String)">
            <summary>
            Parses a hex string as an rgb(a) color and returns an array of colors normalized fom 0..1 for use with Cairo. E.g. turns #FF0000 into double[1, 0, 0, 1] and #00FF00CC into double[0, 1, 0, 0.8]
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.Rgb2Hsv(System.Single,System.Single,System.Single)">
            <summary>
            Converts given RGB values into it's respective HSV Representation (all values in range of 0-255)
            In the result, V is the MOST significant byte
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.Rgb2HSv(System.Int32)">
            <summary>
            Converts given RGB value into it's respective HSV Representation (all values in range of 0-255)
            In the parameter, R is the most significant byte i.e. this is for RGB
            In the result, V is the LEAST significant byte
            </summary>
            <param name="rgb"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.RgbToHsvInts(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given RGB values into it's respective HSV Representation (all values in range of 0-255)
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.Hsv2Rgb(System.Int32)">
            <summary>
            Converts given HSV value into it's respective RGB Representation (all values in range of 0-255)
            R is the most significant byte i.e. this is RGB
            </summary>
            <param name="hsv"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HsvToRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given HSV values into it's respective RGB Representation (all values in range of 0-255)
            R is the most significant byte i.e. this is RGB
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.GrayscaleColor(System.Byte)">
            <summary>
            Returns a fully opaque gray color with given brightness
            </summary>
            <param name="brightness"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HsvToRgba(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given HSB values into it's respective ARGB Representation (all values in range of 0-255, alpha always 255)
            R is the LEAST significant byte i.e. the result is BGR
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HsvToRgba(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given HSV values into its respective ARGB Representation (all values in range of 0-255)
            R is the LEAST significant byte i.e. the result is BGR
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.Hsv2RgbInts(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts given HSV values into its respective RGB representation (all values in range of 0-255)
            R is the first byte in the resulting array
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.ColorUtil.HSVa2RGBaBytes(System.Byte[])">
            <summary>
            Converts given HSVA values into its respective RGBA Representation (all values in range of 0-255)
            R is the first byte in the resulting array
            </summary>
            <param name="hsva"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.BlockFacing">
            <summary>
            Represents one of the 6 faces of a cube and all it's properties. Uses a right Handed Coordinate System. See also http://www.matrix44.net/cms/notes/opengl-3d-graphics/coordinate-systems-in-opengl
            In short: 
            North: Negative Z
            East: Positive X
            South: Positive Z
            West: Negative X
            Up: Positive Y
            Down: Negative Y
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.HorizontalFlags">
            <summary>
            All horizontal blockfacing flags combined
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.VerticalFlags">
            <summary>
            All vertical blockfacing flags combined
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.NORTH">
            <summary>
            Faces towards negative Z
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.EAST">
            <summary>
            Faces towards positive X
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.SOUTH">
            <summary>
            Faces towards positive Z
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.WEST">
            <summary>
            Faces towards negative X
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.UP">
            <summary>
            Faces towards positive Y
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.DOWN">
            <summary>
            Faces towards negative Y
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.ALLFACES">
            <summary>
            All block faces in the order of N, E, S, W, U, D
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.ALLNORMALI">
            <summary>
            All block faces in the order of N, E, S, W, U, D
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.AllVertexFlagsNormals">
            <summary>
            Packed ints representing the normal flags, left-shifted by 15 for easy inclusion in VertexFlags
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.HORIZONTALS">
            <summary>
            Array of horizontal faces (N, E, S, W)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.VERTICALS">
            <summary>
            Array of vertical faces (U, D)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.BlockFacing.HORIZONTALS_ANGLEORDER">
            <summary>
            Array of horizontal faces in angle order (0°, 90°, 180°, 270°) => (E, N, W, S)
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Flag">
            <summary>
            The faces byte flag
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Index">
            <summary>
            The index of the face (N=0, E=1, S=2, W=3, U=4, D=5)
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.MeshDataIndex">
            <summary>
            Index + 1
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.HorizontalAngleIndex">
            <summary>
            The angle index of the face (E = 0, N = 1, W = 2, S = 3)
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Normali">
            <summary>
            Returns a normal vector of this face
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Normalf">
            <summary>
            Returns a normal vector of this face
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.NormalByte">
            <summary>
            Returns a normal vector of this face encoded in 6 bits/
            bit 0: 1 if south or west
            bit 1: sign bit 
            bit 2: 1 if up or down
            bit 3: sign bit 
            bit 4: 1 if north or south
            bit 5: sign bit 
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.NormalPacked">
            <summary>
            Normalized normal vector in format GL_INT_2_10_10_10_REV
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.NormalPackedFlags">
            <summary>
            Normalized normal vector packed into 3x4=12 bytes total and bit shifted by 15 bits, for use in meshdata flags data
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.PlaneCenter">
            <summary>
            Returns the center position of this face
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Code">
            <summary>
            Returns the string north, east, south, west, up or down
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.IsHorizontal">
            <summary>
            True if this face is N,E,S or W
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.IsVertical">
            <summary>
            True if this face is U or D
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.IsAxisNS">
            <summary>
            True if this face is N or S
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.IsAxisWE">
            <summary>
            True if this face is N or S
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Axis">
            <summary>
            The normal axis of this vector.
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockFacing.Opposite">
            <summary>
            Returns the opposing face
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.GetCCW">
            <summary>
            Returns the face if current face would be horizontally counter-clockwise rotated, only works for horizontal faces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.GetCW">
            <summary>
            Returns the face if current face would be horizontally clockwise rotated, only works for horizontal faces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FaceWhenRotatedBy(System.Single,System.Single,System.Single)">
            <summary>
            Applies a 3d rotation on the face and returns the face thats closest to the rotated face
            </summary>
            <param name="radX"></param>
            <param name="radY"></param>
            <param name="radZ"></param>
            <returns></returns>     
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.GetFaceBrightness(System.Single,System.Single,System.Single,System.Single[])">
            <summary>
            Rotates the face by given angle and returns the interpolated brightness of this face.
            </summary>
            <param name="radX"></param>
            <param name="radY"></param>
            <param name="radZ"></param>
            <param name="BlockSideBrightnessByFacing">Array of brightness values between 0 and 1 per face. In index order (N, E, S, W, U, D)</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.GetFaceBrightness(System.Double[],System.Single[])">
            <summary>
            Rotates the face by given angle and returns the interpolated brightness of this face.
            </summary>
            <param name="matrix"></param>
            <param name="BlockSideBrightnessByFacing">Array of brightness values between 0 and 1 per face. In index order (N, E, S, W, U, D)</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FromCode(System.String)">
            <summary>
            Returns the face if code is 'north', 'east', 'south', 'west', 'north', 'up' or 'down'. Otherwise null.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FromFirstLetter(System.String)">
            <summary>
            Returns the face if code is 'n', 'e', 's', 'w', 'n', 'u' or 'd'. Otherwise null.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.HorizontalFromAngle(System.Single)">
            <summary>
            Returns the closest horizontal face from given angle (0 degree = east). Uses HORIZONTALS_ANGLEORDER
            </summary>
            <param name="radiant"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FlagContains(System.Byte,Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Returns true if given byte flags contain given face 
            </summary>
            <param name="flag"></param>
            <param name="facing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockFacing.FlagContainsHorizontals(System.Byte)">
            <summary>
            Returns true if given byte flags contains a horizontal face
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.BlockPos">
            <summary>
            A useful data structure when operating with block postions.<br/>
            Valuable Hint: Make use of Copy() or the XXXCopy() variants where needed. A common pitfall is writing code like: BlockPos abovePos = pos.Up(); - with this code abovePos and pos will reference to the same object!
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.BlockPos.Item(System.Int32)">
            <summary>
            0 = x, 1 = y, 2 = z
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Up(System.Int32)">
            <summary>
            Move the position vertically up
            </summary>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Down(System.Int32)">
            <summary>
            Move the position vertically down
            </summary>
            <param name="dy"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets XYZ to new vlaues
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.WestCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length to the west
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.SouthCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length to the south
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.EastCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length to the east
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.NorthCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length to the north
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DownCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length down
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.UpCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and moves the position by the given length up
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Copy">
            <summary>
            Creates a copy of this block positions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(System.Single,System.Single,System.Single)">
            <summary>
            Offsets the position by given xyz
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Offsets the position by given xyz
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(Vintagestory.API.MathTools.Vec3i)">
            <summary>
            Offsets the position by given xyz vector
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Offsets the position by given xyz vector
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Add(Vintagestory.API.MathTools.BlockFacing,System.Int32)">
            <summary>
            Offsets the position into the direction of given block face
            </summary>
            <param name="facing"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Offset(Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Offsets the position into the direction of given block face
            </summary>
            <param name="facing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(System.Single,System.Single,System.Single)">
            <summary>
            Creates a copy of this block positions and offsets it by given xyz
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a copy of this block positions and offsets it by given xyz
            </summary>
            <param name="dx"></param>
            <param name="dy"></param>
            <param name="dz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and offsets it by given xyz
            </summary>
            <param name="xyz"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(Vintagestory.API.MathTools.Vec3i)">
            <summary>
            Creates a copy of this block positions and offsets it by given xyz
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(Vintagestory.API.MathTools.BlockFacing)">
            <summary>
            Creates a copy of this block positions and offsets it in the direction of given block face
            </summary>
            <param name="facing"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.AddCopy(Vintagestory.API.MathTools.BlockFacing,System.Int32)">
            <summary>
            Creates a copy of this block positions and offsets it in the direction of given block face
            </summary>
            <param name="facing"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Sub(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Substract a position => you'll have the manhatten distance 
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.Sub(System.Int32,System.Int32,System.Int32)">
            <summary>
            Substract a position => you'll have the manhatten distance 
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.SubCopy(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Substract a position => you'll have the manhatten distance 
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DivCopy(System.Int32)">
            <summary>
            Creates a copy of this block positions and divides it by given factor
            </summary>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DistanceTo(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the Euclidean distance to between this and given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DistanceTo(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Euclidean distance to between this and given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DistanceSqTo(System.Double,System.Double,System.Double)">
            <summary>
            Returns the squared Euclidean distance to between this and given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.DistanceSqToNearerEdge(System.Double,System.Double,System.Double)">
            <summary>
            Returns the squared Euclidean distance between the nearer edge of this blockpos (assumed 1 x 0.75 x 1 cube) and given position
            The 0.75 offset is because the "heat source" is likely to be above the base position of this block: it's approximate
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.HorDistanceSqTo(System.Double,System.Double)">
            <summary>
            Returns the squared Euclidean horizontal distance to between this and given position
            </summary>
            <param name="x"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.HorizontalManhattenDistance(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the manhatten distance to given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.ManhattenDistance(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Returns the manhatten distance to given position
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.ManhattenDistance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the manhatten distance to given position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.InRangeHorizontally(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns true if the specified x,z is within a box the specified range around this position
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.ToVec3d">
            <summary>
            Creates a new instance of a Vec3d initialized with this position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.BlockPos.ToVec3i">
            <summary>
            Creates a new instance of a Vec3i initialized with this position
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec2i">
            <summary>
            Represents a vector of 2 ints. Go bug Tyron if you need more utility methods in this class.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec2i.ToChunkIndex">
            <summary>
            27 lowest bits for X Coordinate, then 27 bits for Z coordinate
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec3d">
            <summary>
            Represents a vector of 3 doubles. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3d.#ctor(Vintagestory.API.MathTools.Vec4d)">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3d.Item(System.Int32)">
            <summary>
            Returns the n-th coordinate
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec3f">
            <summary>
            Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class.
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.Vec3f.X">
            <summary>
            The X-Component of the vector
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.Vec3f.Y">
            <summary>
            The Y-Component of the vector
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.Vec3f.Z">
            <summary>
            The Z-Component of the vector
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3f.R">
            <summary>
            Synonum for X
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3f.G">
            <summary>
            Synonum for Y
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3f.B">
            <summary>
            Synonum for Z
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.#ctor">
            <summary>
            Creates a new vector with x/y/z = 0
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.#ctor(Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.#ctor(System.Single[])">
            <summary>
            Create a new vector with given coordinates
            </summary>
            <param name="values"></param>
        </member>
        <member name="P:Vintagestory.API.MathTools.Vec3f.Item(System.Int32)">
            <summary>
            Returns the n-th coordinate
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Length">
            <summary>
            Returns the length of this vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Dot(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Dot(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Dot(System.Single[])">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Dot(System.Double[])">
            <summary>
            Returns the dot product with given vector
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Cross(Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Creates the cross product from a and b and sets own values accordingly
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Cross(Vintagestory.API.MathTools.Vec3f,Vintagestory.API.MathTools.Vec4f)">
            <summary>
            Creates the cross product from a and b and sets own values accordingly
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds given x/y/z coordinates to the vector
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Mul(System.Single)">
            <summary>
            Multiplies each coordinate with given multiplier
            </summary>
            <param name="multiplier"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Clone">
            <summary>
            Creates a copy of the vetor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Normalize">
            <summary>
            Turns the vector into a unit vector with length 1, but only if length is non-zero
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Distance(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Calculates the distance the two endpoints
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.DistanceSq(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the square distance the two endpoints
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Distance(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Calculates the distance the two endpoints
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.AddCopy(System.Single,System.Single,System.Single)">
            <summary>
            Adds given coordinates to a new vectors and returns it. The original calling vector remains unchanged
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.AddCopy(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Adds both vectors into a new vector. Both source vectors remain unchanged.
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.ReduceBy(System.Single)">
            <summary>
            Substracts val from each coordinate if the coordinate if positive, otherwise it is added. If 0, the value is unchanged. The value must be a positive number
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.NormalizedCopy">
            <summary>
            Creates a new vectors that is the normalized version of this vector. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.ToVec3d">
            <summary>
            Creates a new double precision vector with the same coordinates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the vector to this coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Set(Vintagestory.API.MathTools.Vec3d)">
            <summary>
            Sets the vector to the coordinates of given vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.Set(Vintagestory.API.MathTools.Vec3f)">
            <summary>
            Sets the vector to the coordinates of given vector
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3f.ToString">
            <summary>
            Simple string represenation of the x/y/z components
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.Vec3i">
            <summary>
            Represents a vector of 3 ints. Go bug Tyron if you need more utility methods in this class.
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.Vec3i.DirectAndIndirectNeighbours">
            <summary>
            List of offset of all direct and indirect neighbours of coordinate 0/0/0
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3i.Reduce(System.Int32)">
            <summary>
            Substracts val from each coordinate if the coordinate if positive, otherwise it is added. If 0, the value is unchanged. The value must be a positive number
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Vec3i.ToChunkIndex">
            <summary>
            27 lowest bits for X Coordinate, then 27 bits for Z coordinate and the highest 10 bits for Y coordinate
            </summary>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.EnumTransformFunction">
            <summary>
            Used for EvolvingNatFloat value transforms
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.IDENTICAL">
            <summary>
            y = firstval
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.LINEAR">
            <summary>
            y = firstval + factor * seq
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.LINEARNULLIFY">
            <summary>
            y = factor > 0 ? Math.Min(0, firstval + factor * seq) : Math.Max(0, firstval + factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.LINEARREDUCE">
            <summary>
            firstval - firstval / Math.Abs(firstval) * factor * seq
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.LINEARINCREASE">
            <summary>
            firstval + firstval / Math.Abs(firstval) * factor * seq
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.QUADRATIC">
            <summary>
            firstval + Math.Sign(factor) * (factor * seq) * (factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.INVERSELINEAR">
            <summary>
            firstval + 1f / (1f + factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.ROOT">
            <summary>
            firstval + (float)Math.Sqrt(factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.SINUS">
            <summary>
            firstval + GameMath.FastSin(factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.CLAMPEDPOSITIVESINUS">
            <summary>
            firstval * GameMath.Min(5 * Math.Abs(GameMath.FastSin(factor * seq)), 1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.COSINUS">
            <summary>
            firstval + GameMath.FastCos(factor * seq)
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumTransformFunction.SMOOTHSTEP">
            <summary>
            firstval + GameMath.SmoothStep(factor * seq)
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.GameMath">
            <summary>
            A large set of useful game mathematics functions
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastSin(System.Single)">
            <summary>
            Faster Sin at the cost of lower accuracy
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastCos(System.Single)">
            <summary>
            Faster Cos at the cost of lower accuracy
            </summary>
            <param name="rad"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastSinDeg(System.Single)">
            <summary>
            Faster Sin at the cost of lower accuracy
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastCosDeg(System.Single)">
            <summary>
            Faster Cos at the cost of lower accuracy
            </summary>
            <param name="deg"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FastSqrt(System.Single)">
            <summary>
            Faster square root but at the cost of lower accuracy
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Force val to be inside a certain range
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Force val to be inside a certain range
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Force val to be inside a certain range
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Force val to be inside a certain range
            </summary>
            <param name="val"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.InverseClamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Force val to be outside a certain range
            </summary>
            <param name="val"></param>
            <param name="atLeastNeg"></param>
            <param name="atLeastPos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Mod(System.Int32,System.Int32)">
            <summary>
            C#'s %-Operation is actually not modulo but remainder, so this is the actual modulo function that ensures positive numbers as return value
            </summary>
            <param name="k"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Mod(System.Single,System.Single)">
            <summary>
            C#'s %-Operation is actually not modulo but remainder, so this is the actual modulo function that ensures positive numbers as return value
            </summary>
            <param name="k"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Mod(System.Double,System.Double)">
            <summary>
            C#'s %-Operation is actually not modulo but remainder, so this is the actual modulo function that ensures positive numbers as return value
            </summary>
            <param name="k"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.RoundRandom(System.Random,System.Single)">
            <summary>
            Treats value as a statistical average. Example: 2.1 will turn into 2 90% of the times and into 3 10% of times.
            </summary>
            <param name="rand"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.AngleDegDistance(System.Single,System.Single)">
            <summary>
            Returns the shortest distance between 2 angles
            See also https://stackoverflow.com/a/14498790/1873041
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.AngleRadDistance(System.Single,System.Single)">
            <summary>
            Returns the shortest distance between 2 angles
            See also https://stackoverflow.com/a/14498790/1873041
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.CyclicValueDistance(System.Single,System.Single,System.Single)">
            <summary>
            Returns the shortest distance between 2 values that are cyclical (e.g. angles, daytime hours, etc.)
            See also https://stackoverflow.com/a/14498790/1873041
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.CyclicValueDistance(System.Double,System.Double,System.Double)">
            <summary>
            Returns the shortest distance between 2 values that are cyclical (e.g. angles, daytime hours, etc.)
            See also https://stackoverflow.com/a/14498790/1873041
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.GenGaussKernel(System.Double,System.Int32)">
            <summary>
            Generates a gaussian blur kernel to be used when blurring something
            </summary>
            <param name="sigma"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerpColorMap(Vintagestory.API.IntDataMap2D,System.Int32)">
            <summary>
            Does linear interpolation on a 2d map for each of the 4 bytes individually (e.g. RGBA color). It's basically a bilinear zoom of an image like you know it from common image editing software. Only intended for square images.
            The resulting map will be without any paddding (also requires at least 1 padding at bottom and left side)
            </summary>
            <param name="map"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerpByte(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates one selected bytes of the 4 ints
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="byteIndex">0, 1, 2 or 3</param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiSerpByte(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates one selected bytes of the 4 ints
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="byteIndex">0, 1, 2 or 3</param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerpRgbaColor(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates the bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerpRgbColor(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates the lower 3 bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiSerpRgbColor(System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Smoothstep Interpolates the lower 3 bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="ly"></param>
            <param name="leftTop"></param>
            <param name="rightTop"></param>
            <param name="leftBottom"></param>
            <param name="rightBottom"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.LerpRgbColor(System.Single,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates the lower 3 bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.LerpRgbaColor(System.Single,System.Int32,System.Int32)">
            <summary>
            Linear Interpolates the 4 bytes of the int individually (i.e. interpolates RGB values individually)
            </summary>
            <param name="lx"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.LerpByte(System.Single,System.Byte,System.Byte)">
            <summary>
            Linear Interpolates a single byte
            </summary>
            <param name="lx"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerp(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Basic Bilinear Lerp
            </summary>
            <param name="topleft"></param>
            <param name="topright"></param>
            <param name="botleft"></param>
            <param name="botright"></param>
            <param name="x"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BiLerp(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Basic Bilinear Lerp
            </summary>
            <param name="topleft"></param>
            <param name="topright"></param>
            <param name="botleft"></param>
            <param name="botright"></param>
            <param name="x"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Mix(System.Single,System.Single,System.Single)">
            <summary>
            Same as <see cref="M:Vintagestory.API.MathTools.GameMath.Lerp(System.Single,System.Single,System.Single)"/>
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Mix(System.Int32,System.Int32,System.Single)">
            <summary>
            Same as <see cref="M:Vintagestory.API.MathTools.GameMath.Lerp(System.Single,System.Single,System.Single)"/>
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Basic Lerp
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Basic Lerp
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Serp(System.Single,System.Single,System.Single)">
            <summary>
            Smooth Interpolation using inlined Smoothstep
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.CPCatmullRomSplineLerp(System.Double,System.Double[],System.Double[])">
            <summary>
            Unlike the other implementation here, which uses the default "uniform"
            treatment of t, this computation is used to calculate the same values but
            introduces the ability to "parameterize" the t values used in the
            calculation. This is based on Figure 3 from
            http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
            </summary>
            <param name="t">the actual interpolation ratio from 0 to 1 representing the position between p1 and p2 to interpolate the value.</param>
            <param name="p">An array of double values of length 4, where interpolation occurs from p1 to p2.</param>
            <param name="time">An array of time measures of length 4, corresponding to each p value.</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.SmoothStep(System.Single)">
            <summary>
            Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.SmoothStep(System.Double)">
            <summary>
            Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Smootherstep(System.Single,System.Single,System.Single)">
            <summary>
            Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep
            </summary>
            <param name="edge0"></param>
            <param name="edge1"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Smootherstep(System.Double,System.Double,System.Double)">
            <summary>
            Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep
            </summary>
            <param name="edge0"></param>
            <param name="edge1"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Smootherstep(System.Double)">
            <summary>
            Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep. x must be in range of 0..1
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.TriangleStep(System.Int32,System.Int32,System.Int32)">
             <summary>
             Returns a value between 0..1. Returns 0 if val is smaller than left or greater than right. For val == (left+right)/2 the return value is 1. Every other value is a linear interpolation based on the distance to the middle value. Ascii art representation:
             
            1  |      /\
               |     /  \
            0.5|    /    \
               |   /      \
               |  /        \
            0  __/__________\______
              left          right
             </summary>
             <param name="val"></param>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.TriangleStep(System.Single,System.Single,System.Single)">
             <summary>
             Returns a value between 0..1. Returns 0 if val is smaller than left or greater than right. For val == (left+right)/2 the return value is 1. Every other value is a linear interpolation based on the distance to the middle value. Ascii art representation:
             
            1  |      /\
               |     /  \
            0.5|    /    \
               |   /      \
               |  /        \
            0  __/__________\______
              left          right
             </summary>
             <param name="val"></param>
             <param name="left"></param>
             <param name="right"></param>
             <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.TriangleStepFast(System.Int32,System.Int32,System.Int32)">
            <summary>
            Same as TriangleStep but skipping the step to calc mid and range. 
            </summary>
            <param name="val"></param>
            <param name="mid"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.DotNetStringHash(System.String)">
            <summary>
            Pretty much taken directly from the string.GetHashCode() implementation, but on these methods the documentation states: "You should never persist or use a hash code outside the application domain in which it was created, [...]."
            Hence, this is one basic 32bit bit implementation that can be used in a platform independent, persistent way.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Md5Hash(System.String)">
            <summary>
            See also https://msdn.microsoft.com/en-us/library/system.security.cryptography.md5%28v=vs.110%29.aspx
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHashMany(System.Int32)">
            <summary>
            A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm - optimised version for the vector hashes
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHashMany(System.Int32,System.Int32)">
            <summary>
            A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHashUMany(System.UInt32)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(Vintagestory.API.MathTools.Vec2i)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(System.Int32,System.Int32)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(Vintagestory.API.MathTools.Vec3i)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHashU(System.Int32,System.Int32,System.Int32)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.oaatHash(Vintagestory.API.MathTools.Vec4i)">
            <summary>
            Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.PrettyBadHash(System.Int32,System.Int32)">
            <summary>
            A really bad, but very fast hashing method.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.MurmurHash3Mod(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A not so fast, but higher quality than oaatHash(). See also https://en.wikipedia.org/wiki/MurmurHash. Includes a modulo operation.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="mod"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.MurmurHash3(System.Int32,System.Int32,System.Int32)">
            <summary>
            A not so fast, but higher quality than oaatHash(). See also https://en.wikipedia.org/wiki/MurmurHash
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.R2Sequence1D(System.Int32)">
            <summary>
            Quasirandom sequence by Martin Roberts (http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/)
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.R2Sequence2D(System.Int32)">
            <summary>
            Quasirandom sequence by Martin Roberts (http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/)
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.R2Sequence3D(System.Int32)">
            <summary>
            Quasirandom sequence by Martin Roberts (http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/)
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FlipVal(System.Int32@,System.Int32@)">
            <summary>
            Assigns the value of x1 to x2 and vice versa
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.FlipVal(System.Double@,System.Double@)">
            <summary>
            Assigns the value of x1 to x2 and vice versa
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Shuffle``1(System.Random,``0[])">
            <summary>
            Performs a Fisher-Yates shuffle in linear time or O(n)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rand"></param>
            <param name="array"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.Shuffle``1(System.Random,System.Collections.Generic.List{``0})">
            <summary>
            Performs a Fisher-Yates shuffle in linear time or O(n)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rand"></param>
            <param name="array"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BresenHamPlotLine3d(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Vintagestory.API.MathTools.PlotDelegate3D)">
            <summary>
            Plot a 3d line, see also http://members.chello.at/~easyfilter/bresenham.html
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="z0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="onPlot"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BresenHamPlotLine3d(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Vintagestory.API.MathTools.PlotDelegate3DBlockPos)">
            <summary>
            Plot a 3d line, see also http://members.chello.at/~easyfilter/bresenham.html
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="z0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="onPlot"></param>
        </member>
        <member name="M:Vintagestory.API.MathTools.GameMath.BresenHamPlotLine2d(System.Int32,System.Int32,System.Int32,System.Int32,Vintagestory.API.MathTools.PlotDelegate2D)">
            <summary>
            Plot a 2d line, see also http://members.chello.at/~easyfilter/bresenham.html
            </summary>
            <param name="x0"></param>
            <param name="y0"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="onPlot"></param>
        </member>
        <member name="T:Vintagestory.API.MathTools.ClampedSimplexNoise">
            <summary>
            Perlin noise of supplied amplitude and frequency. The resulting value is clamped to 0...1
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.NormalizedSimplexNoise">
            <summary>
            It's generally pretty hard to get a neatly normalized coherent noise function due to the way perlin/open simplex works (gauss curve) and how random numbers are generated. So instead of trying to find the perfect normalization factor and instead try to perform some approximate normalization this class allows a small overflow and brings it down very close to the [0, 1] range using tanh().
            
            Returns values in a range of [0..1]
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.NormalizedSimplexNoise.FromDefaultOctaves(System.Int32,System.Double,System.Double,System.Int64)">
            <summary>
            Generates the octaves and frequencies using following formulas 
            freq[i] = baseFrequency * 2^i
            amp[i] = persistence^i
            </summary>
            <param name="quantityOctaves"></param>
            <param name="baseFrequency"></param>
            <param name="persistence"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.NormalizedSimplexNoise.Noise(System.Double,System.Double)">
            <summary>
            2d noise
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.NormalizedSimplexNoise.Noise(System.Double,System.Double,System.Double)">
            <summary>
            3d noise
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.NormalizedSimplexNoise.Noise(System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            3d Noise using custom amplitudes
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="amplitudes"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.SimplexNoiseOctave">
            <summary>
            OpenSimplex Noise in C#
            Ported from https://gist.github.com/KdotJPG/b1270127455a94ac5d19 by KdotJPG
            and heavily refactored to improve performance.
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.EvolvingNatFloat">
            <summary>
            A number generator whose return value changes over time, parametrized by a transform function and some constants
            </summary>
        </member>
        <member name="M:Vintagestory.API.MathTools.EvolvingNatFloat.nextFloat(System.Single,System.Single)">
            <summary>
            The sequence should always run from 0 to n
            </summary>
            <param name="firstvalue"></param>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.MathTools.EnumDistribution">
            <summary>
            The distribution of the random numbers 
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.UNIFORM">
            <summary>
            Select completely random numbers within avg-var until avg+var
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.TRIANGLE">
            <summary>
            Select random numbers with numbers near avg being the most commonly selected ones, following a triangle curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.GAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the most commonly selected ones, following a gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.NARROWGAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the most commonly selected ones, following a narrow gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.VERYNARROWGAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the least commonly selected ones, following an even narrower gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.INVERSEGAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the least commonly selected ones, following an upside down gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.NARROWINVERSEGAUSSIAN">
            <summary>
            Select random numbers with numbers near avg being the least commonly selected ones, following an upside down gaussian curve
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.INVEXP">
            <summary>
            Select numbers in the form of avg + var, wheras low value of var are preferred
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.STRONGINVEXP">
            <summary>
            Select numbers in the form of avg + var, wheras low value of var are strongly preferred
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.STRONGERINVEXP">
            <summary>
            Select numbers in the form of avg + var, wheras low value of var are very strongly preferred
            </summary>
        </member>
        <member name="F:Vintagestory.API.MathTools.EnumDistribution.DIRAC">
            <summary>
            Select completely random numbers within avg-var until avg+var only ONCE and then always 0
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.NatFloat">
            <summary>
            A more natural random number generator (nature usually doesn't grow by the exact same numbers nor does it completely randomly)
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.NatFloat.Zero">
            <summary>
            Always 0
            </summary>
        </member>
        <member name="P:Vintagestory.API.MathTools.NatFloat.One">
            <summary>
            Always 1
            </summary>
        </member>
        <member name="T:Vintagestory.API.MathTools.Ascii85">
            <summary>
            Converts between binary data and an Ascii85-encoded string.
            </summary>
            <remarks>See <a href="http://en.wikipedia.org/wiki/Ascii85">Ascii85 at Wikipedia</a>.</remarks>
        </member>
        <member name="M:Vintagestory.API.MathTools.Ascii85.Encode(System.Byte[])">
            <summary>
            Encodes the specified byte array in Ascii85.
            </summary>
            <param name="bytes">The bytes to encode.</param>
            <returns>An Ascii85-encoded string representing the input byte array.</returns>
        </member>
        <member name="M:Vintagestory.API.MathTools.Ascii85.Decode(System.String)">
            <summary>
            Decodes the specified Ascii85 string into the corresponding byte array.
            </summary>
            <param name="encoded">The Ascii85 string.</param>
            <returns>The decoded byte array.</returns>
        </member>
        <member name="M:Vintagestory.API.Server.IPlayerDataManager.GetPlayerDataByUid(System.String)">
            <summary>
            Retrieve a players offline, world-agnostic data by player uid
            </summary>
            <param name="playerUid"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IPlayerDataManager.GetPlayerDataByLastKnownName(System.String)">
            <summary>
            Retrieve a players offline, world-agnostic data by his last known name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.SetRole(Vintagestory.API.Server.IServerPlayer,Vintagestory.API.Server.IPlayerRole)">
            <summary>
            Set given role for given player. Role must exist in the serverconfig.json. For a list of roles, read sapi.Config.Roles
            </summary>
            <param name="player"></param>
            <param name="role"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.SetRole(Vintagestory.API.Server.IServerPlayer,System.String)">
            <summary>
            Set given role for given player. Role must exist in the serverconfig.json. For a list of roles, read sapi.Config.Roles
            </summary>
            <param name="player"></param>
            <param name="roleCode"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.RegisterPrivilege(System.String,System.String,System.Boolean)">
            <summary>
            Registers a user privilege with the server. Is only active for the current server session and lost during a server restart/shutdown, so register it during server startup.
            New privileges are auto-granted to admins and the server console.
            </summary>
            <param name = "code">Privilege to register</param>
            <param name = "shortdescription">Short description</param>
            <param name = "adminAutoGrant">By default, super users are automatically granted all privileges. Set this value to false to change that</param>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.GrantTemporaryPrivilege(System.String)">
            <summary>
            Grants privilege to all players connected or yet to connect. This setting is only active for the current server session and lost during a server restart/shutdown.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.DropTemporaryPrivilege(System.String)">
            <summary>
            Revokes a privilege that has been previously granted to all players. Does not revoke privileges granted from a group. Does nothing if this privilege hasn't been previously granted.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.GrantPrivilege(System.String,System.String,System.Boolean)">
            <summary>
            Grant a privilege to an individual connected player. 
            </summary>
            <param name="playerUID"></param>
            <param name="code"></param>
            <param name="permanent">Wether to store this privilege permanently. Otherwise only valid for the active server session.</param>
            <returns>False if player was not found</returns>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.DenyPrivilege(System.String,System.String)">
            <summary>
            Actively denies a privilege from a player, overrides privileges granted by a role. Does not however override non permanent privileges
            </summary>
            <param name="playerUID"></param>
            <param name="code"></param>
            <returns>False if player was not found</returns>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.RemovePrivilegeDenial(System.String,System.String)">
            <summary>
            Removes a previously set privilege denial, if any was set.
            </summary>
            <param name="playerUID"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.RevokePrivilege(System.String,System.String,System.Boolean)">
            <summary>
            Revokes a privilege that has been previously granted to this player. Does not revoke privileges granted from a group. Does nothing if the player does not have given privilege.
            </summary>
            <param name="playerUID"></param>
            <param name="code"></param>
            <param name="permanent">If true it removes a previously granted permanent privilege. If false it removes a previously granted temporary privilege.</param>
            <returns>False if player was not found</returns>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.AddPrivilegeToGroup(System.String,System.String)">
            <summary>
            Add given privilege to given group, granting everyone in this group access to this privilege. This setting is only active for the current server session and lost during a server restart/shutdown.
            </summary>
            <param name="groupCode"></param>
            <param name="privilegeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.RemovePrivilegeFromGroup(System.String,System.String)">
            <summary>
            Revokes given privilege to given group, revoking everyones access to this privilege inside this group
            </summary>
            <param name="groupCode"></param>
            <param name="privilegeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IPermissionManager.GetPlayerPermissionLevel(System.Int32)">
            <summary>
            Returns the players permission level
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.ISaveGame.IsNew">
            <summary>
            True if this is a newly created world
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ISaveGame.CreatedGameVersion">
            <summary>
            The game version under which this savegame was created
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ISaveGame.LastSavedGameVersion">
            <summary>
            The game version under which this savegame was last saved
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ISaveGame.SavegameIdentifier">
            <summary>
            A globally unique identifier for this savegame
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.ISaveGame.GetData(System.String)">
            <summary>
            Gets a previously saved object from the savegame. Returns null if no such data under this key was previously set.
            </summary>
            <param name = "name">The key to look for</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.ISaveGame.StoreData(System.String,System.Byte[])">
            <summary>
            Store the given data persistently to the savegame.
            </summary>
            <param name = "name">Key value</param>
            <param name = "value">Data to save</param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerConfig">
            <summary>
            The servers configuration
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.Port">
            <summary>
            The current network port 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.ServerName">
            <summary>
            Name of the server, currently not used
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.WelcomeMessage">
            <summary>
            Displays when the user logs in.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.MaxClients">
            <summary>
            Max amount of concurrent players, any beyond will be denied to join
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.Password">
            <summary>
            Password the player has to supply to join
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.MaxChunkRadius">
            <summary>
            How many chunks in each direction should be loaded at most for each player (1 chunk = 32 blocks) 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.TickTime">
            <summary>
            Of often the server should tick in milliesconds
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.BlockTickChunkRange">
            <summary>
            Horizontal distance in chunks from each player to tick blocks randomly
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.MaxMainThreadBlockTicks">
            <summary>
            The maximum number of blocks to tick per server tick
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.RandomBlockTicksPerChunk">
            <summary>
            The number of blocks to sample for ticks each pass within a single chunk
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.BlockTickInterval">
            <summary>
            The interval of time in ms between each execution of the random tick system
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.Roles">
            <summary>
            List of player roles 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.DefaultRoleCode">
            <summary>
            Default player role
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.AntiAbuse">
            <summary>
            AntiAbuse protection level. Use not recommended, it is very buggy at the moment
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.OnlyWhitelisted">
            <summary>
            If true, only whitelisted players can join
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.DefaultSpawn">
            <summary>
            Default spawn position for players
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.AllowPvP">
            <summary>
            Whether or not to allow Player versus Player
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.AllowFireSpread">
            <summary>
            Whether or not fire should spread
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerConfig.AllowFallingBlocks">
            <summary>
            Whether or not falling blocks should fall (e.g. sand and gravel)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.LandClaim.PermittedPlayerGroupIds">
            <summary>
            Other groups allowed to use this land
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.LandClaim.PermittedPlayerUids">
            <summary>
            Other players allowed to use this land
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.LandClaim.PermittedPlayerLastKnownPlayerName">
            <summary>
            Other players allowed to use this land, name of the player at the time the privilege was granted
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.IServerEventAPI">
            <summary>
            Contains methods to hook into various server processes
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.GetRegisteredWorldGenHandlers(System.String)">
            <summary>
            Returns the list of currently registered map chunk generator handlers for given world type. Returns an array of handler lists. Each element in the array represents all the handlers for one worldgenpass (see EnumWorldGenPass)
            When world type is null, all handlers are returned
            </summary>
            <param name="worldType">"standard" for the vanilla world generator</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.GetWorldgenBlockAccessor(Vintagestory.API.Common.WorldGenThreadDelegate)">
            <summary>
            If you require neighbour chunk data during world generation, you have to register to this event to receive access to the chunk generator thread. This method is only called once during server startup.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.InitWorldGenerator(Vintagestory.API.Common.Action,System.String)">
            <summary>
            Triggered before the first chunk, map chunk or map region is generated, given that the passed on world type has been selected. Called right after the save game has been loaded.
            </summary>
            <param name="handler"></param>
            <param name="forWorldType"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.MapChunkGeneration(Vintagestory.API.Common.MapChunkGeneratorDelegate,System.String)">
            <summary>
            Event that is triggered whenever a new column of chunks is being generated. It is always called before the ChunkGenerator event
            </summary>
            <param name="handler"></param>
            <param name="forWorldType">For which world types to use this generator</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.MapRegionGeneration(Vintagestory.API.Common.MapRegionGeneratorDelegate,System.String)">
            <summary>
            Event that is triggered whenever a new 16x16 section of column of chunks is being generated. It is always called before the ChunkGenerator and before the MapChunkGeneration event
            </summary>
            <param name="handler"></param>
            <param name="forWorldType">For which world types to use this generator</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.ChunkColumnGeneration(Vintagestory.API.Common.ChunkColumnGenerationDelegate,Vintagestory.API.Server.EnumWorldGenPass,System.String)">
            <summary>
            Vintagestory uses this method to generate the basic terrain (base terrain + rock strata + caves) in full columns. Only called once in pass EnumWorldGenPass.TerrainNoise. Register to this event if you need acces to a whole chunk column during inital generation.
            </summary>
            <param name="handler"></param>
            <param name="pass"></param>
            <param name="forWorldType">For which world types to use this generator</param>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.ChunkColumnLoaded">
            <summary>
            Called whenever the server loaded from disk or fully generated a chunkcolumn
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.ChunkColumnUnloaded">
            <summary>
            Called just before a chunk column is about to get unloaded
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.CanUseBlock">
            <summary>
            Registers a handler to be called every time a player uses a block. The methods return value determines if the player may place/break this block.
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.OnTrySpawnEntity">
            <summary>
            Called when the server attempts to spawn given entity. Return false to deny spawning.
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.OnPlayerInteractEntity">
            <summary>
            Called when a player interacts with an entity
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.PlayerCreate">
            <summary>
            Called when a new player joins 
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.PlayerRespawn">
            <summary>
            Called when a player got respawned
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.PlayerJoin">
            <summary>
            Called when a player joins
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.PlayerNowPlaying">
            <summary>
            Called when a player joins and his client is now fully loaded and ready to play
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.PlayerLeave">
            <summary>
            Called when a player intentionally leaves
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.PlayerDisconnect">
            <summary>
            Called whenever a player disconnects (timeout, leave, disconnect, kick, etc.). 
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.PlayerChat">
            <summary>
            Called when a player wrote a chat message
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.PlayerDeath">
            <summary>
            Called when a player died
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.PlayerSwitchGameMode">
            <summary>
            Whenever a player switched his game mode or has it switched for him
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.BeforeActiveSlotChanged">
            <summary>
            Fired before a player changes their active slot (such as selected hotbar slot).
            Allows for the event to be cancelled depending on the return value.
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.AfterActiveSlotChanged">
            <summary>
            Fired after a player changes their active slot (such as selected hotbar slot).
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.SaveGameLoaded">
            <summary>
            Triggered after the game world data has been loaded. At this point all blocks are loaded and the Map size is known.
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.SaveGameCreated">
            <summary>
            Triggered after a savegame has been created - i.e. when a new world was created
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.GameWorldSave">
            <summary>
            Triggered before the game world data is being saved to disk 
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.ServerRunPhase(Vintagestory.API.Server.EnumServerRunPhase,Vintagestory.API.Common.Action)">
            <summary>
            Triggered whenever the server enters a new run phase. Since mods are only loaded during run phase "LoadGamePre" registering to any earlier event will get triggered.
            </summary>
            <param name="runPhase"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerEventAPI.Timer(Vintagestory.API.Common.Action,System.Double)">
            <summary>
            Registers a method to be called every given interval
            </summary>
            <param name="handler"></param>
            <param name="interval"></param>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.DidPlaceBlock">
            <summary>
            Registers a method to be called every time a player places a block
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.CanPlaceOrBreakBlock">
            <summary>
            Registers a handler to be called every time a player places a block. The methods return value determines if the player may place/break this block. When returning false the client will be notified and the action reverted
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.BreakBlock">
            <summary>
            Called when a block should got broken now (that has been broken by a player). Set handling to PreventDefault to handle the block breaking yourself. Otherwise the engine will break the block (= either call heldItemstack.Collectible.OnBlockBrokenWith when player holds something in his hands or block.OnBlockBroken).
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.DidBreakBlock">
            <summary>
            Registers a method to be called every time a player deletes a block. Called after the block was already broken
            </summary>
        </member>
        <member name="E:Vintagestory.API.Server.IServerEventAPI.DidUseBlock">
            <summary>
            Registers a method to be called every time a player uses a block
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.IServerAPI">
            <summary>
            API for general Server features
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.Players">
            <summary>
            All players known to the server (which joined at least once)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.Config">
            <summary>
            The servers current configuration as configured in the serverconfig.json. You can set the values but you need to call MarkDirty() to have them saved
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.MarkConfigDirty">
            <summary>
            Marks the config dirty for saving
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.CurrentRunPhase">
            <summary>
            Returns the servers current run phase
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.IsDedicated">
            <summary>
            Returns whether the current server a dedicated server
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.IsShuttingDown">
            <summary>
            Determines if the server process has been asked to terminate.
            Use this when you need to save data in a method registered using RegisterOnSave() before server quits.
            </summary>
            <value><i>true</i>
              if server is about to shutdown</value>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.ShutDown">
            <summary>
            Gracefully shuts down the server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.PauseThread(System.String,System.Int32)">
            <summary>
            Does a blocking wait until given thread is paused. Returns true if the thread was paused within given time
            </summary>
            <param name="threadname"></param>
            <param name="waitTimeoutMs"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.ResumeThread(System.String)">
            <summary>
            Resumes a previously paused thread
            </summary>
            <param name="threadname"></param>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.ServerUptimeSeconds">
            <summary>
            Returns the number of seconds the server has been running since last restart
            </summary>  
            <value>Server uptime in seconds</value>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.ServerUptimeMilliseconds">
            <summary>
            Server uptime in milliseconds
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.TotalWorldPlayTime">
            <summary>
            Returns the number of seconds the current world has been running. This is the playtime displayed on the singleplayer world list.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerAPI.Logger">
            <summary>
            Returns a logging interface to log any log level message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogChat(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Chat
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogBuild(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Build
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogVerboseDebug(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.VerboseDebug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogDebug(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Debug
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogNotification(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Notification
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogWarning(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Warning
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogError(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Error
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogFatal(System.String,System.Object[])">
            <summary>
            Log given message with type = EnumLogType.Fatal
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerAPI.LogEvent(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerNetworkAPI">
            <summary>
            API Features to set up a network channel for custom server&lt;-&gt;client data exchange. Server side.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.RegisterChannel(System.String)">
            <summary>   
            Supplies you with your very own and personal network channel that you can use to send packets across the network.  Use the same channelName on the client and server to have them link up.
            </summary>
            <param name="channelName">Unique channel identifier</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.GetChannel(System.String)">
            <summary>
            Returns a previoulsy registered channeled, null otherwise
            </summary>
            <param name="channelName"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.SendBlockEntityPacket(Vintagestory.API.Server.IServerPlayer,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Sends a blockentity packet to the given player. For quick an easy network communication without setting up a channel first.
            </summary>
            <param name="player"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.SendEntityPacket(Vintagestory.API.Server.IServerPlayer,System.Int64,System.Int32,System.Byte[])">
            <summary>
            Sends a entity packet to the given player and entity. For quick an easy entity network communication without setting up a channel first.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.BroadcastEntityPacket(System.Int64,System.Int32,System.Byte[])">
            <summary>
            Sends a entity packet to all players in range. For quick an easy entity network communication without setting up a channel first.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.BroadcastBlockEntityPacket(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Broadcasts a blockentity packet to all connected players. For quick an easy network communication without setting up a channel first.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="packetId"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.SendArbitraryPacket(System.Byte[],Vintagestory.API.Server.IServerPlayer[])">
            <summary>
            Sends a packet data to given players. This let's you mess with the raw network communication if you know the protocol. Use with caution! For normal network communication you probably want to register your own network channel.
            </summary>
            <param name="data"></param>
            <param name="players"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkAPI.BroadcastArbitraryPacket(System.Byte[],Vintagestory.API.Server.IServerPlayer[])">
            <summary>
            Sends a packet data to everyone except given players.This let's you mess with the raw network communication if you know the protocol. Use with caution! For normal network communication you probably want to register your own network channel.
            </summary>
            <param name="data"></param>
            <param name="exceptPlayers"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerPlayer">
            <summary>
            Represents a player on the server side that joined the server at least once. May not be online at this point in time.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.CurrentChunkSentRadius">
            <summary>
            The "radius" of chunks that the player already received. If set to 0, the server will recheck all nearby chunks if they have been sent or not and send them when necessary
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.ConnectionState">
            <summary>
            Retrieves the current connection state of the client
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.IpAddress">
            <summary>
            Get the IP for the given player ID. Returns null if not connected, or when called on client side.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.LanguageCode">
            <summary>
            The language this player is currently using
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.Ping">
            <summary>
            Returns the players ping time in seconds. Returns NaN if not connected or when on client side.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.ServerData">
            <summary>
            The players configuration that is world independent
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.Role">
            <summary>
            Returns the players privilege role
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.Groups">
            <summary>
            The players player group memberships
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.BroadcastPlayerData(System.Boolean)">
            <summary>
            Notifies all clients of given players playerdata. Useful when you modified any of the WorldData. Does nothing if this player is not connected. Also sends the player data to the player himself
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.Disconnect">
            <summary>
            Disconnects (kicks) this player from the server. Does nothing if this player is not connected.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.Disconnect(System.String)">
            <summary>
            Disconnects (kicks) a player from the server with given reason. Does nothing if this player is not connected.
            </summary>
            <param name = "message">Message displayed to the player</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.SendIngameError(System.String,System.String,System.Object[])">
            <summary>
            Shows a vibrating red text in the players screen. If text is null the client will try to find a language entry using supplied code prefixed with 'ingameerror-' (which is recommended so that the errors are translated to the users local language)
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="langparams"> If text is null, these are the arguments passed into the Language translation tool</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.SendMessage(System.Int32,System.String,Vintagestory.API.Common.EnumChatType,System.String)">
            <summary>
            Sends a chat message to this player to given groupId. You can use GlobalConstants.GeneralChatGroup as groupId to send it to the players general chat.
            </summary>
            <param name="groupId"></param>
            <param name="message"></param>
            <param name="chatType"></param>
            <param name="data">Optional parameter that can be used to pass on unformated data. Just like stdin/stdout/stderr, you could see this as a separate "programming communication channel"</param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.SetRole(System.String)">
            <summary>
            Sets the players privilege role. For a list of roles, read sapi.Config.Roles
            </summary>
            <param name="roleCode"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.SetSpawnPosition(Vintagestory.API.Server.PlayerSpawnPos)">
            <summary>
            Sets a player specific spawn position
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.ClearSpawnPosition">
            <summary>
            Removes the player specific spawn position, which means it will default to the role or global default spawn position
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayer.SpawnPosition">
            <summary>
            Returns the default spawn position.
            This method will return the custom spawnpoint if one has been permanently set.
            If no custom spawnpoint is present this method will return the global default spawnpoint.
            Returns null when called on client side.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.SendPositionToClient">
            <summary>
            Tells the server send a position packet to the client
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.SetModdata(System.String,System.Byte[])">
            <summary>
            Allows setting of arbitrary, permanantly stored moddata attached to this player. Not synced to client.
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.RemoveModdata(System.String)">
            <summary>
            Removes the permanently stored mod data
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerPlayer.GetModdata(System.String)">
            <summary>
            Retrieve arbitrary, permantly stored mod data
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Server.ChunkLoadOptions.KeepLoaded">
            <summary>
            If true, the chunk will never get unloaded unless UnloadChunkColumn() is called
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.ChunkLoadOptions.OnLoaded">
            <summary>
            Callback for when the chunks are ready and loaded
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.ChunkLoadOptions.ChunkGenParams">
            <summary>
            Additional config to pass onto the world generators
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.ChunkPeekOptions.UntilPass">
            <summary>
            Until which world gen pass to generate the chunk (default: Done)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.ChunkPeekOptions.OnGenerated">
            <summary>
            Callback for when the chunks are ready and loaded
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.ChunkPeekOptions.ChunkGenParams">
            <summary>
            Additional config to pass onto the world generators
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.IWorldManagerAPI">
            <summary>
            Methods to modify the game world
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.AllLoadedMapchunks">
            <summary>
            Returns a (cloned) list of all currently loaded map chunks. The key is the 2d index of the map chunk, can be turned into an x/z coord
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.AllLoadedMapRegions">
            <summary>
            Returns a (cloned) list of all currently loaded map regions. The key is the 2d index of the map region, can be turned into an x/z coord
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.AllLoadedChunks">
            <summary>
            Returns a (cloned) list of all currently loaded chunks. The key is the 3d index of the chunk, can be turned into an x/y/z coord. Warning: This locks the loaded chunk dictionary during the clone, preventing other threads from updating it. In other words: Using this method often will have a significant performance impact.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.CurrentGeneratingChunkCount">
            <summary>
            Amount of chunk columns currently in the generating queue
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.SaveGame">
            <summary>
            The worlds savegame object. If you change these values they will be permanently stored
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetBlockLightLevels(System.Single[])">
            <summary>
            Allows setting a 32 float array that defines the brightness of each block light level. Has to be set before any players join or any chunks are generated.
            </summary>
            <param name="lightLevels"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetSunLightLevels(System.Single[])">
            <summary>
            Allows setting a 32 float array that defines the brightness of each sun light level. Has to be set before any players join or any chunks are generated.
            </summary>
            <param name="lightLevels"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetSunBrightness(System.Int32)">
            <summary>
            Sets the default light range of sunlight. Default is 24. Has to be set before any players join or any chunks are generated.
            </summary>
            <param name="lightlevel"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetSeaLevel(System.Int32)">
            <summary>
            Sets the default sea level for the world to be generated. Currently used by the client to calculate the correct temperature/rainfall values for climate tinting.
            </summary>
            <param name="sealevel"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetMapRegion(System.Int32,System.Int32)">
            <summary>
            Gets the Server map region at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="regionX"></param>
            <param name="regionZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetMapRegion(System.Int64)">
            <summary>
            Gets the Server map region at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="index2d"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetMapChunk(System.Int32,System.Int32)">
            <summary>
            Gets the Server map chunk at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetMapChunk(System.Int64)">
            <summary>
            Gets the Server map chunk at given coordinate index. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="index2d"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetChunk(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the Server chunk at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetChunk(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Gets the Server chunk at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetChunk(System.Int64)">
            <summary>
            Gets the Server chunk at given coordinate. Returns null if it's not loaded or does not exist yet
            </summary>
            <param name="index3d"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetNextUniqueId">
            <summary>
            Returns a number that is guaranteed to be unique for the current world every time it is called. Curently use for entity herding behavior.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.AutoGenerateChunks">
            <summary>
            Completely disables automatic generation of chunks that normally builds up a radius of chunks around the player. 
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.SendChunks">
            <summary>
            Disables sending of normal chunks to all players except for force loaded ones using ForceLoadChunkColumn
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.LoadChunkColumnFast(System.Int32,System.Int32,Vintagestory.API.Server.ChunkLoadOptions)">
            <summary>
            Asynchronly high priority load a chunk column at given coordinate. 
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <param name="options">Additional loading options</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.LoadChunkColumnPriority(System.Int32,System.Int32,Vintagestory.API.Server.ChunkLoadOptions)">
            <summary>
            Asynchronly high priority load a chunk column at given coordinate. 
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <param name="options">Additional loading options</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.LoadChunkColumnFast(System.Int32,System.Int32,System.Int32,System.Int32,Vintagestory.API.Server.ChunkLoadOptions)">
            <summary>
            Asynchronly high priority load an area of chunk columns at given coordinates. Make sure that X1&lt;=X2 and Z1&lt;=Z2
            </summary>
            <param name="chunkX1"></param>
            <param name="chunkZ1"></param>
            <param name="chunkX2"></param>
            <param name="chunkZ2"></param>
            <param name="options">Additional loading options</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.LoadChunkColumnPriority(System.Int32,System.Int32,System.Int32,System.Int32,Vintagestory.API.Server.ChunkLoadOptions)">
            <summary>
            Asynchronly high priority load an area of chunk columns at given coordinates. Make sure that X1&lt;=X2 and Z1&lt;=Z2
            </summary>
            <param name="chunkX1"></param>
            <param name="chunkZ1"></param>
            <param name="chunkX2"></param>
            <param name="chunkZ2"></param>
            <param name="options">Additional loading options</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.LoadChunkColumn(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Asynchronly normal priority load a chunk column at given coordinate. No effect when already loaded.
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <param name="keepLoaded">If true, the chunk will never get unloaded unless UnloadChunkColumn() is called</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.PeekChunkColumn(System.Int32,System.Int32,Vintagestory.API.Server.ChunkPeekOptions)">
            <summary>
            Generates chunk at given coordinate, completely bypassing any existing world data and caching methods, in other words generates, a chunk from scratch without keeping it in the list of loaded chunks
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.TestChunkExists(System.Int32,System.Int32,System.Int32,Vintagestory.API.Common.Action{System.Boolean})">
            <summary>
            Asynchrounly checks if this chunk is currently loaded or in the savegame database. Calls the callback method with true or false once done looking up
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.BroadcastChunk(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Send or Resend a loaded chunk to all connected players. Has no effect when the chunk is not loaded
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <param name="onlyIfInRange">If true, the chunk will not be sent to connected players that are out of range from that chunk</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.HasChunk(System.Int32,System.Int32,System.Int32,Vintagestory.API.Server.IServerPlayer)">
            <summary>
            Returns true if the server sent chunk at given coords to player and has it not unloaded yet
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SendChunk(System.Int32,System.Int32,System.Int32,Vintagestory.API.Server.IServerPlayer,System.Boolean)">
            <summary>
            Send or Resend a loaded chunk to a connected player. Has no effect when the chunk is not loaded
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <param name="onlyIfInRange">If true, the chunk will not be sent to connected players that are out of range from that chunk</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.ResendMapChunk(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Send or resent a loaded map chunk to all connected players. Has no effect when the map chunk is not loaded
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
            <param name="onlyIfInRange"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.UnloadChunkColumn(System.Int32,System.Int32)">
            <summary>
            Unloads a column of chunks at given coordinate independent of any nearby players and sends an appropriate unload packet to the player
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.DeleteChunkColumn(System.Int32,System.Int32)">
            <summary>
            Deletes a column of chunks at given coordinate from the save file. Also deletes the map chunk and map region at the same coordinate. Also unloads the chunk in the same process.
            </summary>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.MapSizeX">
            <summary>
            Width of the current world
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.MapSizeY">
            <summary>
            Height of the current world
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.MapSizeZ">
            <summary>
            Length of the current world
            </summary>
            <value></value>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetSurfacePosY(System.Int32,System.Int32)">
            <summary>
            Finds the first y position that is solid ground to stand on. Returns null if the chunk is not loaded.
            </summary>
            <param name="posX"></param>
            <param name="posZ"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.RegionSize">
            <summary>
            Width/Length/Height in blocks of a region on the server
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.ChunkSize">
            <summary>
            Width/Length/Height in blocks of a chunk on the server
            </summary>
            <value></value>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.Seed">
            <summary>
            Get the seed used to generate the current world
            </summary>
            <value>The map seed</value>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.CurrentWorldName">
            <summary>
            The current world filename
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldManagerAPI.DefaultSpawnPosition">
            <summary>
            Retrieves the default spawnpoint (x/y/z coordinate)
            </summary>
            <value>Default spawnpoint</value>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SetDefaultSpawnPosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            Permanently sets the default spawnpoint
            </summary>
            <param name = "x">X coordinate of new spawnpoint</param>
            <param name = "y">Y coordinate of new spawnpoint</param>
            <param name = "z">Z coordinate of new spawnpoint</param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockId(Vintagestory.API.Common.AssetLocation)">
            <summary>
            Get the ID of a certain BlockType
            </summary>
            <param name = "name">Name of the BlockType</param>
            <returns>ID of the BlockType</returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SunFloodChunkColumnForWorldGen(Vintagestory.API.Common.IWorldChunk[],System.Int32,System.Int32)">
            <summary>
            Floods the chunk column with sunlight. Only works on full chunk columns.
            </summary>
            <param name="chunks"></param>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.SunFloodChunkColumnNeighboursForWorldGen(Vintagestory.API.Common.IWorldChunk[],System.Int32,System.Int32)">
            <summary>
            Spreads the chunk columns light into neighbour chunks and vice versa. Only works on full chunk columns.
            </summary>
            <param name="chunks"></param>
            <param name="chunkX"></param>
            <param name="chunkZ"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.FullRelight(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Does a complete relighting of the cuboid deliminated by given min/max pos. Completely resends all affected chunk columns to all connected nearby clients.
            </summary>
            <param name="minPos"></param>
            <param name="maxPos"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockAccessor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieve a customized interface to access blocks in the loaded game world.
            </summary>
            <param name="synchronize">Whether or not a call to Setblock should send the update also to all connected clients</param>
            <param name="relight">Whether or not to relight the chunk after a call to SetBlock and the light values changed by that</param>
            <param name="strict">Log an error message if GetBlock/SetBlock was called to an unloaded chunk</param>
            <param name="debug">If strict, crashes the server if a unloaded chunk was crashed, prints an exception and exports a png image of the current loaded chunks</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockAccessorBulkUpdate(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Retrieve a customized interface to access blocks in the loaded game world. Does not to relight/sync on a SetBlock until Commit() is called. On commit all touched blocks are relit/synced at once. This method should be used when setting many blocks (e.g. tree generation, explosion, etc.).
            </summary>
            <param name="synchronize">Whether or not a call to Setblock should send the update also to all connected clients</param>
            <param name="relight">Whether or not to relight the chunk after the a call to SetBlock and the light values changed by that</param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockAccessorRevertable(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Same as GetBlockAccessorBulkUpdate, additionally, each Commit() stores the previous state and you can perform undo/redo operations on these. 
            </summary>
            <param name="synchronize">Whether or not a call to Setblock should send the update also to all connected clients</param>
            <param name="relight">Whether or not to relight the chunk after a call to SetBlock and the light values changed by that</param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetBlockAccessorPrefetch(System.Boolean,System.Boolean)">
            <summary>
            Same as GetBlockAccessor but you have to call PrefetchBlocks() before using GetBlock(). It pre-loads all blocks in given area resulting in faster GetBlock() access
            </summary>
            <param name="synchronize">Whether or not a call to Setblock should send the update also to all connected clients</param>
            <param name="relight">Whether or not to relight the chunk after a call to SetBlock and the light values changed by that</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldManagerAPI.GetCachingBlockAccessor(System.Boolean,System.Boolean)">
            <summary>
            Same as the normal block accessor but remembers the previous chunk that was accessed. This can give you a 10-50% performance boosts when you scan many blocks in tight loops
            DONT FORGET: Call .Begin() before getting/setting in a tight loop. Not calling it can cause the game to crash
            </summary>
            <param name="synchronize"></param>
            <param name="relight"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Server.INetworkMessage">
            <summary>
            A message to be sent across the network. Is serialized/deserialized using protobuf
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.NetworkClientMessageHandler`1">
            <summary>
            Handler for processing a message
            </summary>
            <param name="fromPlayer"></param>
            <param name="networkMessage"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerNetworkChannel">
            <summary>
            Represent a custom network channel for sending messages between client and server
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkChannel.RegisterMessageType(System.Type)">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkChannel.RegisterMessageType``1">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkChannel.SetMessageHandler``1(Vintagestory.API.Server.NetworkClientMessageHandler{``0})">
            <summary>
            Registers a handler for when you send a packet with given messageId
            </summary>
            <typeparam name="T"></typeparam>
            <param name="messageHandler"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkChannel.SendPacket``1(``0,Vintagestory.API.Server.IServerPlayer[])">
            <summary>
            Sends a packet to given player
            </summary>
            <param name="message"></param>
            <param name="players"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerNetworkChannel.BroadcastPacket``1(``0,Vintagestory.API.Server.IServerPlayer[])">
            <summary>
            When called on Sends a packet to all connected player, except given players
            </summary>
            <param name="message"></param>
            <param name="exceptPlayers"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerPlayerData">
            <summary>
            The player configuration that is world independent
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.PlayerUID">
            <summary>
            The players unique identifier
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.RoleCode">
            <summary>
            The players role code
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.PermaPrivileges">
            <summary>
            Privilige explicitly granted to this player
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.DeniedPrivileges">
            <summary>
            Privilige explicitly revoked from this player
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.PlayerGroupMemberShips">
            <summary>
            List of groups the player is a member off
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.AllowInvite">
            <summary>
            Whether or not this player wants to receive group invites
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.LastKnownPlayername">
            <summary>
            The players last known player name. This may have changed since the last log in.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.PlayerGroupMemberships">
            <summary>
            Returns all player groups which this player is part of
            </summary>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.CustomPlayerData">
            <summary>
            Store your own custom data in here if you need. Might want to serialize your data to json code first.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.ExtraLandClaimAllowance">
            <summary>
            Extra land claim allowance (beyond whats granted by the role)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerPlayerData.ExtraLandClaimAreas">
            <summary>
            Extra land claim areas (beyond whats granted by the role)
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldGenHandler.OnMapRegionGen">
            <summary>
            List of registered map region generation handlers
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldGenHandler.OnMapChunkGen">
            <summary>
            List of registered map chunk generation handlers
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IWorldGenHandler.OnChunkColumnGen">
            <summary>
            List of registered map chunk generation handlers per pass (see EnumWorldGenPass)
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenHandler.WipeAllHandlers">
            <summary>
            Empties all three lists
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenBlockAccessor.ScheduleBlockUpdate(Vintagestory.API.MathTools.BlockPos)">
            <summary>
            Tells the server to produce a block update at this given position once the chunk is fully generated and world ticking has begun
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenBlockAccessor.ScheduleBlockLightUpdate(Vintagestory.API.MathTools.BlockPos,System.Int32,System.Int32)">
            <summary>
            Tells the server to relight this position once RunScheduledBlockLightUpdates() is called
            </summary>
            <param name="pos"></param>
            <param name="oldBlockid"></param>
            <param name="newBlockId"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenBlockAccessor.RunScheduledBlockLightUpdates">
            <summary>
            This will run all scheduled block light updates at once. Should be called after all lighting has been completed.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IWorldGenBlockAccessor.AddEntity(Vintagestory.API.Common.Entities.Entity)">
            <summary>
            Adds given initialized entity to the world. Requires you to set the Pos and ServerPos fields.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Vintagestory.API.Server.IServerWorldAccessor">
            <summary>
            The world accessor implemented by the server
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.IServerWorldAccessor.LoadedEntities">
            <summary>
            The internal cache of all currently loaded entities. Warning: You should not set or remove anything from this dic unless you *really* know what you're doing. Use SpawnEntity/DespawnEntity instead.
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerWorldAccessor.DespawnEntity(Vintagestory.API.Common.Entities.Entity,Vintagestory.API.Common.Entities.EntityDespawnReason)">
            <summary>
            Removes an entity from the game and the chunk it resides in
            </summary>
            <param name="entity"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerWorldAccessor.CreateExplosion(Vintagestory.API.MathTools.BlockPos,Vintagestory.API.Common.EnumBlastType,System.Double,System.Double)">
            <summary>
            Creates an explosion at given position. 
            </summary>
            <param name="pos"></param>
            <param name="blastType"></param>
            <param name="destructionRadius"></param>
            <param name="injureRadius"></param>
        </member>
        <member name="P:Vintagestory.API.Server.IServerWorldAccessor.TreeGenerators">
            <summary>
            List of all loaded tree generators
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.EnumClientState">
            <summary>
            The current connection state of a player thats currently connecting to the server
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IChunkProviderThread.GetBlockAccessor(System.Boolean)">
            <summary>
            Retrieve a customized interface to access blocks for generating chunks
            </summary>
            <param name="updateHeightmap">Whether or not SetBlock should update the heightmap</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IChunkProvider.GetUnpackedChunkFast(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Like GetChunk() but includes a cache of the last chunk fetched - use this in a loop where getting the chunk for neighbouring blockPos, so most will be in the same chunk
            This always unpacks the chunk, unless it is null.
            Implementing code must ensure the chunk is unpacked before returning it, unless returning the cached chunk and notRecentlyAccessed is false (i.e. if the cache chunk was recently accessed then it's safe to assume it was already unpacked)
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.IChunkProvider.ChunkIndex3D(System.Int32,System.Int32,System.Int32)">
            <summary>
            Index for a chunk coordinate
            </summary>
            <param name="chunkX"></param>
            <param name="chunkY"></param>
            <param name="chunkZ"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Server.EnumProtectionLevel">
            <summary>
            How strongly the Server should protect against hacking
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumProtectionLevel.Off">
            <summary>
            No verification or protection of any kind
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumProtectionLevel.Basic">
            <summary>
            Server will: Simulate each players movements and correct the position if the client reports the player at a different positions, verify the players picking range when placing or removing blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumProtectionLevel.Pedantic">
            <summary>
            Not used yet
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.EnumServerRunPhase">
            <summary>
            These are the stages the server goes through during launch
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Start">
            <summary>
            Before anything has been initialized (you cannot receive any events at this point)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Initialization">
            <summary>
            Server only stuff initialized, Serversystems instantatied, now initializing ServerSystems then Mods. Serversystem receive events at this point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Configuration">
            <summary>
            Everything initialized, now loading config
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.LoadAssets">
            <summary>
            Mods will be compiled and started, AssetManager will init all origins and cache assets.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.LoadGamePre">
            <summary>
            All configs loaded, game world loaded by server. Mods receive events at this point.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.LoadGame">
            <summary>
            All configs loaded, spawn chunks loaded, game world loaded by server. All blocks are loaded.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.GameReady">
            <summary>
            All configs loaded, game world loaded by server. All blocks are loaded.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.WorldReady">
            <summary>
            Spawn chunks now loaded.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.RunGame">
            <summary>
            About to run first game world tick.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Shutdown">
            <summary>
            Shutdown has begun
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumServerRunPhase.Exit">
            <summary>
            Shutdown complete
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.EnumWorldGenPass">
            <summary>
            The stages a chunk goes through when being created
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.None">
            <summary>
            Nothing generated yet
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.Terrain">
            <summary>
            Does not require neighbour chunks to exist. Should generates 3d rock terrain mostly. Default generators by execute order:
            0 = Basic 3D Terrain (granite+rock)
            0.1 = Rock Strata
            0.3 = Cave generator 
            0.4 = Block layers (soil, gravel, sand, ice, tall grass, etc.)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.TerrainFeatures">
            <summary>
            Requires neighbour chunks. Ravines, Lakes, Boulders.  Default generators by execute order:
            0.2 = Deposits (Ores, Peat, Clay, etc.)
            0.3 = Worldgen Structures
            0.4 = Above sealevel Lakes
            0.5 = Worldgen Structures Post Pass
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.Vegetation">
            <summary>
            Requires neighbour chunks. Default generators by execute order:
            0.5 = Block Patches, Shrubs and Trees
            0.9 = Rivulets (single block water sources)
            0.95 = Sunlight flooding only inside current chunk
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.NeighbourSunLightFlood">
            <summary>
            Requires neighbour chunks. Does the lighting of the chunk.
            0 = Snow layer
            0.95 = Sunlight flooding into neighbouring chunks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.PreDone">
            <summary>
            Requires neighbour chunks. Nothing left to generate, but neighbour chunks might still generate stuff into this chunk
            0.1 = Generate creatures
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.EnumWorldGenPass.Done">
            <summary>
            Chunk generation complete. This pass is not triggered as an event. 
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.IServerChunk">
            <summary>
            Some extra methods available for server side chunks
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.IServerChunk.SetServerModdata(System.String,System.Byte[])">
            <summary>
            Allows setting of server side only moddata of this chunk
            </summary>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Vintagestory.API.Server.IServerChunk.GetServerModdata(System.String)">
            <summary>
            Retrieve server side only mod data
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.Server.IServerChunk.GameVersionCreated">
            <summary>
            The game version where this chunk was created. Please note that this is not the version at which this chunk was complete. Chunks can linger around in a half complete state for a long time. 
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.buildblocks">
            <summary>
            Place or break blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.useblock">
            <summary>
            Interact with block (e.g. door, chest)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.buildblockseverywhere">
            <summary>
            Place or break blocks everywhere, completely ignoring area permissons. You still need to be in creative mode however.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.useblockseverywhere">
            <summary>
            Use blocks everywhere, completely ignoring area permissons. You still need to be in creative mode however.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.attackplayers">
            <summary>
            Cause damage to a player
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.attackcreatures">
            <summary>
            Cause damage to any non-player creature
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.freemove">
            <summary>
            Ability to fly or change movepseed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.gamemode">
            <summary>
            Ability to set own game mode
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.pickingrange">
            <summary>
            Ability to set own picking range
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.chat">
            <summary>
            Ability to chat
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.kick">
            <summary>
            Ability to kick players
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.ban">
            <summary>
            Ability to ban/unban a player
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.whitelist">
            <summary>
            Ability to whitelist/unwhitelist a player
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.setwelcome">
            <summary>
            Ability to set welcome message
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.announce">
            <summary>
            Ability to make a server wide announcement
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.readlists">
            <summary>
            Ability to see client, group, banned user and area lists
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.give">
            <summary>
            Ability to create block from given block id
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.claimland">
            <summary>
            Ability to claim lands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.setspawn">
            <summary>
            Ability to set default spawn
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.controlserver">
            <summary>
            Ability to restart/shutdown server, reload mods, etc.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.tp">
            <summary>
            Ability to teleport
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.time">
            <summary>
            Ability to read, modify game world time
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.grantrevoke">
            <summary>
            Ability to set player role and ability to grant/revoke individual privileges. A player can only grant the same or a lower level group and the same or less privileges.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.root">
            <summary>
            Ability to do everything and have all permissions
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.commandplayer">
            <summary>
            Ability to issue a command for another player (e.g. teleport another player or set another players game mode)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.controlplayergroups">
            <summary>
            Ability to join/leave/invite/op own player groups and their chat channels
            </summary>
        </member>
        <member name="F:Vintagestory.API.Server.Privilege.manageplayergroups">
            <summary>
            Ability to create/disband own player groups and their chat channels
            </summary>
        </member>
        <member name="T:Vintagestory.API.Server.ICoreServerAPI">
            <summary>
            The core api implemented by the server. The main interface for accessing the server. Contains all sub components and some miscellaneous methods.
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.Event">
            <summary>
            API Component for registering to various Events
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.WorldManager">
            <summary>
            API Component for access/modify everything game world related
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.Server">
            <summary>
            API Component for accessing server related functionality
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.Permissions">
            <summary>
            Everything related to roles and privileges
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.Groups">
            <summary>
            Everything related to player groups
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.PlayerData">
            <summary>
            World-agnostic player data. You can query this information even when the player is offline
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.Network">
            <summary>
            API for sending/receiving network packets
            </summary>
        </member>
        <member name="P:Vintagestory.API.Server.ICoreServerAPI.World">
            <summary>
            API for accessing anything in the game world
            </summary>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.SendIngameError(Vintagestory.API.Server.IServerPlayer,System.String,System.String,System.Object[])">
            <summary>
            Shows a vibrating red text in the players screen. If text is null the client will try to find a language entry using supplied code prefixed with 'ingameerror-' (which is recommended so that the errors are translated to the users local language)
            </summary>
            <param name="player"></param>
            <param name="errorCode"></param>
            <param name="text"></param>
            <param name="langparams">If text is null, these are the arguments passed into the Language translation tool</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.SendIngameDiscovery(Vintagestory.API.Server.IServerPlayer,System.String,System.String,System.Object[])">
            <summary>
            Shows a discovery text on the players screen. If text is null the client will try to find a language entry using supplied code prefixed with 'ingamediscovery-' (which is recommended so that the errors are translated to the users local language)
            </summary>
            <param name="player"></param>
            <param name="errorCode"></param>
            <param name="text"></param>
            <param name="langparams">If text is null, these are the arguments passed into the Language translation tool</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.SendMessage(Vintagestory.API.Common.IPlayer,System.Int32,System.String,Vintagestory.API.Common.EnumChatType,System.String)">
            <summary>
            Sends a chat message only to given player in given groupId
            </summary>
            <param name="player"></param>
            <param name="groupId"></param>
            <param name="message"></param>
            <param name="chatType"></param>
            <param name="data">Custom data to a message to be received by the client</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.SendMessageToGroup(System.Int32,System.String,Vintagestory.API.Common.EnumChatType,System.String)">
            <summary>
            Sends a chat message to all online players in given player group
            </summary>
            <param name="groupid"></param>
            <param name="message"></param>
            <param name="chatType"></param>
            <param name="data">Custom data to a message to be received by the client</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.BroadcastMessageToAllGroups(System.String,Vintagestory.API.Common.EnumChatType,System.String)">
            <summary>
            Sends a chat message to all online players in all of their channels
            </summary>
            <param name="message"></param>
            <param name="chatType"></param>
            <param name="data">Custom data to a message to be received by the client</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.InjectConsole(System.String)">
            <summary>
            Injects a message or command into the server console input processing system. This lets you run commands or chat as Admin.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterItem(Vintagestory.API.Common.Item)">
            <summary>
            Register a new item type
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterBlock(Vintagestory.API.Common.Block)">
            <summary>
            Register a new Block. Must happen before server runphase LoadGame. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name = "block">BlockType to register. The Server assigns a block id and sets block.blockId</param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterCraftingRecipe(Vintagestory.API.Common.GridRecipe)">
            <summary>
            Registers a new crafting recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterMetalAlloy(Vintagestory.API.Common.AlloyRecipe)">
            <summary>
            Registers a new metal alloy. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="alloy"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterCookingRecipe(Vintagestory.API.Common.CookingRecipe)">
            <summary>
            Registers a new cooking recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="alloy"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterClayFormingRecipe(Vintagestory.API.Common.ClayFormingRecipe)">
            <summary>
            Registers a new clay forming recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterTreeGenerator(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Server.ITreeGenerator)">
            <summary>
            Registers a new tree generator
            </summary>
            <param name="generatorCode"></param>
            <param name="gen"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterSmithingRecipe(Vintagestory.API.Common.SmithingRecipe)">
            <summary>
            Registers a new metal smithing recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterKnappingRecipe(Vintagestory.API.Common.KnappingRecipe)">
            <summary>
            Registers a new flint knapping recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterBarrelRecipe(Vintagestory.API.Common.BarrelRecipe)">
            <summary>
            Registers a new barrel mixing recipe. These are sent to the client during connect, so only need to register them on the server side.
            </summary>
            <param name="recipe"></param>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterCommand(Vintagestory.API.Common.ServerChatCommand)">
            <summary>
            Registers a chat command. When registered on the client you access the command by prefixing a dot (.), on the server it's a slash (/)
            </summary>
            <param name="chatcommand"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Server.ICoreServerAPI.RegisterCommand(System.String,System.String,System.String,Vintagestory.API.Common.ServerChatCommandDelegate,System.String)">
            <summary>
            Registers a chat command. When registered on the client you access the command by prefixing a dot (.), on the server it's a slash (/)
            </summary>
            <param name="command"></param>
            <param name="descriptionMsg"></param>
            <param name="syntaxMsg"></param>
            <param name="handler"></param>
            <param name="requiredPrivilege"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.FastSetOfLongs.Add(System.Int64)">
            <summary>
            Return false if the set already contained this value; return true if the Add was successful
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.NetUtil.getUriInfo(System.String,System.String@)">
            <summary>
            Extracts hostname, port and password from given uri. Error will be non null if the uri is incorrect in some ways
            </summary>
            <param name="uri"></param>
            <param name="port"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.SerializerUtil.Serialize``1(``0)">
            <summary>
            Uses ProtoBuf.NET to serialize T into bytes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.SerializerUtil.Deserialize``1(System.Byte[])">
            <summary>
            Uses ProtoBuf.Net to deserialize bytes into T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.SerializerUtil.Deserialize``1(System.Byte[],``0)">
            <summary>
            Uses ProtoBuf.Net to deserialize bytes into T. Returns the default value if data is null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.StringUtil.UcFirst(System.String)">
            <summary>
            Convert the first character to an uppercase one
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.WildcardUtil.Match(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.AssetLocation,System.String[])">
            <summary>
            Checks whether or not the wildcard matches for inCode, for example, returns true for wildcard rock-* and inCode rock-granite
            </summary>
            <param name="wildCard"></param>
            <param name="inCode"></param>
            <param name="allowedVariants"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.WildcardUtil.GetWildcardValue(Vintagestory.API.Common.AssetLocation,Vintagestory.API.Common.AssetLocation)">
            <summary>
            Extract the value matched by the wildcard. For exammple for rock-* and inCode rock-granite, this method will return 'granite'
            Returns null if the wildcard does not match
            </summary>
            <param name="wildCard"></param>
            <param name="inCode"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Util.ArrayExtensions.Shuffle``1(``0[],System.Random)">
            <summary>
            Performs a Fisher-Yates shuffle in linear time or O(n)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rand"></param>
            <param name="array"></param>
        </member>
        <member name="M:Vintagestory.API.Util.ArrayExtensions.Shuffle``1(``0[],Vintagestory.API.MathTools.LCGRandom)">
            <summary>
            Performs a Fisher-Yates shuffle in linear time or O(n)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rand"></param>
            <param name="array"></param>
        </member>
        <member name="M:Vintagestory.API.Util.ListExtensions.Shuffle``1(System.Collections.Generic.List{``0},System.Random)">
            <summary>
            Performs a Fisher-Yates shuffle in linear time or O(n)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rand"></param>
            <param name="array"></param>
        </member>
        <member name="T:Vintagestory.API.Config.Lang">
            <summary>
            Utility class for enabling i18n. Loads language entries from assets/[currentlanguage].json
            </summary>
        </member>
        <member name="M:Vintagestory.API.Config.Lang.Load(Vintagestory.API.Common.ILogger,Vintagestory.API.Common.IAssetManager,System.String)">
            <summary>
            Loads all lang entries including this from mods
            </summary>
            <param name="logger"></param>
            <param name="manager"></param>
            <param name="language"></param>
        </member>
        <member name="F:Vintagestory.API.Config.Lang.Inst">
            <summary>
            Yes this means in a singleplayer situdation server and client share the same lang inst, but thats okay, since they use the same file anyway?
            </summary>
        </member>
        <member name="M:Vintagestory.API.Config.Lang.PreLoad(Vintagestory.API.Common.ILogger,System.String,System.String)">
            <summary>
            This will load the vanilla json file, without taking care of mods or resourcepacks.
            </summary>
            <param name="logger"></param>
            <param name="assetsPath"></param>
            <param name="language"></param>
        </member>
        <member name="M:Vintagestory.API.Config.Lang.GetIfExists(System.String,System.Object[])">
            <summary>
            Get the the lang entry for given key, returns null if the entry does not exist. Exact match test.
            </summary>
            <param name="key"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.Lang.GetMatchingIfExists(System.String,System.Object[])">
            <summary>
            Get the the lang entry for given key, returns null if the entry does not exist. Also finds wildcarded lang entries 
            </summary>
            <param name="key"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.Lang.Get(System.String,System.Object[])">
            <summary>
            Get the the lang entry for given key, returns the key itself it the entry does not exist
            </summary>
            <param name="key"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.Lang.GetMatching(System.String,System.Object[])">
            <summary>
            Get the the lang entry for given key, also searches through wildcarded entries. Will return key if it doesnt exist
            </summary>
            <param name="key"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.Config.GlobalConstants">
            <summary>
            Contains some global constants and static values
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DefaultDomain">
            <summary>
            Prefix for all default asset locations
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.MaxAnimatedElements">
            <summary>
            Max. amount of "bones" for animated model. Limited by max amount of shader uniforms of around 60, but depends on the gfx card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.MaxColorMaps">
            <summary>
            Max. amount of "bones" for color maps. Limited by max amount of shader uniforms, but depends on the gfx card
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.PhysicsFrameTime">
            <summary>
            Frame time for physics simulation
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.GravityStrengthParticle">
            <summary>
            A multiplier applied to the y motion of all particles affected by gravity.
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DefaultAttackRange">
            <summary>
            Attack range when using hands
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.OverallSpeedMultiplier">
            <summary>
            Multiplied to all motions and animation speeds
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.BaseMoveSpeed">
            <summary>
            Multiplier applied to the players movement motion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.BaseJumpForce">
            <summary>
            Multiplier applied to the players jump motion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.SneakSpeedMultiplier">
            <summary>
            Multiplier applied to the players sneaking motion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.SprintSpeedMultiplier">
            <summary>
            Multiplier applied to the players sprinting motion
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.AirDragAlways">
            <summary>
            Multiplier applied to the players motion while on the ground or in air
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.AirDragFlying">
            <summary>
            Multiplier applied to the players motion while flying (creative mode)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.WaterDrag">
            <summary>
            Multiplier applied to the players motion while walking in water
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.GravityPerSecond">
            <summary>
            Amount of gravity per tick applied to all entities affected by gravity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DefaultTrackingRange">
            <summary>
            Range in blocks at which clients receive regular updates of this entity
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DefaultPickingRange">
            <summary>
            Range in blocks a player can interact with blocks (break, use, place)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.CurrentWindSpeedClient">
            <summary>
            Set by the WeatherSimulation System in the survival mod
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.MeltingFreezingEnabled">
            <summary>
            Set by the weather simulation system to determine if snowed variants of blocks should melt. Used a static var to improve performance and reduce memory usage
            </summary>
        </member>
        <member name="M:Vintagestory.API.Config.GlobalConstants.OutsideWorld(System.Int32,System.Int32,System.Int32,Vintagestory.API.Common.IBlockAccessor)">
            <summary>
            Returns true if the player fell out of the world (which is map boundaries + 30 blocks in every direction)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="blockAccessor"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GlobalConstants.OutsideWorld(System.Double,System.Double,System.Double,Vintagestory.API.Common.IBlockAccessor)">
            <summary>
            Returns true if the player fell out of the world (which is map boundaries + 30 blocks in every direction)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="blockAccessor"></param>
            <returns></returns>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.GeneralChatGroup">
            <summary>
            Channel name for the general chat
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.ServerInfoChatGroup">
            <summary>
            Channel name for the general chat
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.DamageLogChatGroup">
            <summary>
            Channel name for the damage chat log
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.InfoLogChatGroup">
            <summary>
            Channel name for the info chat log
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.CurrentChatGroup">
            <summary>
            Special channel key typically to reply a Command inside the same the channel the player sent it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.AllChatGroups">
            <summary>
            Special channel key typically to reply a Command inside the same the channel the player sent it
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.ConsoleGroup">
            <summary>
            Special channel key for message sent via server console
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.AllowedChatGroupChars">
            <summary>
            Allowed characters for a player group name
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.SinglePlayerEntitlements">
            <summary>
            Bit of a helper thing for single player servers to display the correct entitlements
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.EntityItemTypeCode">
            <summary>
            The entity class used when spawning items in the world
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.EntityPlayerTypeCode">
            <summary>
            The entity class used when spawning players
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.EntityBlockFallingTypeCode">
            <summary>
            The entity class used when spawning falling blocks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.IgnoredStackAttributes">
            <summary>
            Default Itemstack attributes that should be ignored during a stack.Collectible.Equals() comparison
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.PerishSpeedModifier">
            <summary>
            Global modifier to change the spoil rate of foods. Can be changed during run-time. The value is multiplied to the normal spoilage rate (default: 1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.HungerSpeedModifier">
            <summary>
            Global modifier to change the rate of player hunger. Can be changed during run-time. The value is multiplied to the normal spoilage rate (default: 1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.CreatureDamageModifier">
            <summary>
            Global modifier to change the damage melee attacks from creatures inflict. Can be changed during run-time. The value is multiplied to the normal damage value (default: 1)
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GlobalConstants.ToolMiningSpeedModifier">
            <summary>
            Global modifier to change the block breaking speed of all tools. Can be changed during run-time. The value is multiplied to the breaking speed (default: 1)
            </summary>
        </member>
        <member name="T:Vintagestory.API.Config.OS">
            <summary>
            Operating System Enum
            </summary>
        </member>
        <member name="T:Vintagestory.API.Config.RuntimeEnv">
            <summary>
            Information about the runningtime environment
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.DebugTextureDispose">
            <summary>
            If TEXTURE_DEBUG_DISPOSE is set, the initial value set here will be overridden
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.DebugVAODispose">
            <summary>
            If VAO_DEBUG_DISPOSE is set, the initial value set here will be overridden
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.DebugSoundDispose">
            <summary>
            Debug sound memory leaks. No ENV var
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.DebugOutOfRangeBlockAccess">
            <summary>
            If true, will print the stack trace on some of the blockaccessor if something attempts to get or set blocks outside of its available chunks
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.DebugThreadPool">
            <summary>
            If true, will print allocation trace whenever a new task was enqueued to the thread pool
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.OS">
            <summary>
            The current operating system
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.EnvSearchPathName">
            <summary>
            The Env variable which contains the OS specific search paths for libarires
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.LibExtension">
            <summary>
            .dll for windows, .so for linux, .dylib for mac
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.IsMono">
            <summary>
            Whether the game is run using the Mono framework
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.RuntimeEnv.IsDevEnvironment">
            <summary>
            Whether we are in a dev environment or not
            </summary>
        </member>
        <member name="T:Vintagestory.API.Config.EnumGameBranch">
            <summary>
            Current branch of the game
            </summary>
        </member>
        <member name="T:Vintagestory.API.Config.GameVersion">
            <summary>
            The games current version
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.OverallVersion">
            <summary>
            Assembly Info Version number in the format: major.minor.revision
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.Branch">
            <summary>
            Whether this is a stable or unstable version
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.ShortGameVersion">
            <summary>
            Version number in the format: major.minor.revision[appendix]
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.LongGameVersion">
            <summary>
            Version number in the format: major.minor.revision [release title]
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.AssemblyVersion">
            <summary>
            Assembly Info Version number in the format: major.minor.revision
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.APIVersion">
            <summary>
            Version of the Mod API
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.NetworkVersion">
            <summary>
            Version of the Network Protocol
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.DatabaseVersion">
            <summary>
            Version of the savegame database
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.BlockItemMappingVersion">
            <summary>
            "Version" of the block and item mapping. This number gets increased by 1 when remappings are needed
            </summary>
        </member>
        <member name="F:Vintagestory.API.Config.GameVersion.CopyRight">
            <summary>
            Copyright notice
            </summary>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsCompatibleApiVersion(System.String)">
            <summary>
            Returns true if given version has the same major and minor version. Ignores revision.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsCompatibleNetworkVersion(System.String)">
            <summary>
            Returns true if given version has the same major and minor version. Ignores revision.
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsAtLeastVersion(System.String)">
            <summary>
            Returns true if supplied version is the same or higher as the current version
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsAtLeastVersion(System.String,System.String)">
            <summary>
            Returns true if supplied version is the same or higher as the reference version
            </summary>
            <param name="version"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.Config.GameVersion.IsNewerVersionThan(System.String,System.String)">
            <summary>
            Returns true if supplied version is the higher as the reference version
            </summary>
            <param name="version"></param>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="T:Vintagestory.API.IntDataMap2D">
            <summary>
            A datastructure to hold 2 dimensional data in the form of ints. 
            Can be used to perfrom bilinear interpolation between individual values
            </summary>
        </member>
        <member name="F:Vintagestory.API.IntDataMap2D.Size">
            <summary>
            Full Width and Length of the map (square)
            </summary>
        </member>
        <member name="F:Vintagestory.API.IntDataMap2D.TopLeftPadding">
            <summary>
            Top and Left padding
            </summary>
        </member>
        <member name="F:Vintagestory.API.IntDataMap2D.BottomRightPadding">
            <summary>
            Bottom and Right padding
            </summary>
        </member>
        <member name="P:Vintagestory.API.IntDataMap2D.InnerSize">
            <summary>
            Width and Length of the map excluding any padding
            </summary>
        </member>
        <member name="T:Vintagestory.API.JsonObject">
            <summary>
            Elegant, yet somewhat inefficently designed (because wasteful with heap objects) wrapper class to abstract away the type-casting nightmare of JToken O.O
            </summary>
        </member>
        <member name="M:Vintagestory.API.JsonObject.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Create a new instance of a JsonObject
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:Vintagestory.API.JsonObject.Item(System.String)">
            <summary>
            Access a tokens element with given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Vintagestory.API.JsonObject.Exists">
            <summary>
            True if the token is not null
            </summary>
        </member>
        <member name="M:Vintagestory.API.JsonObject.KeyExists(System.String)">
            <summary>
            True if the token has an element with given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsObject``1(``0,System.String)">
            <summary>
            Deserialize the token to an object
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsArray">
            <summary>
            Turn the token into an array of JsonObjects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsString(System.String)">
            <summary>
            Turn the token into a string
            </summary>
            <param name="defaultValue">If the conversion fails, this value is used instead</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsArray``1(``0[])">
            <summary>
            Turn the token into an array
            </summary>
            <param name="defaultValue">If the conversion fails, this value is used instead</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsBool(System.Boolean)">
            <summary>
            Turn the token into a boolean
            </summary>
            <param name="defaultValue">If the conversion fails, this value is used instead</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsInt(System.Int32)">
            <summary>
            Turn the token into an integer
            </summary>
            <param name="defaultValue">If the conversion fails, this value is used instead</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsFloat(System.Single)">
            <summary>
            Turn the token into a float
            </summary>
            <param name="defaultValue">If the conversion fails, this value is used instead</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.AsDouble(System.Double)">
            <summary>
            Turn the token into a double
            </summary>
            <param name="defaultValue">If the conversion fails, this value is used instead</param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.ToString">
            <summary>
            Calls token.ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.IsArray">
            <summary>
            True if the token is a JArray
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.ToAttribute">
            <summary>
            Turns the token into an IAttribute with all its child elements, if it has any
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.ToPrimitiveArray``1(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Turn a JArray into a primitive array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.Clone">
            <summary>
            Returns a deep clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Vintagestory.API.JsonObject.IsTrue(System.String)">
            <summary>
            Returns true if this object has the named bool attribute, and it is true
            </summary>
        </member>
        <member name="T:ProperVersion.SemVer">
            <summary>
              Implementation of Semantic Verisoning standard, version 2.0.0.
              See https://semver.org/ for specifications.
            </summary>
        </member>
        <member name="M:ProperVersion.SemVer.Parse(System.String)">
            <summary>
              Converts the specified string representation of a
              semantic version to its <see cref="T:ProperVersion.SemVer"/> equivalent.
            </summary>
            <exception cref="T:System.ArgumentNullException"> Thrown if the specified string is null. </exception>
            <exception cref="T:System.FormatException"> Thrown if the specified string doesn't contain a proper properly formatted semantic version. </exception>
        </member>
        <member name="M:ProperVersion.SemVer.TryParse(System.String,ProperVersion.SemVer@)">
            <summary>
              Tries to convert the specified string representation of a
              semantic version to its <see cref="T:ProperVersion.SemVer"/> equivalent,
              returning true if successful.
            </summary>
            <param name="result">
              When this method returns, contains a valid, non-null SemVer,
              If the conversion failed, this is set to the parser's best guess.
            </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if the specified string is null. </exception>
        </member>
        <member name="M:ProperVersion.SemVer.TryParse(System.String,ProperVersion.SemVer@,System.String@)">
            <summary>
              Tries to convert the specified string representation of a
              semantic version to its <see cref="T:ProperVersion.SemVer"/> equivalent,
              returning true if successful.
            </summary>
            <param name="result">
              When this method returns, contains a valid, non-null SemVer,
              If the conversion failed, this is set to the method's best guess.
            </param>
            <param name="error">
              When this method returns, contains the first error describing
              why the conversion failed, or null if it succeeded.
            </param>
            <exception cref="T:System.ArgumentNullException"> Thrown if the specified string is null. </exception>
        </member>
        <member name="M:ProperVersion.SemVer.IsValidIdentifier(System.String)">
            <summary>
              Returns whether the specified string contains only valid
              identifier characters. That is, only alphanumeric characters
              and hyphens, [0-9A-Za-z-]. Does not check for empty identifiers.
            </summary>
        </member>
        <member name="M:ProperVersion.SemVer.IsNumericIdent(System.String)">
            <summary>
              Returns whether the specified string is a
              numeric identifier (only contains digits).
            </summary>
        </member>
        <member name="M:ProperVersion.SemVer.SplitIdentifiers(System.String)">
            <summary>
              Splits a string into dot-separated identifiers.
              Both null and empty strings return an empty array.
            </summary>
        </member>
    </members>
</doc>
